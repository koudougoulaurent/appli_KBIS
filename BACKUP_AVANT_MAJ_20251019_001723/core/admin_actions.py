"""
Actions d'administration pour la gestion des PDF et suppression conditionnelle
"""

from django.contrib import admin
from django.contrib import messages
from django.http import HttpResponseRedirect
from django.urls import reverse
from django.utils.html import format_html
from django.core.exceptions import PermissionDenied
from django.db import transaction
import threading

def regenerate_all_pdfs(modeladmin, request, queryset):
    """
    Action pour r√©g√©n√©rer tous les PDF
    """
    def regenerate_in_background():
        try:
            from .pdf_cache import PDFRegenerationService
            result = PDFRegenerationService.regenerate_all_documents()
            if result['success']:
                print(f"‚úÖ R√©g√©n√©ration automatique termin√©e: {result['total_regenerated']} documents mis √† jour")
            else:
                print(f"‚ùå Erreur lors de la r√©g√©n√©ration: {result.get('error', 'Erreur inconnue')}")
        except Exception as e:
            print(f"‚ùå Erreur critique lors de la r√©g√©n√©ration: {e}")
    
    # Lancer la r√©g√©n√©ration en arri√®re-plan
    thread = threading.Thread(target=regenerate_in_background)
    thread.daemon = True
    thread.start()
    
    messages.success(
        request,
        "üîÑ R√©g√©n√©ration des PDF lanc√©e en arri√®re-plan. Les documents seront mis √† jour automatiquement."
    )

regenerate_all_pdfs.short_description = "üîÑ R√©g√©n√©rer tous les PDF"

def clear_pdf_cache(modeladmin, request, queryset):
    """
    Action pour vider le cache des PDF
    """
    from .pdf_cache import PDFCacheManager
    PDFCacheManager.invalidate_all_pdf_cache()
    messages.success(request, "üóëÔ∏è Cache des PDF vid√© avec succ√®s.")

clear_pdf_cache.short_description = "üóëÔ∏è Vider le cache PDF"

def show_cache_stats(modeladmin, request, queryset):
    """
    Action pour afficher les statistiques du cache
    """
    from .pdf_cache import PDFCacheManager
    stats = PDFCacheManager.get_cache_stats()
    messages.info(
        request,
        f"üìä Statistiques du cache: Hash de configuration = {stats['current_config_hash'][:8]}..."
    )

show_cache_stats.short_description = "üìä Afficher les statistiques du cache"

def force_regenerate_now(modeladmin, request, queryset):
    """
    Action pour forcer la r√©g√©n√©ration imm√©diate
    """
    try:
        from .signals import force_regenerate_all_documents
        result = force_regenerate_all_documents()
        if result['success']:
            messages.success(
                request,
                f"‚úÖ R√©g√©n√©ration imm√©diate termin√©e: {result['total_regenerated']} documents mis √† jour"
            )
        else:
            messages.error(
                request,
                f"‚ùå Erreur lors de la r√©g√©n√©ration: {result.get('error', 'Erreur inconnue')}"
            )
    except Exception as e:
        messages.error(request, f"‚ùå Erreur critique: {e}")

force_regenerate_now.short_description = "‚ö° Forcer la r√©g√©n√©ration imm√©diate"


def suppression_definitive_conditionnelle(modeladmin, request, queryset):
    """
    Action pour suppression d√©finitive avec conditions de s√©curit√©
    """
    # V√©rifier les permissions
    if not request.user.is_superuser:
        raise PermissionDenied("Seuls les superutilisateurs peuvent effectuer des suppressions d√©finitives")
    
    # Compter les √©l√©ments s√©lectionn√©s
    count = queryset.count()
    
    if count == 0:
        messages.warning(request, "‚ö†Ô∏è Aucun √©l√©ment s√©lectionn√© pour la suppression")
        return
    
    # Afficher un r√©sum√© des √©l√©ments √† supprimer
    model_name = queryset.model._meta.verbose_name_plural
    messages.info(request, f"üìã {count} {model_name} s√©lectionn√©(s) pour suppression d√©finitive")
    
    # Conditions de s√©curit√©
    conditions_ok = True
    erreurs = []
    
    # V√©rifier si des √©l√©ments ont des relations importantes
    for obj in queryset:
        # V√©rifier les relations ForeignKey
        for field in obj._meta.get_fields():
            if field.many_to_one and hasattr(obj, field.name):
                related_obj = getattr(obj, field.name, None)
                if related_obj:
                    erreurs.append(f"‚ùå {obj} a une relation avec {related_obj}")
                    conditions_ok = False
        
        # V√©rifier les relations ManyToMany
        for field in obj._meta.get_fields():
            if field.many_to_many and hasattr(obj, field.name):
                related_objects = getattr(obj, field.name, None)
                if related_objects and related_objects.exists():
                    count_related = related_objects.count()
                    erreurs.append(f"‚ùå {obj} a {count_related} relation(s) ManyToMany")
                    conditions_ok = False
    
    if not conditions_ok:
        messages.error(request, "üö´ Suppression annul√©e - Relations d√©tect√©es:")
        for erreur in erreurs[:5]:  # Limiter √† 5 erreurs
            messages.error(request, erreur)
        if len(erreurs) > 5:
            messages.error(request, f"... et {len(erreurs) - 5} autres relations")
        return
    
    # Demander confirmation finale
    if request.POST.get('confirm_suppression') != 'oui':
        # Afficher la page de confirmation
        context = {
            'title': f'Confirmation de suppression d√©finitive',
            'objects': queryset,
            'count': count,
            'model_name': model_name,
            'action': 'suppression_definitive_conditionnelle',
        }
        return admin.site.admin_view(
            lambda request: admin.site.each_context(request)
        )(request)
    
    # Effectuer la suppression avec transaction
    try:
        with transaction.atomic():
            deleted_count = 0
            for obj in queryset:
                obj.delete()
                deleted_count += 1
            
            messages.success(
                request,
                f"‚úÖ Suppression d√©finitive r√©ussie: {deleted_count} {model_name} supprim√©(s)"
            )
            
    except Exception as e:
        messages.error(
            request,
            f"‚ùå Erreur lors de la suppression: {str(e)}"
        )

suppression_definitive_conditionnelle.short_description = "üóëÔ∏è Suppression d√©finitive (avec conditions)"
