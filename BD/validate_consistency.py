#!/usr/bin/env python
"""
Script de validation de la coh√©rence des fichiers du dossier BD
V√©rifie que tous les fichiers sont coh√©rents entre eux
"""
import os
import json
import re
from datetime import datetime


class ConsistencyValidator:
    """Validateur de coh√©rence des fichiers BD"""
    
    def __init__(self):
        self.errors = []
        self.warnings = []
        self.files_checked = []
    
    def validate_all(self):
        """Valider tous les fichiers"""
        print("üîç VALIDATION DE LA COH√âRENCE - KBIS INTERNATIONAL")
        print("=" * 60)
        
        # V√©rifier les fichiers essentiels
        self._check_essential_files()
        
        # Valider le sch√©ma JSON
        self._validate_json_schema()
        
        # Valider les fichiers SQL
        self._validate_sql_files()
        
        # Valider la documentation
        self._validate_documentation()
        
        # Valider les scripts
        self._validate_scripts()
        
        # Afficher les r√©sultats
        self._display_results()
    
    def _check_essential_files(self):
        """V√©rifier la pr√©sence des fichiers essentiels"""
        print("üìÅ V√©rification des fichiers essentiels...")
        
        essential_files = [
            'README.md',
            'SCHEMA_BDD_COMPLET.md',
            'schema_complet.json',
            'SCHEMA_MYSQL.sql',
            'SCHEMA_POSTGRESQL.sql',
            'SCHEMA_SQL_COMPLET.sql',
            'guide_migration.md',
            'simple_schema.py',
            'schema_base_donnees.py',
            'generate_schema.py',
            'generate_sql_other_dbms.py'
        ]
        
        for file in essential_files:
            if os.path.exists(file):
                self.files_checked.append(file)
                print(f"  ‚úÖ {file}")
            else:
                self.errors.append(f"Fichier manquant: {file}")
                print(f"  ‚ùå {file} - MANQUANT")
    
    def _validate_json_schema(self):
        """Valider le sch√©ma JSON"""
        print("\nüìä Validation du sch√©ma JSON...")
        
        try:
            with open('schema_complet.json', 'r', encoding='utf-8') as f:
                schema = json.load(f)
            
            # V√©rifier la structure
            required_keys = ['generated_at', 'models', 'relationships', 'apps']
            for key in required_keys:
                if key not in schema:
                    self.errors.append(f"Cl√© manquante dans schema_complet.json: {key}")
            
            # V√©rifier les mod√®les
            if 'models' in schema:
                model_count = len(schema['models'])
                print(f"  üìã Mod√®les trouv√©s: {model_count}")
                
                if model_count == 0:
                    self.warnings.append("Aucun mod√®le trouv√© dans le sch√©ma JSON")
            
            # V√©rifier les relations
            if 'relationships' in schema:
                rel_count = len(schema['relationships'])
                print(f"  üîó Relations trouv√©es: {rel_count}")
            
            print("  ‚úÖ Sch√©ma JSON valide")
            
        except FileNotFoundError:
            self.errors.append("Fichier schema_complet.json non trouv√©")
        except json.JSONDecodeError as e:
            self.errors.append(f"Erreur JSON dans schema_complet.json: {e}")
        except Exception as e:
            self.errors.append(f"Erreur lors de la validation du sch√©ma JSON: {e}")
    
    def _validate_sql_files(self):
        """Valider les fichiers SQL"""
        print("\nüóÑÔ∏è Validation des fichiers SQL...")
        
        sql_files = [
            'SCHEMA_MYSQL.sql',
            'SCHEMA_POSTGRESQL.sql',
            'SCHEMA_SQL_COMPLET.sql'
        ]
        
        for sql_file in sql_files:
            if os.path.exists(sql_file):
                self._validate_sql_file(sql_file)
            else:
                self.errors.append(f"Fichier SQL manquant: {sql_file}")
    
    def _validate_sql_file(self, filename):
        """Valider un fichier SQL sp√©cifique"""
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # V√©rifier la pr√©sence de CREATE TABLE
            create_tables = re.findall(r'CREATE TABLE\s+(\w+)', content, re.IGNORECASE)
            print(f"  üìã {filename}: {len(create_tables)} tables")
            
            # V√©rifier la pr√©sence de commentaires
            if '--' not in content:
                self.warnings.append(f"Fichier {filename} ne contient pas de commentaires")
            
            # V√©rifier la longueur du fichier
            if len(content) < 1000:
                self.warnings.append(f"Fichier {filename} semble trop court")
            
            print(f"  ‚úÖ {filename} valide")
            
        except Exception as e:
            self.errors.append(f"Erreur lors de la validation de {filename}: {e}")
    
    def _validate_documentation(self):
        """Valider la documentation"""
        print("\nüìö Validation de la documentation...")
        
        doc_files = [
            'README.md',
            'SCHEMA_BDD_COMPLET.md',
            'guide_migration.md',
            'README_SQL.md'
        ]
        
        for doc_file in doc_files:
            if os.path.exists(doc_file):
                self._validate_doc_file(doc_file)
            else:
                self.warnings.append(f"Fichier de documentation manquant: {doc_file}")
    
    def _validate_doc_file(self, filename):
        """Valider un fichier de documentation"""
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # V√©rifier la longueur
            if len(content) < 500:
                self.warnings.append(f"Fichier {filename} semble trop court")
            
            # V√©rifier la pr√©sence de titres
            if '#' not in content:
                self.warnings.append(f"Fichier {filename} ne contient pas de titres Markdown")
            
            # V√©rifier la pr√©sence de KBIS INTERNATIONAL
            if 'KBIS INTERNATIONAL' not in content:
                self.warnings.append(f"Fichier {filename} ne mentionne pas KBIS INTERNATIONAL")
            
            print(f"  ‚úÖ {filename} valide")
            
        except Exception as e:
            self.errors.append(f"Erreur lors de la validation de {filename}: {e}")
    
    def _validate_scripts(self):
        """Valider les scripts Python"""
        print("\nüêç Validation des scripts Python...")
        
        script_files = [
            'simple_schema.py',
            'schema_base_donnees.py',
            'generate_schema.py',
            'generate_sql_other_dbms.py'
        ]
        
        for script_file in script_files:
            if os.path.exists(script_file):
                self._validate_script_file(script_file)
            else:
                self.warnings.append(f"Script Python manquant: {script_file}")
    
    def _validate_script_file(self, filename):
        """Valider un script Python"""
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # V√©rifier la pr√©sence de shebang
            if not content.startswith('#!/usr/bin/env python'):
                self.warnings.append(f"Script {filename} ne commence pas par shebang")
            
            # V√©rifier la pr√©sence de docstring
            if '"""' not in content:
                self.warnings.append(f"Script {filename} ne contient pas de docstring")
            
            # V√©rifier la pr√©sence de gestion d'erreurs
            if 'try:' not in content and 'except' not in content:
                self.warnings.append(f"Script {filename} ne contient pas de gestion d'erreurs")
            
            print(f"  ‚úÖ {filename} valide")
            
        except Exception as e:
            self.errors.append(f"Erreur lors de la validation de {filename}: {e}")
    
    def _display_results(self):
        """Afficher les r√©sultats de la validation"""
        print("\n" + "=" * 60)
        print("üìä R√âSULTATS DE LA VALIDATION")
        print("=" * 60)
        
        print(f"\nüìÅ Fichiers v√©rifi√©s: {len(self.files_checked)}")
        print(f"‚ùå Erreurs: {len(self.errors)}")
        print(f"‚ö†Ô∏è Avertissements: {len(self.warnings)}")
        
        if self.errors:
            print("\n‚ùå ERREURS:")
            for error in self.errors:
                print(f"  - {error}")
        
        if self.warnings:
            print("\n‚ö†Ô∏è AVERTISSEMENTS:")
            for warning in self.warnings:
                print(f"  - {warning}")
        
        if not self.errors and not self.warnings:
            print("\nüéâ TOUS LES FICHIERS SONT COH√âRENTS !")
        elif not self.errors:
            print("\n‚úÖ Aucune erreur critique, mais des avertissements √† v√©rifier")
        else:
            print("\n‚ùå Des erreurs critiques ont √©t√© trouv√©es")
        
        print(f"\nüìÖ Validation effectu√©e le {datetime.now().strftime('%d/%m/%Y √† %H:%M:%S')}")


def main():
    """Fonction principale"""
    validator = ConsistencyValidator()
    validator.validate_all()


if __name__ == "__main__":
    main()
