#!/usr/bin/env python3
"""
Script de migration progressive SQLite vers PostgreSQL
Permet de migrer les donn√©es existantes de SQLite vers PostgreSQL
"""
import os
import sys
import django
from django.core.management import execute_from_command_line
from django.db import connections, transaction
from django.conf import settings
import json
from datetime import datetime

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gestion_immobiliere.settings_render')
django.setup()

def test_database_connection():
    """Teste la connexion √† la base de donn√©es"""
    try:
        from django.db import connection
        with connection.cursor() as cursor:
            cursor.execute("SELECT 1")
            result = cursor.fetchone()
            print(f"‚úÖ Connexion base de donn√©es r√©ussie: {result}")
            return True
    except Exception as e:
        print(f"‚ùå Erreur connexion base de donn√©es: {e}")
        return False

def get_database_info():
    """R√©cup√®re les informations sur la base de donn√©es actuelle"""
    db_config = settings.DATABASES['default']
    engine = db_config['ENGINE']
    
    if 'postgresql' in engine:
        db_type = "PostgreSQL"
        db_name = db_config.get('NAME', 'N/A')
    elif 'sqlite' in engine:
        db_type = "SQLite"
        db_name = db_config.get('NAME', 'N/A')
    else:
        db_type = "Autre"
        db_name = db_config.get('NAME', 'N/A')
    
    return db_type, db_name

def backup_sqlite_data():
    """Sauvegarde les donn√©es SQLite existantes"""
    print("üì¶ Sauvegarde des donn√©es SQLite...")
    
    try:
        from django.core.management import call_command
        from io import StringIO
        
        # Exporter les donn√©es en JSON
        output = StringIO()
        call_command('dumpdata', '--natural-foreign', '--natural-primary', stdout=output)
        data = output.getvalue()
        
        # Sauvegarder dans un fichier
        backup_file = f"backup_sqlite_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(backup_file, 'w', encoding='utf-8') as f:
            f.write(data)
        
        print(f"‚úÖ Sauvegarde cr√©√©e: {backup_file}")
        return backup_file
        
    except Exception as e:
        print(f"‚ùå Erreur sauvegarde: {e}")
        return None

def create_postgresql_tables():
    """Cr√©e les tables PostgreSQL"""
    print("üèóÔ∏è Cr√©ation des tables PostgreSQL...")
    
    try:
        # Synchroniser la base de donn√©es (cr√©er les tables)
        execute_from_command_line(['manage.py', 'migrate', '--run-syncdb', '--noinput'])
        print("‚úÖ Tables PostgreSQL cr√©√©es avec succ√®s")
        return True
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation tables: {e}")
        return False

def migrate_data_from_sqlite():
    """Migre les donn√©es de SQLite vers PostgreSQL"""
    print("üîÑ Migration des donn√©es SQLite vers PostgreSQL...")
    
    try:
        # Charger les donn√©es de sauvegarde
        backup_files = [f for f in os.listdir('.') if f.startswith('backup_sqlite_') and f.endswith('.json')]
        if not backup_files:
            print("‚ùå Aucun fichier de sauvegarde trouv√©")
            return False
        
        # Prendre le plus r√©cent
        latest_backup = max(backup_files)
        print(f"üìÅ Utilisation de la sauvegarde: {latest_backup}")
        
        # Charger les donn√©es
        with open(latest_backup, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # Filtrer les donn√©es pour √©viter les conflits
        filtered_data = []
        for item in data:
            # Exclure les donn√©es syst√®me Django
            if not item['model'].startswith('contenttypes.') and not item['model'].startswith('auth.'):
                filtered_data.append(item)
        
        print(f"üìä {len(filtered_data)} objets √† migrer")
        
        # Charger les donn√©es dans PostgreSQL
        from django.core.management import call_command
        from io import StringIO
        
        # Convertir en JSON pour loaddata
        json_data = json.dumps(filtered_data)
        input_stream = StringIO(json_data)
        
        # Charger les donn√©es
        call_command('loaddata', '--format=json', stdin=input_stream)
        
        print("‚úÖ Donn√©es migr√©es avec succ√®s")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur migration donn√©es: {e}")
        return False

def create_initial_data():
    """Cr√©e les donn√©es initiales (groupes, types, etc.)"""
    print("üå± Cr√©ation des donn√©es initiales...")
    
    try:
        # Ex√©cuter le script de donn√©es initiales
        from setup_render import setup_database
        setup_database()
        print("‚úÖ Donn√©es initiales cr√©√©es")
        return True
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation donn√©es initiales: {e}")
        return False

def main():
    """Fonction principale de migration"""
    print("üöÄ MIGRATION PROGRESSIVE SQLITE VERS POSTGRESQL")
    print("=" * 50)
    
    # 1. Tester la connexion
    if not test_database_connection():
        print("‚ùå Impossible de se connecter √† la base de donn√©es")
        return False
    
    # 2. Afficher les informations de la base
    db_type, db_name = get_database_info()
    print(f"üìä Base de donn√©es actuelle: {db_type} - {db_name}")
    
    # 3. Si c'est SQLite, faire la sauvegarde
    if 'sqlite' in db_type.lower():
        backup_file = backup_sqlite_data()
        if not backup_file:
            print("‚ùå √âchec de la sauvegarde")
            return False
    
    # 4. Cr√©er les tables PostgreSQL
    if not create_postgresql_tables():
        print("‚ùå √âchec de la cr√©ation des tables")
        return False
    
    # 5. Migrer les donn√©es si on vient de SQLite
    if 'sqlite' in db_type.lower():
        if not migrate_data_from_sqlite():
            print("‚ùå √âchec de la migration des donn√©es")
            return False
    
    # 6. Cr√©er les donn√©es initiales
    if not create_initial_data():
        print("‚ùå √âchec de la cr√©ation des donn√©es initiales")
        return False
    
    # 7. V√©rification finale
    if test_database_connection():
        print("üéâ MIGRATION TERMIN√âE AVEC SUCC√àS!")
        print("‚úÖ Base de donn√©es PostgreSQL op√©rationnelle")
        return True
    else:
        print("‚ùå Probl√®me lors de la v√©rification finale")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
