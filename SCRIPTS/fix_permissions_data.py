#!/usr/bin/env python3
"""
Script pour corriger les donn√©es de permissions dans la base de donn√©es
R√©sout l'erreur 'str' object has no attribute 'get'
"""

import os
import sys
import django
import json

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gestion_immobiliere.settings')
django.setup()

from utilisateurs.models import GroupeTravail

def fix_permissions_data():
    """Corrige les donn√©es de permissions mal format√©es"""
    print("üîç V√©rification des donn√©es de permissions...")
    
    groupes_corriges = 0
    
    for groupe in GroupeTravail.objects.all():
        print(f"\nüìã Groupe: {groupe.nom}")
        print(f"   Type actuel: {type(groupe.permissions)}")
        print(f"   Valeur actuelle: {repr(groupe.permissions)}")
        
        # Si permissions est une cha√Æne, on essaie de la convertir
        if isinstance(groupe.permissions, str):
            try:
                # Essayer de parser le JSON
                permissions_dict = json.loads(groupe.permissions)
                groupe.permissions = permissions_dict
                groupe.save()
                print(f"   ‚úÖ Converti en dictionnaire: {permissions_dict}")
                groupes_corriges += 1
            except json.JSONDecodeError:
                # Si ce n'est pas du JSON valide, on met un dictionnaire vide
                groupe.permissions = {}
                groupe.save()
                print(f"   ‚ö†Ô∏è  Cha√Æne invalide, remplac√©e par dictionnaire vide")
                groupes_corriges += 1
        elif isinstance(groupe.permissions, dict):
            print(f"   ‚úÖ D√©j√† un dictionnaire")
        else:
            # Type inattendu, on le remplace par un dictionnaire vide
            groupe.permissions = {}
            groupe.save()
            print(f"   ‚ö†Ô∏è  Type inattendu ({type(groupe.permissions)}), remplac√© par dictionnaire vide")
            groupes_corriges += 1
    
    print(f"\nüéâ Correction termin√©e ! {groupes_corriges} groupes corrig√©s.")
    
    # V√©rification finale
    print("\nüîç V√©rification finale...")
    for groupe in GroupeTravail.objects.all():
        print(f"   {groupe.nom}: {type(groupe.permissions)} - {groupe.permissions}")

if __name__ == "__main__":
    fix_permissions_data()

