#!/usr/bin/env python
"""
Script de sauvegarde finale du projet avec toutes les am√©liorations du syst√®me de re√ßus
Cr√©e une sauvegarde compl√®te de l'√©tat actuel du projet
"""

import os
import sys
import shutil
import zipfile
from datetime import datetime
import subprocess

def creer_sauvegarde():
    """Cr√©e une sauvegarde compl√®te du projet"""
    
    # Nom de la sauvegarde avec timestamp
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    nom_sauvegarde = f"etat_final_recus_avancees_{timestamp}"
    
    print(f"üîÑ Cr√©ation de la sauvegarde: {nom_sauvegarde}")
    
    # Cr√©er le dossier de sauvegarde
    dossier_sauvegarde = f"backups/{nom_sauvegarde}"
    os.makedirs(dossier_sauvegarde, exist_ok=True)
    
    # Liste des fichiers et dossiers √† sauvegarder
    elements_a_sauvegarder = [
        # Applications principales
        'paiements/',
        'contrats/',
        'proprietes/',
        'utilisateurs/',
        'core/',
        'notifications/',
        
        # Configuration
        'gestion_immobiliere/',
        'manage.py',
        
        # Templates
        'templates/',
        
        # Fichiers statiques
        'static/',
        
        # Scripts de test
        'test_recus_avancees.py',
        'demo_recus_avancees.py',
        'test_recus_system.py',
        
        # Documentation
        'SYNTHESE_AMELIORATIONS_RECUS.md',
        'API_DOCUMENTATION.md',
        
        # Base de donn√©es
        'db.sqlite3',
        
        # Configuration
        'requirements.txt',
        '.gitignore',
    ]
    
    # Copier les √©l√©ments
    for element in elements_a_sauvegarder:
        if os.path.exists(element):
            destination = os.path.join(dossier_sauvegarde, element)
            if os.path.isdir(element):
                shutil.copytree(element, destination, dirs_exist_ok=True)
                print(f"‚úÖ Dossier copi√©: {element}")
            else:
                os.makedirs(os.path.dirname(destination), exist_ok=True)
                shutil.copy2(element, destination)
                print(f"‚úÖ Fichier copi√©: {element}")
        else:
            print(f"‚ö†Ô∏è √âl√©ment non trouv√©: {element}")
    
    # Cr√©er un fichier README pour la sauvegarde
    readme_content = f"""# Sauvegarde Finale - Syst√®me de Re√ßus Avanc√©s

## Informations de la sauvegarde
- **Date de cr√©ation**: {datetime.now().strftime("%d/%m/%Y √† %H:%M:%S")}
- **Version**: Finale avec toutes les am√©liorations
- **Description**: Syst√®me de re√ßus de paiement compl√®tement am√©lior√©

## Fonctionnalit√©s incluses

### üéØ Mod√®le Recu enrichi
- Validation/invalidation des re√ßus
- Gestion des templates multiples
- Suivi des impressions et emails
- Statistiques avanc√©es
- M√©tadonn√©es compl√®tes

### üöÄ Vues avanc√©es
- Validation manuelle des re√ßus
- Envoi par email
- Changement de templates
- Statistiques d√©taill√©es
- Export CSV
- API REST avanc√©e

### üìä Templates professionnels
- Interface de validation
- Interface d'invalidation
- Interface d'envoi email
- Dashboard statistiques
- Vue d√©taill√©e am√©lior√©e

### üîß Am√©liorations techniques
- Signaux automatiques
- URLs optimis√©es
- Base de donn√©es migr√©e
- Tests complets
- Documentation d√©taill√©e

## Fichiers importants

### Scripts de test
- `test_recus_avancees.py` - Tests unitaires complets
- `demo_recus_avancees.py` - D√©monstration des fonctionnalit√©s
- `test_recus_system.py` - Tests du syst√®me de base

### Documentation
- `SYNTHESE_AMELIORATIONS_RECUS.md` - Synth√®se compl√®te des am√©liorations
- `API_DOCUMENTATION.md` - Documentation de l'API

### Applications modifi√©es
- `paiements/` - Application principale avec toutes les am√©liorations
- `templates/paiements/` - Templates professionnels
- `gestion_immobiliere/` - Configuration du projet

## Installation et utilisation

1. **Restaurer la base de donn√©es**:
   ```bash
   python manage.py migrate
   ```

2. **Cr√©er un superutilisateur**:
   ```bash
   python manage.py createsuperuser
   ```

3. **Lancer le serveur**:
   ```bash
   python manage.py runserver
   ```

4. **Tester les fonctionnalit√©s**:
   ```bash
   python test_recus_avancees.py
   python demo_recus_avancees.py
   ```

## URLs principales

- **Liste des re√ßus**: `/paiements/recus/`
- **Statistiques**: `/paiements/recus/statistiques/`
- **Export**: `/paiements/recus/export/`
- **API avanc√©e**: `/paiements/api/recus/avancees/`

## √âtat du syst√®me

‚úÖ **Syst√®me de re√ßus** - Compl√®tement fonctionnel
‚úÖ **G√©n√©ration automatique** - Op√©rationnelle
‚úÖ **Validation manuelle** - Impl√©ment√©e
‚úÖ **Templates multiples** - Disponibles
‚úÖ **Envoi par email** - Configur√©
‚úÖ **Statistiques** - En temps r√©el
‚úÖ **Export CSV** - Fonctionnel
‚úÖ **Tests** - Tous pass√©s
‚úÖ **Documentation** - Compl√®te

## Notes importantes

- Toutes les migrations ont √©t√© appliqu√©es
- Les signaux sont activ√©s pour la g√©n√©ration automatique
- L'interface utilisateur est responsive et moderne
- Le syst√®me est pr√™t pour la production

---
*Sauvegarde cr√©√©e automatiquement le {datetime.now().strftime("%d/%m/%Y √† %H:%M:%S")}*
"""
    
    with open(os.path.join(dossier_sauvegarde, 'README_SAUVEGARDE.md'), 'w', encoding='utf-8') as f:
        f.write(readme_content)
    
    # Cr√©er un fichier ZIP de la sauvegarde
    zip_path = f"backups/{nom_sauvegarde}.zip"
    with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for root, dirs, files in os.walk(dossier_sauvegarde):
            for file in files:
                file_path = os.path.join(root, file)
                arcname = os.path.relpath(file_path, dossier_sauvegarde)
                zipf.write(file_path, arcname)
    
    print(f"‚úÖ Sauvegarde ZIP cr√©√©e: {zip_path}")
    
    # Afficher les statistiques
    taille_zip = os.path.getsize(zip_path) / (1024 * 1024)  # MB
    print(f"üìä Taille de la sauvegarde: {taille_zip:.2f} MB")
    
    return nom_sauvegarde, zip_path

def verifier_integrite():
    """V√©rifie l'int√©grit√© du syst√®me"""
    print("\nüîç V√©rification de l'int√©grit√© du syst√®me...")
    
    # V√©rifier que le serveur peut d√©marrer
    try:
        result = subprocess.run(['python', 'manage.py', 'check'], 
                              capture_output=True, text=True, timeout=30)
        if result.returncode == 0:
            print("‚úÖ V√©rification Django r√©ussie")
        else:
            print(f"‚ùå Erreur Django: {result.stderr}")
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")
    
    # V√©rifier les migrations
    try:
        result = subprocess.run(['python', 'manage.py', 'showmigrations'], 
                              capture_output=True, text=True, timeout=30)
        if result.returncode == 0:
            print("‚úÖ Migrations disponibles")
        else:
            print(f"‚ùå Erreur migrations: {result.stderr}")
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification des migrations: {e}")

def main():
    """Fonction principale"""
    print("üéØ SAUVEGARDE FINALE DU SYST√àME DE RE√áUS AVANC√âS")
    print("=" * 60)
    
    try:
        # V√©rifier l'int√©grit√©
        verifier_integrite()
        
        # Cr√©er la sauvegarde
        nom_sauvegarde, zip_path = creer_sauvegarde()
        
        print("\n" + "=" * 60)
        print("üéâ SAUVEGARDE FINALE TERMIN√âE AVEC SUCC√àS!")
        print(f"üìÅ Dossier: backups/{nom_sauvegarde}")
        print(f"üì¶ Archive: {zip_path}")
        
        print("\nüìã R√©capitulatif des am√©liorations sauvegard√©es:")
        print("   ‚úÖ Mod√®le Recu enrichi avec validation et templates")
        print("   ‚úÖ Vues avanc√©es pour gestion compl√®te")
        print("   ‚úÖ Templates professionnels et responsives")
        print("   ‚úÖ Syst√®me de statistiques en temps r√©el")
        print("   ‚úÖ Export CSV et API REST")
        print("   ‚úÖ Signaux automatiques pour g√©n√©ration")
        print("   ‚úÖ Tests complets et documentation")
        print("   ‚úÖ Interface utilisateur moderne")
        
        print("\nüöÄ Le syst√®me de re√ßus est maintenant pr√™t pour la production!")
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors de la sauvegarde: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    main() 