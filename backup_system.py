#!/usr/bin/env python
"""
Script de sauvegarde du syst√®me GESTIMMOB
Cr√©e une sauvegarde compl√®te du projet avec horodatage
"""

import os
import sys
import shutil
import zipfile
from datetime import datetime
import json

def create_backup(backup_name):
    """Cr√©e une sauvegarde compl√®te du projet"""
    
    # Nom du dossier de sauvegarde avec horodatage
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_dir = f"backups/{backup_name}_{timestamp}"
    
    # Cr√©er le dossier de sauvegarde
    os.makedirs(backup_dir, exist_ok=True)
    
    print(f"üîÑ Cr√©ation de la sauvegarde: {backup_name}_{timestamp}")
    print("=" * 50)
    
    # Liste des fichiers et dossiers √† sauvegarder
    items_to_backup = [
        # Applications Django
        'core',
        'utilisateurs', 
        'proprietes',
        'contrats',
        'paiements',
        'notifications',
        
        # Configuration du projet
        'gestion_immobiliere',
        
        # Templates et fichiers statiques
        'templates',
        'static',
        
        # Fichiers de configuration
        'manage.py',
        'requirements.txt',
        'db.sqlite3',
        
        # Fichiers de test et documentation
        'test_*.py',
        '*.md',
        '*.txt',
        '*.log',
        
        # Fichiers de configuration suppl√©mentaires
        'logs',
        'media',
    ]
    
    # Fichiers et dossiers √† exclure
    exclude_patterns = [
        '__pycache__',
        '*.pyc',
        '*.pyo',
        '.git',
        'venv',
        'node_modules',
        '*.log',
        'backups',
        'staticfiles',
        '.DS_Store',
        'Thumbs.db'
    ]
    
    copied_files = 0
    copied_dirs = 0
    
    for item in items_to_backup:
        if os.path.exists(item):
            if os.path.isfile(item):
                # Copier un fichier
                try:
                    shutil.copy2(item, backup_dir)
                    print(f"‚úÖ Fichier copi√©: {item}")
                    copied_files += 1
                except Exception as e:
                    print(f"‚ùå Erreur lors de la copie de {item}: {e}")
            elif os.path.isdir(item):
                # Copier un dossier
                try:
                    dest_path = os.path.join(backup_dir, item)
                    shutil.copytree(item, dest_path, ignore=shutil.ignore_patterns(*exclude_patterns))
                    print(f"‚úÖ Dossier copi√©: {item}")
                    copied_dirs += 1
                except Exception as e:
                    print(f"‚ùå Erreur lors de la copie de {item}: {e}")
        else:
            print(f"‚ö†Ô∏è  Item non trouv√©: {item}")
    
    # Cr√©er un fichier d'information sur la sauvegarde
    backup_info = {
        'backup_name': backup_name,
        'timestamp': timestamp,
        'datetime': datetime.now().isoformat(),
        'files_copied': copied_files,
        'directories_copied': copied_dirs,
        'description': f'Sauvegarde automatique - {backup_name}',
        'corrections_applied': [
            'Correction des erreurs NoReverseMatch pour api_interface',
            'Ajout de la vue profile dans utilisateurs',
            'Correction des erreurs FieldError dans le moteur de recherche',
            'Mise √† jour des champs de recherche pour correspondre aux mod√®les',
            'Correction des r√©f√©rences aux champs inexistants (description, priorite, etc.)',
            'Syst√®me de recherche intelligent enti√®rement fonctionnel'
        ],
        'system_status': 'Fonctionnel'
    }
    
    info_file = os.path.join(backup_dir, f'{backup_name}_INFO.json')
    with open(info_file, 'w', encoding='utf-8') as f:
        json.dump(backup_info, f, indent=2, ensure_ascii=False)
    
    # Cr√©er un fichier README pour la sauvegarde
    readme_content = f"""# Sauvegarde {backup_name}

**Date de cr√©ation:** {datetime.now().strftime("%d/%m/%Y √† %H:%M:%S")}

## √âtat du syst√®me

‚úÖ **Syst√®me enti√®rement fonctionnel**

## Corrections apport√©es

- ‚úÖ Correction des erreurs NoReverseMatch pour `api_interface`
- ‚úÖ Ajout de la vue `profile` dans l'application `utilisateurs`
- ‚úÖ Correction des erreurs FieldError dans le moteur de recherche
- ‚úÖ Mise √† jour des champs de recherche pour correspondre aux mod√®les
- ‚úÖ Correction des r√©f√©rences aux champs inexistants (`description`, `priorite`, etc.)
- ‚úÖ Syst√®me de recherche intelligent enti√®rement fonctionnel

## Fonctionnalit√©s op√©rationnelles

- ‚úÖ Dashboard principal
- ‚úÖ Dashboard par groupe (PRIVILEGE, CAISSE, etc.)
- ‚úÖ Syst√®me de recherche intelligent
- ‚úÖ Gestion des utilisateurs et groupes
- ‚úÖ Gestion des propri√©t√©s
- ‚úÖ Gestion des contrats
- ‚úÖ Gestion des paiements
- ‚úÖ Notifications
- ‚úÖ Profil utilisateur

## URLs principales

- Dashboard: `/utilisateurs/dashboard/PRIVILEGE/`
- Recherche: `/api/search/`
- Profil: `/utilisateurs/profile/`

## Tests valid√©s

- ‚úÖ URLs fonctionnelles
- ‚úÖ Templates sans erreurs
- ‚úÖ Recherche op√©rationnelle
- ‚úÖ Navigation compl√®te

---
*Sauvegarde cr√©√©e automatiquement par le syst√®me GESTIMMOB*
"""
    
    readme_file = os.path.join(backup_dir, 'README.md')
    with open(readme_file, 'w', encoding='utf-8') as f:
        f.write(readme_content)
    
    # Cr√©er une archive ZIP
    zip_filename = f"backups/{backup_name}_{timestamp}.zip"
    print(f"\nüì¶ Cr√©ation de l'archive: {zip_filename}")
    
    with zipfile.ZipFile(zip_filename, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for root, dirs, files in os.walk(backup_dir):
            for file in files:
                file_path = os.path.join(root, file)
                arcname = os.path.relpath(file_path, backup_dir)
                zipf.write(file_path, arcname)
    
    print(f"\nüéâ SAUVEGARDE TERMIN√âE AVEC SUCC√àS!")
    print("=" * 50)
    print(f"üìÅ Dossier: {backup_dir}")
    print(f"üì¶ Archive: {zip_filename}")
    print(f"üìÑ Fichiers copi√©s: {copied_files}")
    print(f"üìÅ Dossiers copi√©s: {copied_dirs}")
    print(f"‚è∞ Horodatage: {timestamp}")
    
    return backup_dir, zip_filename

def main():
    """Fonction principale"""
    if len(sys.argv) != 2:
        print("Usage: python backup_system.py <nom_sauvegarde>")
        print("Exemple: python backup_system.py etat9")
        sys.exit(1)
    
    backup_name = sys.argv[1]
    
    try:
        backup_dir, zip_file = create_backup(backup_name)
        print(f"\n‚úÖ Sauvegarde '{backup_name}' cr√©√©e avec succ√®s!")
        print(f"üìÇ Dossier: {backup_dir}")
        print(f"üì¶ Archive: {zip_file}")
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors de la sauvegarde: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 