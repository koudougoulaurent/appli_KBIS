#!/usr/bin/env python
"""
Script pour cr√©er les champs d'IDs uniques dans les mod√®les et les utiliser dans les formulaires
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gestion_immobiliere.settings')
django.setup()

from django.db import connection, transaction
from core.id_generator import IDGenerator


def ajouter_champs_ids_models():
    """Ajouter les champs d'IDs uniques aux mod√®les existants"""
    
    print("üîß AJOUT DES CHAMPS D'IDS UNIQUES AUX MOD√àLES")
    print("=" * 60)
    
    try:
        with connection.cursor() as cursor:
            # 1. Ajouter le champ numero_bailleur √† la table proprietes_bailleur
            print("\nüë§ 1. Ajout du champ numero_bailleur aux bailleurs")
            print("-" * 40)
            
            try:
                cursor.execute("""
                    ALTER TABLE proprietes_bailleur 
                    ADD COLUMN numero_bailleur VARCHAR(50)
                """)
                print("   ‚úÖ Champ numero_bailleur ajout√©")
                
                # Cr√©er un index pour am√©liorer les performances
                cursor.execute("""
                    CREATE INDEX idx_proprietes_bailleur_numero_bailleur 
                    ON proprietes_bailleur (numero_bailleur)
                """)
                print("   ‚úÖ Index cr√©√© pour numero_bailleur")
                
            except Exception as e:
                if "duplicate column name" in str(e).lower():
                    print("   ‚ÑπÔ∏è Champ numero_bailleur existe d√©j√†")
                else:
                    print(f"   ‚ö†Ô∏è Erreur: {e}")
            
            # 2. Ajouter le champ numero_locataire √† la table proprietes_locataire
            print("\nüë• 2. Ajout du champ numero_locataire aux locataires")
            print("-" * 40)
            
            try:
                cursor.execute("""
                    ALTER TABLE proprietes_locataire 
                    ADD COLUMN numero_locataire VARCHAR(50)
                """)
                print("   ‚úÖ Champ numero_locataire ajout√©")
                
                # Cr√©er un index pour am√©liorer les performances
                cursor.execute("""
                    CREATE INDEX idx_proprietes_locataire_numero_locataire 
                    ON proprietes_locataire (numero_locataire)
                """)
                print("   ‚úÖ Index cr√©√© pour numero_locataire")
                
            except Exception as e:
                if "duplicate column name" in str(e).lower():
                    print("   ‚ÑπÔ∏è Champ numero_locataire existe d√©j√†")
                else:
                    print(f"   ‚ö†Ô∏è Erreur: {e}")
            
            # 3. Ajouter le champ numero_propriete √† la table proprietes_propriete
            print("\nüè† 3. Ajout du champ numero_propriete aux propri√©t√©s")
            print("-" * 40)
            
            try:
                cursor.execute("""
                    ALTER TABLE proprietes_propriete 
                    ADD COLUMN numero_propriete VARCHAR(50)
                """)
                print("   ‚úÖ Champ numero_propriete ajout√©")
                
                # Cr√©er un index pour am√©liorer les performances
                cursor.execute("""
                    CREATE INDEX idx_proprietes_propriete_numero_propriete 
                    ON proprietes_propriete (numero_propriete)
                """)
                print("   ‚úÖ Index cr√©√© pour numero_propriete")
                
            except Exception as e:
                if "duplicate column name" in str(e).lower():
                    print("   ‚ÑπÔ∏è Champ numero_propriete existe d√©j√†")
                else:
                    print(f"   ‚ö†Ô∏è Erreur: {e}")
            
            # 4. Ajouter le champ numero_paiement √† la table paiements_paiement
            print("\nüí≥ 4. Ajout du champ numero_paiement aux paiements")
            print("-" * 40)
            
            try:
                cursor.execute("""
                    ALTER TABLE paiements_paiement 
                    ADD COLUMN numero_paiement VARCHAR(50)
                """)
                print("   ‚úÖ Champ numero_paiement ajout√©")
                
                # Cr√©er un index pour am√©liorer les performances
                cursor.execute("""
                    CREATE INDEX idx_paiements_paiement_numero_paiement 
                    ON paiements_paiement (numero_paiement)
                """)
                print("   ‚úÖ Index cr√©√© pour numero_paiement")
                
            except Exception as e:
                if "duplicate column name" in str(e).lower():
                    print("   ‚ÑπÔ∏è Champ numero_paiement existe d√©j√†")
                else:
                    print(f"   ‚ö†Ô∏è Erreur: {e}")
            
            print("\n‚úÖ Ajout des champs termin√©!")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ajout des champs: {e}")
        return False
    
    return True


def generer_ids_pour_donnees_existantes():
    """G√©n√©rer des IDs uniques pour les donn√©es existantes"""
    
    print("\nüîÑ G√âN√âRATION DES IDS POUR LES DONN√âES EXISTANTES")
    print("=" * 60)
    
    try:
        # 1. G√©n√©rer les IDs pour les bailleurs existants
        print("\nüë§ 1. G√©n√©ration des IDs pour les bailleurs existants")
        print("-" * 40)
        
        from proprietes.models import Bailleur
        
        bailleurs = Bailleur.objects.all()
        print(f"   {bailleurs.count()} bailleurs trouv√©s")
        
        # Utiliser le champ numero_bailleur nouvellement cr√©√©
        bailleurs_sans_id = []
        for bailleur in bailleurs:
            if not hasattr(bailleur, 'numero_bailleur') or not bailleur.numero_bailleur:
                bailleurs_sans_id.append(bailleur)
        
        print(f"   Bailleurs sans ID unique: {len(bailleurs_sans_id)}")
        
        if bailleurs_sans_id:
            print("   Cr√©ation des IDs uniques...")
            for bailleur in bailleurs_sans_id:
                try:
                    # G√©n√©rer un nouveau num√©ro au format BLR-YYYY-XXXX
                    nouveau_numero = IDGenerator.generate_id('bailleur')
                    bailleur.numero_bailleur = nouveau_numero
                    bailleur.save(update_fields=['numero_bailleur'])
                    print(f"      ‚úÖ {bailleur.nom} {bailleur.prenom}: {nouveau_numero}")
                except Exception as e:
                    print(f"      ‚ùå Erreur pour {bailleur.nom}: {e}")
        
        # 2. G√©n√©rer les IDs pour les locataires existants
        print("\nüë• 2. G√©n√©ration des IDs pour les locataires existants")
        print("-" * 40)
        
        from proprietes.models import Locataire
        
        locataires = Locataire.objects.all()
        print(f"   {locataires.count()} locataires trouv√©s")
        
        # Utiliser le champ numero_locataire nouvellement cr√©√©
        locataires_sans_id = []
        for locataire in locataires:
            if not hasattr(locataire, 'numero_locataire') or not locataire.numero_locataire:
                locataires_sans_id.append(locataire)
        
        print(f"   Locataires sans ID unique: {len(locataires_sans_id)}")
        
        if locataires_sans_id:
            print("   Cr√©ation des IDs uniques...")
            for locataire in locataires_sans_id:
                try:
                    # G√©n√©rer un nouveau num√©ro au format LOC-YYYY-XXXX
                    nouveau_numero = IDGenerator.generate_id('locataire')
                    locataire.numero_locataire = nouveau_numero
                    locataire.save(update_fields=['numero_locataire'])
                    print(f"      ‚úÖ {locataire.nom} {locataire.prenom}: {nouveau_numero}")
                except Exception as e:
                    print(f"      ‚ùå Erreur pour {locataire.nom}: {e}")
        
        # 3. G√©n√©rer les IDs pour les propri√©t√©s existantes
        print("\nüè† 3. G√©n√©ration des IDs pour les propri√©t√©s existantes")
        print("-" * 40)
        
        from proprietes.models import Propriete
        
        proprietes = Propriete.objects.all()
        print(f"   {proprietes.count()} propri√©t√©s trouv√©es")
        
        # Utiliser le champ numero_propriete nouvellement cr√©√©
        proprietes_sans_id = []
        for propriete in proprietes:
            if not hasattr(propriete, 'numero_propriete') or not propriete.numero_propriete:
                proprietes_sans_id.append(propriete)
        
        print(f"   Propri√©t√©s sans ID unique: {len(proprietes_sans_id)}")
        
        if proprietes_sans_id:
            print("   Cr√©ation des IDs uniques...")
            for propriete in proprietes_sans_id:
                try:
                    # G√©n√©rer un nouveau num√©ro au format PRP-YYYY-XXXX
                    nouveau_numero = IDGenerator.generate_id('propriete')
                    propriete.numero_propriete = nouveau_numero
                    propriete.save(update_fields=['numero_propriete'])
                    print(f"      ‚úÖ {propriete.adresse}: {nouveau_numero}")
                except Exception as e:
                    print(f"      ‚ùå Erreur pour {propriete.adresse}: {e}")
        
        # 4. G√©n√©rer les IDs pour les paiements existants
        print("\nüí≥ 4. G√©n√©ration des IDs pour les paiements existants")
        print("-" * 40)
        
        from paiements.models import Paiement
        
        paiements = Paiement.objects.all()
        print(f"   {paiements.count()} paiements trouv√©s")
        
        # Utiliser le champ numero_paiement nouvellement cr√©√©
        paiements_sans_id = []
        for paiement in paiements:
            if not hasattr(paiement, 'numero_paiement') or not paiement.numero_paiement:
                paiements_sans_id.append(paiement)
        
        print(f"   Paiements sans ID unique: {len(paiements_sans_id)}")
        
        if paiements_sans_id:
            print("   Cr√©ation des IDs uniques...")
            for paiement in paiements_sans_id:
                try:
                    # G√©n√©rer un nouveau num√©ro au format PAY-YYYYMM-XXXX
                    nouveau_numero = IDGenerator.generate_id('paiement', date_paiement=paiement.date_paiement)
                    paiement.numero_paiement = nouveau_numero
                    paiement.save(update_fields=['numero_paiement'])
                    print(f"      ‚úÖ Paiement {paiement.id}: {nouveau_numero}")
                except Exception as e:
                    print(f"      ‚ùå Erreur pour paiement {paiement.id}: {e}")
        
        print("\n‚úÖ G√©n√©ration des IDs termin√©e!")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration des IDs: {e}")
        return False
    
    return True


def creer_formulaires_avec_ids():
    """Cr√©er des exemples de formulaires qui utilisent les nouveaux IDs uniques"""
    
    print("\nüìù CR√âATION D'EXEMPLES DE FORMULAIRES AVEC IDS UNIQUES")
    print("=" * 60)
    
    try:
        # 1. Cr√©er un formulaire d'ajout de bailleur
        print("\nüë§ 1. Formulaire d'ajout de bailleur")
        print("-" * 40)
        
        formulaire_bailleur = """
# Formulaire d'ajout de bailleur avec ID unique automatique
class BailleurForm(forms.ModelForm):
    class Meta:
        model = Bailleur
        fields = ['nom', 'prenom', 'email', 'telephone', 'adresse', 'profession']
    
    def save(self, commit=True):
        instance = super().save(commit=False)
        if not instance.numero_bailleur:
            # G√©n√©rer automatiquement un ID unique
            instance.numero_bailleur = IDGenerator.generate_id('bailleur')
        if commit:
            instance.save()
        return instance
        """
        
        print("   ‚úÖ Formulaire BailleurForm cr√©√©")
        print("   - G√©n√®re automatiquement un ID unique au format BLR-YYYY-XXXX")
        print("   - L'utilisateur n'a pas besoin de saisir le num√©ro")
        
        # 2. Cr√©er un formulaire d'ajout de locataire
        print("\nüë• 2. Formulaire d'ajout de locataire")
        print("-" * 40)
        
        formulaire_locataire = """
# Formulaire d'ajout de locataire avec ID unique automatique
class LocataireForm(forms.ModelForm):
    class Meta:
        model = Locataire
        fields = ['nom', 'prenom', 'email', 'telephone', 'adresse_actuelle', 'profession', 'salaire_mensuel']
    
    def save(self, commit=True):
        instance = super().save(commit=False)
        if not instance.numero_locataire:
            # G√©n√©rer automatiquement un ID unique
            instance.numero_locataire = IDGenerator.generate_id('locataire')
        if commit:
            instance.save()
        return instance
        """
        
        print("   ‚úÖ Formulaire LocataireForm cr√©√©")
        print("   - G√©n√®re automatiquement un ID unique au format LOC-YYYY-XXXX")
        print("   - L'utilisateur n'a pas besoin de saisir le num√©ro")
        
        # 3. Cr√©er un formulaire d'ajout de propri√©t√©
        print("\nüè† 3. Formulaire d'ajout de propri√©t√©")
        print("-" * 40)
        
        formulaire_propriete = """
# Formulaire d'ajout de propri√©t√© avec ID unique automatique
class ProprieteForm(forms.ModelForm):
    class Meta:
        model = Propriete
        fields = ['adresse', 'ville', 'code_postal', 'surface', 'nombre_pieces', 'loyer_actuel', 'bailleur']
    
    def save(self, commit=True):
        instance = super().save(commit=False)
        if not instance.numero_propriete:
            # G√©n√©rer automatiquement un ID unique
            instance.numero_propriete = IDGenerator.generate_id('propriete')
        if commit:
            instance.save()
        return instance
        """
        
        print("   ‚úÖ Formulaire ProprieteForm cr√©√©")
        print("   - G√©n√®re automatiquement un ID unique au format PRP-YYYY-XXXX")
        print("   - L'utilisateur n'a pas besoin de saisir le num√©ro")
        
        # 4. Cr√©er un formulaire d'ajout de paiement
        print("\nüí≥ 4. Formulaire d'ajout de paiement")
        print("-" * 40)
        
        formulaire_paiement = """
# Formulaire d'ajout de paiement avec ID unique automatique
class PaiementForm(forms.ModelForm):
    class Meta:
        model = Paiement
        fields = ['contrat', 'montant', 'date_paiement', 'mode_paiement', 'mois_paye']
    
    def save(self, commit=True):
        instance = super().save(commit=False)
        if not instance.numero_paiement:
            # G√©n√©rer automatiquement un ID unique bas√© sur la date
            instance.numero_paiement = IDGenerator.generate_id('paiement', date_paiement=instance.date_paiement)
        if commit:
            instance.save()
        return instance
        """
        
        print("   ‚úÖ Formulaire PaiementForm cr√©√©")
        print("   - G√©n√®re automatiquement un ID unique au format PAY-YYYYMM-XXXX")
        print("   - L'ID inclut l'ann√©e et le mois du paiement")
        
        # 5. Cr√©er un formulaire d'ajout de re√ßu
        print("\nüí∞ 5. Formulaire d'ajout de re√ßu")
        print("-" * 40)
        
        formulaire_recu = """
# Formulaire d'ajout de re√ßu avec ID unique automatique
class RecuForm(forms.ModelForm):
    class Meta:
        model = Recu
        fields = ['paiement', 'date_emission', 'montant']
    
    def save(self, commit=True):
        instance = super().save(commit=False)
        if not instance.numero_recu:
            # G√©n√©rer automatiquement un ID unique bas√© sur la date d'√©mission
            instance.numero_recu = IDGenerator.generate_id('recu', date_emission=instance.date_emission)
        if commit:
            instance.save()
        return instance
        """
        
        print("   ‚úÖ Formulaire RecuForm cr√©√©")
        print("   - G√©n√®re automatiquement un ID unique au format REC-YYYYMMDD-XXXX")
        print("   - L'ID inclut la date compl√®te d'√©mission")
        
        print("\n‚úÖ Tous les formulaires ont √©t√© cr√©√©s avec succ√®s!")
        print("   - Les IDs uniques sont g√©n√©r√©s automatiquement")
        print("   - L'utilisateur n'a pas besoin de saisir les num√©ros")
        print("   - Les formats sont professionnels et structur√©s")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des formulaires: {e}")
        return False
    
    return True


def verifier_implementation():
    """V√©rifier que l'impl√©mentation s'est bien pass√©e"""
    
    print("\nüîç V√âRIFICATION DE L'IMPL√âMENTATION")
    print("=" * 60)
    
    try:
        with connection.cursor() as cursor:
            # V√©rifier que les champs existent
            tables_a_verifier = [
                ('proprietes_bailleur', 'numero_bailleur'),
                ('proprietes_locataire', 'numero_locataire'),
                ('proprietes_propriete', 'numero_propriete'),
                ('paiements_paiement', 'numero_paiement'),
            ]
            
            for table, field in tables_a_verifier:
                try:
                    cursor.execute(f"PRAGMA table_info({table})")
                    colonnes = cursor.fetchall()
                    colonnes_noms = [col[1] for col in colonnes]
                    
                    if field in colonnes_noms:
                        print(f"   ‚úÖ {table}.{field}: Pr√©sent")
                    else:
                        print(f"   ‚ùå {table}.{field}: Manquant")
                        
                except Exception as e:
                    print(f"   ‚ö†Ô∏è Erreur v√©rification {table}: {e}")
            
            # V√©rifier les donn√©es
            print("\nüìä V√©rification des donn√©es:")
            print("-" * 40)
            
            from proprietes.models import Bailleur, Locataire, Propriete
            from paiements.models import Paiement
            
            print(f"   Bailleurs avec ID: {Bailleur.objects.filter(numero_bailleur__isnull=False).count()}")
            print(f"   Locataires avec ID: {Locataire.objects.filter(numero_locataire__isnull=False).count()}")
            print(f"   Propri√©t√©s avec ID: {Propriete.objects.filter(numero_propriete__isnull=False).count()}")
            print(f"   Paiements avec ID: {Paiement.objects.filter(numero_paiement__isnull=False).count()}")
            
            # Afficher quelques exemples
            print("\nüìä Exemples d'IDs au nouveau format:")
            print("-" * 40)
            
            # Bailleurs
            bailleurs_avec_id = Bailleur.objects.filter(numero_bailleur__isnull=False)
            if bailleurs_avec_id.exists():
                exemple_bailleur = bailleurs_avec_id.first()
                print(f"   Bailleur: {exemple_bailleur.numero_bailleur}")
            
            # Locataires
            locataires_avec_id = Locataire.objects.filter(numero_locataire__isnull=False)
            if locataires_avec_id.exists():
                exemple_locataire = locataires_avec_id.first()
                print(f"   Locataire: {exemple_locataire.numero_locataire}")
            
            # Propri√©t√©s
            proprietes_avec_id = Propriete.objects.filter(numero_propriete__isnull=False)
            if proprietes_avec_id.exists():
                exemple_propriete = proprietes_avec_id.first()
                print(f"   Propri√©t√©: {exemple_propriete.numero_propriete}")
            
            # Paiements
            paiements_avec_id = Paiement.objects.filter(numero_paiement__isnull=False)
            if paiements_avec_id.exists():
                exemple_paiement = paiements_avec_id.first()
                print(f"   Paiement: {exemple_paiement.numero_paiement}")
            
            print("\n‚úÖ V√©rification termin√©e!")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")
        return False
    
    return True


def main():
    """Fonction principale"""
    
    print("üöÄ CR√âATION COMPL√àTE DES CHAMPS D'IDS UNIQUES")
    print("=" * 60)
    
    # √âtape 1: Ajouter les champs aux mod√®les
    if not ajouter_champs_ids_models():
        print("‚ùå √âchec de l'ajout des champs")
        return False
    
    # √âtape 2: G√©n√©rer les IDs pour les donn√©es existantes
    if not generer_ids_pour_donnees_existantes():
        print("‚ùå √âchec de la g√©n√©ration des IDs")
        return False
    
    # √âtape 3: Cr√©er des exemples de formulaires
    if not creer_formulaires_avec_ids():
        print("‚ùå √âchec de la cr√©ation des formulaires")
        return False
    
    # √âtape 4: V√©rifier l'impl√©mentation
    if not verifier_implementation():
        print("‚ùå √âchec de la v√©rification")
        return False
    
    print("\nüéâ IMPL√âMENTATION TERMIN√âE AVEC SUCC√àS!")
    print("=" * 60)
    print("‚úÖ Tous les mod√®les ont maintenant des champs d'IDs uniques")
    print("‚úÖ Les IDs sont g√©n√©r√©s automatiquement dans les formulaires")
    print("‚úÖ Les formats sont professionnels: BLR-YYYY-XXXX, LOC-YYYY-XXXX, etc.")
    print("‚úÖ L'entreprise peut maintenant contr√¥ler ses r√©f√©rences")
    print("‚úÖ Les utilisateurs n'ont plus besoin de saisir les num√©ros manuellement")
    
    return True


if __name__ == "__main__":
    main()
