#!/bin/bash

# =====================================================
# SCRIPT DE D√âPLOIEMENT - SYST√àME AVANCES INTELLIGENTES
# =====================================================
# Date: 09/10/2025
# Version: 2.0
# Description: D√©ploiement automatis√© des avances intelligentes
# =====================================================

set -e  # Arr√™ter en cas d'erreur

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Configuration
PROJECT_DIR="/var/www/appli_KBIS"
BACKUP_DIR="/var/backups/appli_KBIS"
LOG_FILE="/var/log/appli_KBIS/deploy.log"

# Cr√©er le r√©pertoire de logs s'il n'existe pas
mkdir -p "$(dirname "$LOG_FILE")"

# Fonction de logging
log_to_file() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1" >> "$LOG_FILE"
}

# Fonction de sauvegarde
backup_database() {
    log "Cr√©ation de la sauvegarde de la base de donn√©es..."
    
    # Cr√©er le r√©pertoire de sauvegarde s'il n'existe pas
    mkdir -p "$BACKUP_DIR"
    
    # Sauvegarder la base de donn√©es
    cd "$PROJECT_DIR"
    python manage.py dumpdata > "$BACKUP_DIR/backup_avant_avances_intelligentes_$(date +%Y%m%d_%H%M%S).json"
    
    if [ $? -eq 0 ]; then
        success "Sauvegarde cr√©√©e avec succ√®s"
        log_to_file "Sauvegarde cr√©√©e: backup_avant_avances_intelligentes_$(date +%Y%m%d_%H%M%S).json"
    else
        error "√âchec de la sauvegarde"
        exit 1
    fi
}

# Fonction de mise √† jour du code
update_code() {
    log "Mise √† jour du code source..."
    
    cd "$PROJECT_DIR"
    
    # Sauvegarder les modifications locales
    git stash push -m "Sauvegarde avant d√©ploiement avances intelligentes $(date +%Y%m%d_%H%M%S)"
    
    # R√©cup√©rer les derni√®res modifications
    git fetch origin
    git checkout modifications-octobre-2025
    git pull origin modifications-octobre-2025
    
    if [ $? -eq 0 ]; then
        success "Code mis √† jour avec succ√®s"
        log_to_file "Code mis √† jour depuis modifications-octobre-2025"
    else
        error "√âchec de la mise √† jour du code"
        exit 1
    fi
}

# Fonction d'installation des d√©pendances
install_dependencies() {
    log "Installation des d√©pendances..."
    
    cd "$PROJECT_DIR"
    
    # Activer l'environnement virtuel s'il existe
    if [ -d "venv" ]; then
        source venv/bin/activate
        log "Environnement virtuel activ√©"
    fi
    
    # Installer les d√©pendances
    pip install -r requirements.txt
    
    if [ $? -eq 0 ]; then
        success "D√©pendances install√©es avec succ√®s"
        log_to_file "D√©pendances install√©es"
    else
        error "√âchec de l'installation des d√©pendances"
        exit 1
    fi
}

# Fonction d'application des migrations
apply_migrations() {
    log "Application des migrations..."
    
    cd "$PROJECT_DIR"
    
    # V√©rifier l'√©tat des migrations
    log "√âtat des migrations avant application:"
    python manage.py showmigrations paiements
    
    # Appliquer les migrations dans l'ordre
    log "Application de la migration 0011..."
    python manage.py migrate paiements 0011
    
    log "Application de la migration 0012..."
    python manage.py migrate paiements 0012
    
    # V√©rifier l'√©tat des migrations apr√®s application
    log "√âtat des migrations apr√®s application:"
    python manage.py showmigrations paiements
    
    if [ $? -eq 0 ]; then
        success "Migrations appliqu√©es avec succ√®s"
        log_to_file "Migrations 0011 et 0012 appliqu√©es"
    else
        error "√âchec de l'application des migrations"
        exit 1
    fi
}

# Fonction de correction des donn√©es
fix_data() {
    log "Correction des donn√©es existantes..."
    
    cd "$PROJECT_DIR"
    
    # Script de correction des donn√©es
    python manage.py shell << 'EOF'
from paiements.models_avance import AvanceLoyer, ConsommationAvance
from datetime import date

print("D√©but de la correction des donn√©es...")

# Corriger les avances avec des dates incorrectes
avances_corrigees = 0
for avance in AvanceLoyer.objects.all():
    corrected = False
    if avance.mois_debut_couverture and avance.mois_debut_couverture.year < 2000:
        avance.mois_debut_couverture = avance.mois_debut_couverture.replace(year=avance.mois_debut_couverture.year + 2000)
        corrected = True
    if avance.mois_fin_couverture and avance.mois_fin_couverture.year < 2000:
        avance.mois_fin_couverture = avance.mois_fin_couverture.replace(year=avance.mois_fin_couverture.year + 2000)
        corrected = True
    if corrected:
        avance.save()
        avances_corrigees += 1

print(f"Avances corrig√©es: {avances_corrigees}")

# Supprimer les consommations avec des dates incorrectes
consommations_supprimees = ConsommationAvance.objects.filter(mois_consomme__year__lt=2000).count()
ConsommationAvance.objects.filter(mois_consomme__year__lt=2000).delete()

print(f"Consommations supprim√©es: {consommations_supprimees}")

# Recalculer les montants restants
for avance in AvanceLoyer.objects.all():
    avance.montant_restant = avance.montant_avance
    avance.statut = 'active'
    avance.save()

print("Correction des donn√©es termin√©e")
EOF
    
    if [ $? -eq 0 ]; then
        success "Donn√©es corrig√©es avec succ√®s"
        log_to_file "Donn√©es corrig√©es"
    else
        error "√âchec de la correction des donn√©es"
        exit 1
    fi
}

# Fonction de v√©rification
verify_deployment() {
    log "V√©rification du d√©ploiement..."
    
    cd "$PROJECT_DIR"
    
    # V√©rifier l'int√©grit√© des donn√©es
    python manage.py shell << 'EOF'
from paiements.models_avance import AvanceLoyer

print("V√©rification de l'int√©grit√© des donn√©es...")

# V√©rifier les avances
avances = AvanceLoyer.objects.all()
print(f"Total avances: {avances.count()}")

# V√©rifier les avances avec des probl√®mes
problemes = avances.filter(montant_restant__lt=0)
print(f"Avances avec montant restant n√©gatif: {problemes.count()}")

# V√©rifier les dates
dates_incorrectes = avances.filter(mois_debut_couverture__year__lt=2000)
print(f"Avances avec dates incorrectes: {dates_incorrectes.count()}")

# V√©rifier les nouveaux champs
champs_manquants = avances.filter(paiement__isnull=True).count()
print(f"Avances sans paiement associ√©: {champs_manquants}")

print("V√©rification termin√©e")
EOF
    
    if [ $? -eq 0 ]; then
        success "V√©rification r√©ussie"
        log_to_file "V√©rification r√©ussie"
    else
        error "√âchec de la v√©rification"
        exit 1
    fi
}

# Fonction de test
test_functionality() {
    log "Test des nouvelles fonctionnalit√©s..."
    
    cd "$PROJECT_DIR"
    
    # Test de cr√©ation d'avance
    python manage.py shell << 'EOF'
from paiements.services_avance import ServiceGestionAvance
from contrats.models import Contrat
from decimal import Decimal
from datetime import date

print("Test de cr√©ation d'avance...")

# R√©cup√©rer un contrat
contrat = Contrat.objects.first()
if contrat:
    try:
        # Cr√©er une avance de test
        avance = ServiceGestionAvance.creer_avance_loyer(
            contrat=contrat,
            montant_avance=Decimal('100000'),
            date_avance=date.today(),
            notes="Test d√©ploiement"
        )
        print(f"Avance cr√©√©e: {avance.id}, Statut: {avance.statut}")
        print(f"Paiement associ√©: {avance.paiement}")
        
        # Supprimer l'avance de test
        avance.delete()
        print("Test termin√© avec succ√®s")
    except Exception as e:
        print(f"Erreur lors du test: {e}")
        raise
else:
    print("Aucun contrat trouv√© pour le test")
    raise Exception("Aucun contrat disponible pour le test")
EOF
    
    if [ $? -eq 0 ]; then
        success "Test des fonctionnalit√©s r√©ussi"
        log_to_file "Test des fonctionnalit√©s r√©ussi"
    else
        error "√âchec du test des fonctionnalit√©s"
        exit 1
    fi
}

# Fonction de red√©marrage des services
restart_services() {
    log "Red√©marrage des services..."
    
    # Red√©marrer Gunicorn
    if systemctl is-active --quiet gunicorn; then
        sudo systemctl restart gunicorn
        success "Gunicorn red√©marr√©"
    fi
    
    # Red√©marrer Nginx
    if systemctl is-active --quiet nginx; then
        sudo systemctl restart nginx
        success "Nginx red√©marr√©"
    fi
    
    # Nettoyer le cache Django
    cd "$PROJECT_DIR"
    python manage.py clear_cache
    
    log_to_file "Services red√©marr√©s"
}

# Fonction principale
main() {
    log "=== D√âBUT DU D√âPLOIEMENT DES AVANCES INTELLIGENTES ==="
    log_to_file "=== D√âBUT DU D√âPLOIEMENT ==="
    
    # V√©rifier que nous sommes dans le bon r√©pertoire
    if [ ! -f "$PROJECT_DIR/manage.py" ]; then
        error "R√©pertoire de projet incorrect: $PROJECT_DIR"
        exit 1
    fi
    
    # Ex√©cuter les √©tapes de d√©ploiement
    backup_database
    update_code
    install_dependencies
    apply_migrations
    fix_data
    verify_deployment
    test_functionality
    restart_services
    
    success "=== D√âPLOIEMENT TERMIN√â AVEC SUCC√àS ==="
    log_to_file "=== D√âPLOIEMENT TERMIN√â AVEC SUCC√àS ==="
    
    # Afficher les informations de post-d√©ploiement
    echo ""
    echo "üéâ D√âPLOIEMENT R√âUSSI !"
    echo ""
    echo "üìã Informations importantes:"
    echo "   - Sauvegarde: $BACKUP_DIR"
    echo "   - Logs: $LOG_FILE"
    echo "   - Projet: $PROJECT_DIR"
    echo ""
    echo "üîß Prochaines √©tapes:"
    echo "   1. V√©rifier l'application dans le navigateur"
    echo "   2. Tester la cr√©ation d'avances"
    echo "   3. Surveiller les logs pour d√©tecter d'√©ventuels probl√®mes"
    echo ""
    echo "üìû En cas de probl√®me:"
    echo "   - Consulter les logs: tail -f $LOG_FILE"
    echo "   - Restaurer la sauvegarde si n√©cessaire"
    echo ""
}

# Ex√©cuter le script principal
main "$@"
