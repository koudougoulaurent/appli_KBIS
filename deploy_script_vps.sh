#!/bin/bash

# =============================================================================
# SCRIPT DE MISE √Ä JOUR S√âCURIS√âE DEPUIS LA BRANCHE modifications-octobre-2025
# =============================================================================

set -e  # Arr√™ter en cas d'erreur

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
APP_NAME="kbis_immobilier"
APP_DIR="/var/www/$APP_NAME"
BRANCH="modifications-octobre-2025"
BACKUP_DIR="/var/backups/$APP_NAME"
LOG_FILE="/var/log/$APP_NAME/update.log"
NOTIFICATION_EMAIL="admin@votre-domaine.com"  # Changez cette adresse

# Fonction de logging
log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1" | tee -a "$LOG_FILE"
}

log_success() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')] ‚úÖ $1${NC}" | tee -a "$LOG_FILE"
}

log_warning() {
    echo -e "${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')] ‚ö†Ô∏è  $1${NC}" | tee -a "$LOG_FILE"
}

log_error() {
    echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')] ‚ùå $1${NC}" | tee -a "$LOG_FILE"
}

# Fonction de notification
send_notification() {
    local subject="$1"
    local message="$2"
    
    # Notification par email (si mailutils est install√©)
    if command -v mail &> /dev/null; then
        echo "$message" | mail -s "$subject" "$NOTIFICATION_EMAIL" 2>/dev/null || true
    fi
    
    # Notification dans les logs syst√®me
    logger -t "$APP_NAME" "$subject: $message"
    
    # Notification par wall (si des utilisateurs sont connect√©s)
    echo "$subject: $message" | wall 2>/dev/null || true
}

# Fonction de sauvegarde
backup_database() {
    local backup_file="$BACKUP_DIR/db_backup_$(date +%Y%m%d_%H%M%S).sql"
    
    log "üì¶ Cr√©ation de la sauvegarde de la base de donn√©es..."
    
    # Cr√©er le r√©pertoire de sauvegarde s'il n'existe pas
    mkdir -p "$BACKUP_DIR"
    
    # Sauvegarder la base de donn√©es
    if sudo -u postgres pg_dump kbis_immobilier > "$backup_file" 2>/dev/null; then
        log_success "Sauvegarde cr√©√©e: $backup_file"
        echo "$backup_file" > "$BACKUP_DIR/latest_backup.txt"
        return 0
    else
        log_error "√âchec de la sauvegarde de la base de donn√©es"
        return 1
    fi
}

# Fonction de test des migrations
test_migrations() {
    log "üß™ Test des migrations en mode dry-run..."
    
    cd "$APP_DIR"
    source venv/bin/activate
    
    if python manage.py migrate --dry-run --verbosity=0; then
        log_success "Test des migrations r√©ussi"
        return 0
    else
        log_error "√âchec du test des migrations"
        return 1
    fi
}

# Fonction de mise √† jour
update_application() {
    log "üîÑ Mise √† jour de l'application depuis la branche $BRANCH..."
    
    cd "$APP_DIR"
    
    # Arr√™ter les services
    log "‚èπÔ∏è  Arr√™t des services..."
    sudo systemctl stop kbis_immobilier || true
    
    # Sauvegarder la configuration actuelle
    cp -r "$APP_DIR" "$BACKUP_DIR/app_backup_$(date +%Y%m%d_%H%M%S)" 2>/dev/null || true
    
    # R√©cup√©rer les derni√®res modifications
    log "üì• R√©cup√©ration des modifications depuis GitHub..."
    git fetch origin
    git checkout "$BRANCH"
    git pull origin "$BRANCH"
    
    # Mettre √† jour les d√©pendances
    log "üì¶ Mise √† jour des d√©pendances..."
    source venv/bin/activate
    pip install -r requirements.txt --upgrade
    
    # Installer les nouvelles d√©pendances pour l'export
    log "üì¶ Installation des d√©pendances d'export..."
    pip install openpyxl==3.1.5 reportlab==4.4.3
    
    # Appliquer les migrations
    log "üóÑÔ∏è  Application des migrations..."
    python manage.py migrate
    
    # Collecter les fichiers statiques
    log "üìÅ Collection des fichiers statiques..."
    python manage.py collectstatic --noinput
    
    # Red√©marrer les services
    log "‚ñ∂Ô∏è  Red√©marrage des services..."
    sudo systemctl start kbis_immobilier
    sudo systemctl reload nginx
    
    # Attendre que les services d√©marrent
    sleep 5
    
    # V√©rifier le statut des services
    if systemctl is-active --quiet kbis_immobilier && systemctl is-active --quiet nginx; then
        log_success "Services red√©marr√©s avec succ√®s"
        return 0
    else
        log_error "√âchec du red√©marrage des services"
        return 1
    fi
}

# Fonction de v√©rification
verify_deployment() {
    log "üîç V√©rification du d√©ploiement..."
    
    # Test de connectivit√©
    if curl -f -s http://localhost > /dev/null; then
        log_success "Application accessible localement"
    else
        log_error "Application non accessible localement"
        return 1
    fi
    
    # Test de la base de donn√©es
    cd "$APP_DIR"
    source venv/bin/activate
    if python manage.py check --deploy; then
        log_success "V√©rification Django r√©ussie"
    else
        log_warning "Avertissements lors de la v√©rification Django"
    fi
    
    # Test des logs
    if [ -f "$LOG_FILE" ]; then
        log_success "Logs disponibles: $LOG_FILE"
    fi
    
    return 0
}

# Fonction de nettoyage des anciennes sauvegardes
cleanup_old_backups() {
    log "üßπ Nettoyage des anciennes sauvegardes..."
    
    # Garder seulement les 5 derni√®res sauvegardes
    find "$BACKUP_DIR" -name "db_backup_*.sql" -type f -mtime +7 -delete 2>/dev/null || true
    find "$BACKUP_DIR" -name "app_backup_*" -type d -mtime +7 -exec rm -rf {} + 2>/dev/null || true
    
    log_success "Nettoyage termin√©"
}

# Fonction principale
main() {
    echo -e "${PURPLE}"
    echo "============================================================================="
    echo "üöÄ MISE √Ä JOUR S√âCURIS√âE DE L'APPLICATION KBIS IMMOBILIER"
    echo "üìÖ $(date)"
    echo "üåø Branche: $BRANCH"
    echo "============================================================================="
    echo -e "${NC}"
    
    # Cr√©er le r√©pertoire de logs
    mkdir -p "$(dirname "$LOG_FILE")"
    
    # Envoyer notification de d√©but
    send_notification "KBIS - D√©but de mise √† jour" "Mise √† jour d√©marr√©e depuis la branche $BRANCH"
    
    # 1. Sauvegarde
    if ! backup_database; then
        log_error "√âchec de la sauvegarde. Arr√™t de la mise √† jour."
        send_notification "KBIS - √âchec mise √† jour" "√âchec de la sauvegarde. Mise √† jour annul√©e."
        exit 1
    fi
    
    # 2. Test des migrations
    if ! test_migrations; then
        log_error "√âchec du test des migrations. Arr√™t de la mise √† jour."
        send_notification "KBIS - √âchec mise √† jour" "√âchec du test des migrations. Mise √† jour annul√©e."
        exit 1
    fi
    
    # 3. Mise √† jour
    if ! update_application; then
        log_error "√âchec de la mise √† jour. Restauration en cours..."
        send_notification "KBIS - √âchec mise √† jour" "√âchec de la mise √† jour. Restauration en cours."
        # Ici on pourrait appeler le script de rollback
        exit 1
    fi
    
    # 4. V√©rification
    if ! verify_deployment; then
        log_error "√âchec de la v√©rification. Restauration en cours..."
        send_notification "KBIS - √âchec v√©rification" "√âchec de la v√©rification. Restauration en cours."
        exit 1
    fi
    
    # 5. Nettoyage
    cleanup_old_backups
    
    # 6. Notification de succ√®s
    log_success "üéâ Mise √† jour termin√©e avec succ√®s !"
    send_notification "KBIS - Mise √† jour r√©ussie" "Mise √† jour termin√©e avec succ√®s depuis la branche $BRANCH"
    
    echo -e "${GREEN}"
    echo "============================================================================="
    echo "‚úÖ MISE √Ä JOUR TERMIN√âE AVEC SUCC√àS !"
    echo "üìÖ $(date)"
    echo "üåø Branche: $BRANCH"
    echo "üìä Logs: $LOG_FILE"
    echo "üì¶ Sauvegarde: $(cat $BACKUP_DIR/latest_backup.txt 2>/dev/null || echo 'Non disponible')"
    echo "============================================================================="
    echo -e "${NC}"
}

# Ex√©cution
main "$@"





