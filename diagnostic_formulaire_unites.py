#!/usr/bin/env python
"""
Diagnostic du formulaire d'ajout d'unit√©s locatives
"""
import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gestion_immobiliere.settings')
django.setup()

from proprietes.models import UniteLocative, Propriete, Bailleur, TypeBien
from proprietes.forms_unites import UniteLocativeForm

def verifier_donnees_base():
    """V√©rifie les donn√©es dans la base de donn√©es"""
    print("üîç V√âRIFICATION DES DONN√âES EN BASE")
    print("=" * 50)
    
    # V√©rifier les types d'unit√©s
    print("\nüìã Types d'unit√©s disponibles :")
    for choice in UniteLocative.TYPE_UNITE_CHOICES:
        print(f"   - {choice[0]}: {choice[1]}")
    
    # V√©rifier les propri√©t√©s
    print(f"\nüè¢ Propri√©t√©s disponibles : {Propriete.objects.filter(is_deleted=False).count()}")
    for prop in Propriete.objects.filter(is_deleted=False)[:5]:
        print(f"   - {prop.id}: {prop.titre}")
    
    # V√©rifier les bailleurs
    print(f"\nüë§ Bailleurs disponibles : {Bailleur.objects.filter(is_deleted=False, actif=True).count()}")
    for bailleur in Bailleur.objects.filter(is_deleted=False, actif=True)[:5]:
        print(f"   - {bailleur.id}: {bailleur.nom} {bailleur.prenom}")
    
    # V√©rifier les types de biens
    print(f"\nüè† Types de biens disponibles : {TypeBien.objects.count()}")
    for type_bien in TypeBien.objects.all()[:5]:
        print(f"   - {type_bien.id}: {type_bien.nom}")

def tester_formulaire():
    """Teste le formulaire d'unit√©s locatives"""
    print("\nüß™ TEST DU FORMULAIRE")
    print("=" * 50)
    
    try:
        # Cr√©er une instance du formulaire
        form = UniteLocativeForm()
        
        print("\n‚úÖ Formulaire cr√©√© avec succ√®s")
        
        # V√©rifier les champs
        print("\nüìù Champs du formulaire :")
        for field_name, field in form.fields.items():
            print(f"   - {field_name}: {type(field).__name__}")
            
            # V√©rifier les choix pour les champs Select
            if hasattr(field, 'choices') and field.choices:
                print(f"     Choix disponibles : {len(field.choices)}")
                for choice in field.choices[:3]:  # Afficher les 3 premiers
                    print(f"       - {choice[0]}: {choice[1]}")
                if len(field.choices) > 3:
                    print(f"       ... et {len(field.choices) - 3} autres")
            
            # V√©rifier le queryset pour les champs ModelChoiceField
            if hasattr(field, 'queryset') and field.queryset:
                print(f"     Queryset : {field.queryset.count()} √©l√©ments")
        
        # V√©rifier sp√©cifiquement le champ type_unite
        print(f"\nüéØ Champ type_unite :")
        print(f"   - Type : {type(form.fields['type_unite']).__name__}")
        print(f"   - Choix : {len(form.fields['type_unite'].choices)}")
        print(f"   - Requis : {form.fields['type_unite'].required}")
        
        for choice in form.fields['type_unite'].choices:
            print(f"     - {choice[0]}: {choice[1]}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation du formulaire : {e}")
        return False

def creer_donnees_test():
    """Cr√©e des donn√©es de test si n√©cessaire"""
    print("\nüîß CR√âATION DE DONN√âES DE TEST")
    print("=" * 50)
    
    # Cr√©er un type de bien si n√©cessaire
    if TypeBien.objects.count() == 0:
        type_bien = TypeBien.objects.create(
            nom="Immeuble",
            description="Immeuble r√©sidentiel"
        )
        print(f"‚úÖ Type de bien cr√©√© : {type_bien.nom}")
    
    # Cr√©er une propri√©t√© si n√©cessaire
    if Propriete.objects.filter(is_deleted=False).count() == 0:
        type_bien = TypeBien.objects.first()
        propriete = Propriete.objects.create(
            titre="Test Property",
            type_bien=type_bien,
            adresse="123 Test Street",
            ville="Test City"
        )
        print(f"‚úÖ Propri√©t√© cr√©√©e : {propriete.titre}")
    
    # Cr√©er un bailleur si n√©cessaire
    if Bailleur.objects.filter(is_deleted=False, actif=True).count() == 0:
        bailleur = Bailleur.objects.create(
            nom="Test",
            prenom="Bailleur",
            telephone="+226 70 00 00 00"
        )
        print(f"‚úÖ Bailleur cr√©√© : {bailleur.nom} {bailleur.prenom}")

def verifier_template():
    """V√©rifie le template du formulaire"""
    print("\nüìÑ V√âRIFICATION DU TEMPLATE")
    print("=" * 50)
    
    template_path = "templates/proprietes/unites/form.html"
    
    if os.path.exists(template_path):
        print(f"‚úÖ Template trouv√© : {template_path}")
        
        with open(template_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # V√©rifier la pr√©sence des champs
        champs_importants = [
            'form.type_unite',
            'form.propriete',
            'form.bailleur',
            'form.numero_unite',
            'form.nom'
        ]
        
        for champ in champs_importants:
            if champ in content:
                print(f"   ‚úÖ {champ} pr√©sent dans le template")
            else:
                print(f"   ‚ùå {champ} manquant dans le template")
        
        # V√©rifier les classes CSS
        if 'form-select' in content:
            print("   ‚úÖ Classes CSS form-select pr√©sentes")
        else:
            print("   ‚ùå Classes CSS form-select manquantes")
            
    else:
        print(f"‚ùå Template non trouv√© : {template_path}")

def main():
    """Fonction principale"""
    print("üîß DIAGNOSTIC FORMULAIRE UNIT√âS LOCATIVES")
    print("=" * 60)
    
    # V√©rifier les donn√©es en base
    verifier_donnees_base()
    
    # Cr√©er des donn√©es de test si n√©cessaire
    creer_donnees_test()
    
    # Tester le formulaire
    formulaire_ok = tester_formulaire()
    
    # V√©rifier le template
    verifier_template()
    
    print("\n" + "=" * 60)
    if formulaire_ok:
        print("‚úÖ DIAGNOSTIC TERMIN√â - Formulaire fonctionnel")
        print("\nüéØ Solutions appliqu√©es :")
        print("   ‚úÖ Choix d√©finis pour le champ type_unite")
        print("   ‚úÖ Queryset d√©fini pour le champ propriete")
        print("   ‚úÖ Queryset d√©fini pour le champ bailleur")
        print("   ‚úÖ Valeurs par d√©faut configur√©es")
        print("   ‚úÖ Validation des donn√©es ajout√©e")
        
        print("\nüöÄ Le formulaire devrait maintenant afficher correctement :")
        print("   üìã Liste des types d'unit√©s")
        print("   üè¢ Liste des propri√©t√©s")
        print("   üë§ Liste des bailleurs")
        print("   ‚ú® Tous les champs avec leurs donn√©es")
        
    else:
        print("‚ùå DIAGNOSTIC TERMIN√â - Probl√®mes d√©tect√©s")
        print("V√©rifiez les erreurs ci-dessus et corrigez-les.")

if __name__ == '__main__':
    main()
