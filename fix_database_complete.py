#!/usr/bin/env python
"""
SCRIPT DE R√âPARATION COMPL√àTE DE LA BASE DE DONN√âES
Fait les migrations, cr√©e les tables, puis configure tout
"""

import os
import sys
import django
import subprocess

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gestion_immobiliere.settings')
django.setup()

from django.db import transaction, connection
from django.contrib.auth import get_user_model
from utilisateurs.models import GroupeTravail

def run_migrations():
    """Ex√©cuter les migrations Django"""
    print("üîß EX√âCUTION DES MIGRATIONS DJANGO")
    print("=" * 40)
    
    try:
        # Ex√©cuter les migrations
        result = subprocess.run(['python', 'manage.py', 'migrate'], 
                              capture_output=True, text=True, cwd='/opt/render/project/src')
        
        if result.returncode == 0:
            print("‚úÖ Migrations ex√©cut√©es avec succ√®s")
            print(result.stdout)
        else:
            print("‚ö†Ô∏è  Erreur lors des migrations:")
            print(result.stderr)
            
    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur lors de l'ex√©cution des migrations: {e}")

def create_groups():
    """Cr√©er les groupes de travail"""
    print("\nüîß CR√âATION DES GROUPES DE TRAVAIL")
    print("-" * 30)
    
    try:
        groupes_data = [
            {'nom': 'ADMINISTRATION', 'description': 'GESTION ADMINISTRATIVE'},
            {'nom': 'CAISSE', 'description': 'GESTION DES PAIEMENTS ET RETRAITS'},
            {'nom': 'CONTROLES', 'description': 'GESTION DU CONTR√îLE'},
            {'nom': 'PRIVILEGE', 'description': 'ACC√àS COMPLET'}
        ]
        
        for groupe_data in groupes_data:
            groupe, created = GroupeTravail.objects.get_or_create(
                nom=groupe_data['nom'],
                defaults={
                    'description': groupe_data['description'],
                    'actif': True,
                    'permissions': {'modules': []}
                }
            )
            if created:
                print(f"‚úÖ Groupe cr√©√© : {groupe.nom}")
            else:
                print(f"‚ÑπÔ∏è  Groupe existant : {groupe.nom}")
                # S'assurer qu'il est actif
                if not groupe.actif:
                    groupe.actif = True
                    groupe.save()
                    print(f"‚úÖ Groupe activ√© : {groupe.nom}")
                    
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des groupes: {e}")

def create_users():
    """Cr√©er les utilisateurs"""
    print("\nüë• CR√âATION DES UTILISATEURS")
    print("-" * 25)
    
    try:
        User = get_user_model()
        
        # Superutilisateur principal
        try:
            admin, created = User.objects.get_or_create(
                username='admin',
                defaults={
                    'email': 'admin@gestimmob.com',
                    'is_superuser': True,
                    'is_staff': True
                }
            )
            if created:
                admin.set_password('admin123')
                admin.save()
                print("‚úÖ Superutilisateur cr√©√© : admin / admin123")
            else:
                print("‚ÑπÔ∏è  Superutilisateur existant : admin")
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur superutilisateur : {e}")
        
        # Utilisateurs de test
        users_data = [
            {'username': 'test_admin', 'email': 'admin@test.com', 'password': 'test123', 'groupe': 'ADMINISTRATION'},
            {'username': 'test_caisse', 'email': 'caisse@test.com', 'password': 'test123', 'groupe': 'CAISSE'},
            {'username': 'test_controle', 'email': 'controle@test.com', 'password': 'test123', 'groupe': 'CONTROLES'},
            {'username': 'test_privilege', 'email': 'privilege@test.com', 'password': 'test123', 'groupe': 'PRIVILEGE'},
        ]
        
        for user_data in users_data:
            try:
                user, created = User.objects.get_or_create(
                    username=user_data['username'],
                    defaults={'email': user_data['email']}
                )
                if created:
                    user.set_password(user_data['password'])
                    # Assigner le groupe si possible
                    try:
                        groupe = GroupeTravail.objects.get(nom=user_data['groupe'])
                        user.groupe_travail = groupe
                    except:
                        pass
                    user.save()
                    print(f"‚úÖ Utilisateur cr√©√© : {user.username} / {user_data['password']}")
                else:
                    print(f"‚ÑπÔ∏è  Utilisateur existant : {user.username}")
            except Exception as e:
                print(f"‚ö†Ô∏è  Erreur utilisateur {user_data['username']} : {e}")
                
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des utilisateurs: {e}")

def verify_setup():
    """V√©rifier que tout est correct"""
    print("\nüîç V√âRIFICATION DE LA CONFIGURATION")
    print("-" * 35)
    
    try:
        # V√©rifier les groupes
        groupes = GroupeTravail.objects.all()
        print(f"‚úÖ Groupes cr√©√©s : {groupes.count()}")
        for groupe in groupes:
            print(f"   - {groupe.nom} (Actif: {groupe.actif})")
        
        # V√©rifier les utilisateurs
        User = get_user_model()
        users = User.objects.all()
        print(f"‚úÖ Utilisateurs cr√©√©s : {users.count()}")
        for user in users:
            groupe = getattr(user, 'groupe_travail', None)
            groupe_nom = groupe.nom if groupe else "Aucun"
            print(f"   - {user.username} (Groupe: {groupe_nom})")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")

def main():
    """Fonction principale"""
    print("üöÄ R√âPARATION COMPL√àTE DE LA BASE DE DONN√âES")
    print("=" * 50)
    print("Cette op√©ration va :")
    print("1. Ex√©cuter les migrations Django")
    print("2. Cr√©er les groupes de travail")
    print("3. Cr√©er un superutilisateur")
    print("4. Cr√©er des utilisateurs de test")
    print("5. V√©rifier que tout fonctionne")
    print("=" * 50)
    
    try:
        run_migrations()
        create_groups()
        create_users()
        verify_setup()
        
        print("\n" + "=" * 50)
        print("üéâ R√âPARATION TERMIN√âE AVEC SUCC√àS !")
        print("=" * 50)
        print("üìã INFORMATIONS DE CONNEXION :")
        print("   üåê URL: https://appli-kbis.onrender.com")
        print("   üë§ Superutilisateur: admin / admin123")
        print("   üë• Utilisateurs de test:")
        print("      - test_admin / test123 (ADMINISTRATION)")
        print("      - test_caisse / test123 (CAISSE)")
        print("      - test_controle / test123 (CONTROLES)")
        print("      - test_privilege / test123 (PRIVILEGE)")
        print("=" * 50)
        print("‚úÖ L'erreur 'PRIVILEGE n'existe pas' est D√âFINITIVEMENT corrig√©e !")
        print("üîÑ Rafra√Æchissez votre page web maintenant !")
        print("=" * 50)
        
    except Exception as e:
        print(f"\n‚ùå ERREUR CRITIQUE: {e}")
        print("üîÑ Tentative de r√©cup√©ration...")
        try:
            # R√©cup√©ration d'urgence
            run_migrations()
            create_groups()
            print("‚úÖ R√©cup√©ration d'urgence r√©ussie !")
        except Exception as e2:
            print(f"‚ùå √âchec de la r√©cup√©ration: {e2}")

if __name__ == '__main__':
    main()
