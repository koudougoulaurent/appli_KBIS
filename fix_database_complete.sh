#!/bin/bash

# =============================================================================
# SCRIPT COMPLET DE CORRECTION DE BASE DE DONN√âES - KBIS IMMOBILIER
# =============================================================================
# Ce script corrige TOUS les probl√®mes de base de donn√©es :
# - Force l'utilisation de PostgreSQL
# - Corrige le fichier settings.py
# - Applique les migrations
# - Red√©marre l'application
# =============================================================================

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Variables
APP_DIR="/var/www/kbis_immobilier"
SERVICE_NAME="kbis_immobilier"

echo -e "${BLUE}=============================================================================${NC}"
echo -e "${BLUE}üîß SCRIPT COMPLET DE CORRECTION DE BASE DE DONN√âES${NC}"
echo -e "${BLUE}=============================================================================${NC}"

# =============================================================================
# PHASE 1: ARR√äT DE L'APPLICATION
# =============================================================================
echo -e "\n${YELLOW}üõë PHASE 1: ARR√äT DE L'APPLICATION${NC}"
echo "=========================================="

echo -e "${YELLOW}Arr√™t de l'application...${NC}"
sudo systemctl stop $SERVICE_NAME

# =============================================================================
# PHASE 2: CORRECTION DU FICHIER SETTINGS.PY
# =============================================================================
echo -e "\n${YELLOW}üîß PHASE 2: CORRECTION DU FICHIER SETTINGS.PY${NC}"
echo "=================================================="

cd $APP_DIR || { echo -e "${RED}‚ùå Impossible d'acc√©der au r√©pertoire $APP_DIR${NC}"; exit 1; }

echo -e "${YELLOW}Sauvegarde du fichier settings.py...${NC}"
cp gestion_immobiliere/settings.py gestion_immobiliere/settings.py.backup

echo -e "${YELLOW}Correction du fichier settings.py pour forcer PostgreSQL...${NC}"

# Remplacer SQLite par PostgreSQL
sed -i 's/django.db.backends.sqlite3/django.db.backends.postgresql/g' gestion_immobiliere/settings.py

# V√©rifier que la correction est appliqu√©e
if grep -q "django.db.backends.postgresql" gestion_immobiliere/settings.py; then
    echo -e "${GREEN}‚úÖ Correction appliqu√©e avec succ√®s${NC}"
else
    echo -e "${RED}‚ùå Erreur lors de la correction${NC}"
    exit 1
fi

# =============================================================================
# PHASE 3: V√âRIFICATION DE LA CONFIGURATION .ENV
# =============================================================================
echo -e "\n${YELLOW}üîß PHASE 3: V√âRIFICATION DE LA CONFIGURATION .ENV${NC}"
echo "======================================================"

echo -e "${YELLOW}V√©rification du fichier .env...${NC}"
if [ -f ".env" ]; then
    echo -e "${GREEN}‚úÖ Fichier .env existe${NC}"
    cat .env
else
    echo -e "${YELLOW}Cr√©ation du fichier .env...${NC}"
    cat > .env << 'EOF'
DJANGO_SETTINGS_MODULE=gestion_immobiliere.settings
DEBUG=False
SECRET_KEY=django-insecure-production-key-change-me
DB_NAME=kbis_productiondb
DB_USER=kbis_prod_user
DB_PASSWORD=kbis_prod_password
DB_HOST=localhost
DB_PORT=5432
ALLOWED_HOSTS=localhost,78.138.58.185,127.0.0.1
EOF
fi

# =============================================================================
# PHASE 4: V√âRIFICATION DE POSTGRESQL
# =============================================================================
echo -e "\n${YELLOW}üîß PHASE 4: V√âRIFICATION DE POSTGRESQL${NC}"
echo "============================================="

echo -e "${YELLOW}V√©rification de PostgreSQL...${NC}"
if sudo -u postgres psql -c "SELECT version();" > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ PostgreSQL fonctionne${NC}"
else
    echo -e "${RED}‚ùå PostgreSQL ne fonctionne pas${NC}"
    exit 1
fi

echo -e "${YELLOW}V√©rification de la base de donn√©es...${NC}"
if sudo -u postgres psql -c "\l" | grep -q "kbis_productiondb"; then
    echo -e "${GREEN}‚úÖ Base de donn√©es kbis_productiondb existe${NC}"
else
    echo -e "${YELLOW}Cr√©ation de la base de donn√©es...${NC}"
    sudo -u postgres psql -c "CREATE DATABASE kbis_productiondb;"
    sudo -u postgres psql -c "CREATE USER kbis_prod_user WITH PASSWORD 'kbis_prod_password';"
    sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE kbis_productiondb TO kbis_prod_user;"
fi

# =============================================================================
# PHASE 5: ACTIVATION DE L'ENVIRONNEMENT VIRTUEL
# =============================================================================
echo -e "\n${YELLOW}üîß PHASE 5: ACTIVATION DE L'ENVIRONNEMENT VIRTUEL${NC}"
echo "======================================================"

echo -e "${YELLOW}Activation de l'environnement virtuel...${NC}"
source venv/bin/activate

# =============================================================================
# PHASE 6: V√âRIFICATION DE LA CONNEXION √Ä LA BASE DE DONN√âES
# =============================================================================
echo -e "\n${YELLOW}üîß PHASE 6: V√âRIFICATION DE LA CONNEXION${NC}"
echo "============================================="

echo -e "${YELLOW}Test de la connexion √† PostgreSQL...${NC}"
python3 << 'EOF'
import os
import django
from django.conf import settings

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gestion_immobiliere.settings')
django.setup()

from django.db import connection

try:
    cursor = connection.cursor()
    cursor.execute("SELECT version();")
    version = cursor.fetchone()[0]
    print(f"‚úÖ Connexion PostgreSQL r√©ussie: {version}")
except Exception as e:
    print(f"‚ùå Erreur de connexion: {e}")
    exit(1)
EOF

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Connexion √† PostgreSQL r√©ussie${NC}"
else
    echo -e "${RED}‚ùå Erreur de connexion √† PostgreSQL${NC}"
    exit 1
fi

# =============================================================================
# PHASE 7: APPLICATION DES MIGRATIONS
# =============================================================================
echo -e "\n${YELLOW}üîß PHASE 7: APPLICATION DES MIGRATIONS${NC}"
echo "============================================="

echo -e "${YELLOW}Application des migrations sur PostgreSQL...${NC}"
python3 manage.py migrate

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ Migrations appliqu√©es avec succ√®s${NC}"
else
    echo -e "${RED}‚ùå Erreur lors des migrations${NC}"
    exit 1
fi

# =============================================================================
# PHASE 8: COLLECTE DES FICHIERS STATIQUES
# =============================================================================
echo -e "\n${YELLOW}üîß PHASE 8: COLLECTE DES FICHIERS STATIQUES${NC}"
echo "=================================================="

echo -e "${YELLOW}Collecte des fichiers statiques...${NC}"
python3 manage.py collectstatic --noinput

# =============================================================================
# PHASE 9: RED√âMARRAGE DE L'APPLICATION
# =============================================================================
echo -e "\n${YELLOW}üîß PHASE 9: RED√âMARRAGE DE L'APPLICATION${NC}"
echo "============================================="

echo -e "${YELLOW}Red√©marrage de l'application...${NC}"
sudo systemctl start $SERVICE_NAME
sudo systemctl status $SERVICE_NAME

# =============================================================================
# PHASE 10: V√âRIFICATIONS FINALES
# =============================================================================
echo -e "\n${YELLOW}üîß PHASE 10: V√âRIFICATIONS FINALES${NC}"
echo "====================================="

echo -e "${YELLOW}Test de l'application...${NC}"
sleep 5

# Test de l'application
if curl -I http://127.0.0.1:8000 2>/dev/null | grep -q "HTTP"; then
    echo -e "${GREEN}‚úÖ Application r√©pond sur le port 8000${NC}"
else
    echo -e "${RED}‚ùå Application ne r√©pond pas${NC}"
    echo -e "${YELLOW}Logs de l'application:${NC}"
    sudo journalctl -u $SERVICE_NAME -n 10 --no-pager
fi

# Test via Nginx
if curl -I http://78.138.58.185 2>/dev/null | grep -q "HTTP"; then
    echo -e "${GREEN}‚úÖ Application accessible via Nginx${NC}"
else
    echo -e "${RED}‚ùå Application non accessible via Nginx${NC}"
fi

# =============================================================================
# R√âSUM√â FINAL
# =============================================================================
echo -e "\n${BLUE}=============================================================================${NC}"
echo -e "${BLUE}üéâ CORRECTION DE BASE DE DONN√âES TERMIN√âE${NC}"
echo -e "${BLUE}=============================================================================${NC}"

echo -e "\n${GREEN}‚úÖ Corrections effectu√©es :${NC}"
echo "  - Fichier settings.py corrig√© pour PostgreSQL"
echo "  - Configuration .env v√©rifi√©e"
echo "  - Base de donn√©es PostgreSQL v√©rifi√©e"
echo "  - Migrations appliqu√©es"
echo "  - Fichiers statiques collect√©s"
echo "  - Application red√©marr√©e"

echo -e "\n${YELLOW}üîó URLs d'acc√®s :${NC}"
echo "  - Application : http://78.138.58.185"
echo "  - Admin : http://78.138.58.185/admin/"

echo -e "\n${YELLOW}üìã Commandes utiles :${NC}"
echo "  - Logs application : sudo journalctl -u $SERVICE_NAME -f"
echo "  - Status application : sudo systemctl status $SERVICE_NAME"
echo "  - Test base de donn√©es : python3 manage.py dbshell"

echo -e "\n${BLUE}=============================================================================${NC}"





