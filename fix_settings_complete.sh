#!/bin/bash

# Script de correction complète du fichier settings.py
# Auteur: Assistant IA

set -e

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}🔧 CORRECTION DU FICHIER SETTINGS.PY${NC}"
echo "============================================="

cd /var/www/kbis_immobilier

echo -e "\n${YELLOW}1. SAUVEGARDE DU FICHIER ORIGINAL${NC}"
cp gestion_immobiliere/settings.py gestion_immobiliere/settings.py.backup

echo -e "\n${YELLOW}2. CORRECTION DES PROBLÈMES D'INDENTATION${NC}"

# Créer un fichier settings.py corrigé
cat > gestion_immobiliere/settings.py << 'EOF'
"""
Django settings for gestion_immobiliere project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables
load_dotenv()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-your-secret-key-here')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'proprietes',
    'contrats',
    'paiements',
    'utilisateurs',
    'core',
    'notifications',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'gestion_immobiliere.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'gestion_immobiliere.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME', 'kbis_immobilier'),
        'USER': os.getenv('DB_USER', 'kbis_user'),
        'PASSWORD': os.getenv('DB_PASSWORD', 'kbis_password'),
        'HOST': os.getenv('DB_HOST', 'localhost'),
        'PORT': os.getenv('DB_PORT', '5432'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'fr-fr'
TIME_ZONE = 'Europe/Paris'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Login URLs
LOGIN_URL = '/admin/login/'
LOGIN_REDIRECT_URL = '/tableau-bord/'
LOGOUT_REDIRECT_URL = '/admin/login/'

# File upload settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 52428800  # 50MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 52428800  # 50MB

# Email settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', '587'))
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')

# Security settings for production
if not DEBUG:
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_SSL_REDIRECT = False  # Désactivé pour HTTP temporairement
    SESSION_COOKIE_SECURE = False  # Désactivé pour HTTP temporairement
    CSRF_COOKIE_SECURE = False  # Désactivé pour HTTP temporairement

# Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': '/var/log/django/kbis_immobilier.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['file', 'console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}
EOF

echo -e "\n${YELLOW}3. VÉRIFICATION DE LA SYNTAXE${NC}"
python3 -m py_compile gestion_immobiliere/settings.py

if [ $? -eq 0 ]; then
    echo -e "${GREEN}✅ Syntaxe Python correcte !${NC}"
else
    echo -e "${RED}❌ Erreur de syntaxe détectée${NC}"
    exit 1
fi

echo -e "\n${YELLOW}4. TEST DE DJANGO${NC}"
python3 manage.py check --deploy

if [ $? -eq 0 ]; then
    echo -e "${GREEN}✅ Configuration Django valide !${NC}"
else
    echo -e "${RED}❌ Problème de configuration Django${NC}"
    exit 1
fi

echo -e "\n${YELLOW}5. REDÉMARRAGE DES SERVICES${NC}"
sudo systemctl start kbis_immobilier
sleep 3
sudo systemctl start nginx

echo -e "\n${YELLOW}6. VÉRIFICATION${NC}"
echo "État des services:"
sudo systemctl status kbis_immobilier --no-pager -l
sudo systemctl status nginx --no-pager -l

echo -e "\nTest de connectivité:"
sleep 2
curl -I http://127.0.0.1:8000 2>/dev/null && echo -e "${GREEN}✅ Gunicorn répond sur le port 8000${NC}" || echo -e "${RED}❌ Gunicorn ne répond pas${NC}"
curl -I http://78.138.58.185 2>/dev/null && echo -e "${GREEN}✅ Nginx répond${NC}" || echo -e "${RED}❌ Nginx ne répond pas${NC}"

echo -e "\n${GREEN}🎉 CORRECTION TERMINÉE !${NC}"
echo "Testez maintenant: http://78.138.58.185"




