#!/usr/bin/env python
"""
Script pour g√©n√©rer et assigner les nouveaux IDs uniques √† toutes les donn√©es existantes
"""

import os
import sys
import django
from django.conf import settings

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gestion_immobiliere.settings')
django.setup()

from proprietes.models import Bailleur, Locataire, Propriete
from paiements.models import Paiement
from core.id_generator import IDGenerator

def generer_ids_existants():
    """G√©n√®re et assigne les nouveaux IDs uniques √† toutes les donn√©es existantes"""
    
    print("üÜî G√âN√âRATION DES IDS UNIQUES POUR LES DONN√âES EXISTANTES")
    print("=" * 70)
    
    generator = IDGenerator()
    
    # 1. G√©n√©rer les IDs pour les bailleurs
    print("\nüë§ G√âN√âRATION DES IDS POUR LES BAƒ∞LLEURS")
    print("-" * 50)
    
    bailleurs = Bailleur.objects.all()
    print(f"   {bailleurs.count()} bailleurs trouv√©s")
    
    for bailleur in bailleurs:
        try:
            if not bailleur.numero_bailleur:
                numero = generator.generate_id('bailleur')
                bailleur.numero_bailleur = numero
                bailleur.save(update_fields=['numero_bailleur'])
                print(f"   ‚úÖ {bailleur.nom} {bailleur.prenom}: {numero}")
            else:
                print(f"   ‚ÑπÔ∏è  {bailleur.nom} {bailleur.prenom}: {bailleur.numero_bailleur} (d√©j√† pr√©sent)")
        except Exception as e:
            print(f"   ‚ùå Erreur pour {bailleur.nom} {bailleur.prenom}: {e}")
    
    # 2. G√©n√©rer les IDs pour les locataires
    print("\nüè† G√âN√âRATION DES IDS POUR LES LOCATAIRES")
    print("-" * 50)
    
    locataires = Locataire.objects.all()
    print(f"   {locataires.count()} locataires trouv√©s")
    
    for locataire in locataires:
        try:
            if not locataire.numero_locataire:
                numero = generator.generate_id('locataire')
                locataire.numero_locataire = numero
                locataire.save(update_fields=['numero_locataire'])
                print(f"   ‚úÖ {locataire.nom} {locataire.prenom}: {numero}")
            else:
                print(f"   ‚ÑπÔ∏è  {locataire.nom} {locataire.prenom}: {locataire.numero_locataire} (d√©j√† pr√©sent)")
        except Exception as e:
            print(f"   ‚ùå Erreur pour {locataire.nom} {locataire.prenom}: {e}")
    
    # 3. G√©n√©rer les IDs pour les propri√©t√©s
    print("\nüèòÔ∏è G√âN√âRATION DES IDS POUR LES PROPRI√âT√âS")
    print("-" * 50)
    
    proprietes = Propriete.objects.all()
    print(f"   {proprietes.count()} propri√©t√©s trouv√©es")
    
    for propriete in proprietes:
        try:
            if not propriete.numero_propriete:
                numero = generator.generate_id('propriete')
                propriete.numero_propriete = numero
                propriete.save(update_fields=['numero_propriete'])
                print(f"   ‚úÖ {propriete.titre}: {numero}")
            else:
                print(f"   ‚ÑπÔ∏è  {propriete.titre}: {propriete.numero_propriete} (d√©j√† pr√©sent)")
        except Exception as e:
            print(f"   ‚ùå Erreur pour {propriete.titre}: {e}")
    
    # 4. G√©n√©rer les IDs pour les paiements
    print("\nüí≥ G√âN√âRATION DES IDS POUR LES PAIEMENTS")
    print("-" * 50)
    
    paiements = Paiement.objects.all()
    print(f"   {paiements.count()} paiements trouv√©s")
    
    for paiement in paiements:
        try:
            if not paiement.numero_paiement:
                numero = generator.generate_id('paiement')
                paiement.numero_paiement = numero
                paiement.save(update_fields=['numero_paiement'])
                print(f"   ‚úÖ Paiement {paiement.id}: {numero}")
            else:
                print(f"   ‚ÑπÔ∏è  Paiement {paiement.id}: {paiement.numero_paiement} (d√©j√† pr√©sent)")
        except Exception as e:
            print(f"   ‚ùå Erreur pour paiement {paiement.id}: {e}")
    
    # 5. V√©rification finale
    print("\nüîç V√âRIFICATION FINALE")
    print("-" * 50)
    
    try:
        # Compter les enregistrements avec des IDs uniques
        bailleurs_avec_id = Bailleur.objects.filter(numero_bailleur__isnull=False).count()
        locataires_avec_id = Locataire.objects.filter(numero_locataire__isnull=False).count()
        proprietes_avec_id = Propriete.objects.filter(numero_propriete__isnull=False).count()
        paiements_avec_id = Paiement.objects.filter(numero_paiement__isnull=False).count()
        
        total_bailleurs = Bailleur.objects.count()
        total_locataires = Locataire.objects.count()
        total_proprietes = Propriete.objects.count()
        total_paiements = Paiement.objects.count()
        
        print(f"   Bailleurs: {bailleurs_avec_id}/{total_bailleurs} avec ID unique")
        print(f"   Locataires: {locataires_avec_id}/{total_locataires} avec ID unique")
        print(f"   Propri√©t√©s: {proprietes_avec_id}/{total_proprietes} avec ID unique")
        print(f"   Paiements: {paiements_avec_id}/{total_paiements} avec ID unique")
        
        # Afficher quelques exemples
        print("\nüìã EXEMPLES D'IDS G√âN√âR√âS:")
        print("-" * 30)
        
        bailleur_exemple = Bailleur.objects.filter(numero_bailleur__isnull=False).first()
        if bailleur_exemple:
            print(f"   Bailleur: {bailleur_exemple.numero_bailleur}")
            
        locataire_exemple = Locataire.objects.filter(numero_locataire__isnull=False).first()
        if locataire_exemple:
            print(f"   Locataire: {locataire_exemple.numero_locataire}")
            
        propriete_exemple = Propriete.objects.filter(numero_propriete__isnull=False).first()
        if propriete_exemple:
            print(f"   Propri√©t√©: {propriete_exemple.numero_propriete}")
            
        paiement_exemple = Paiement.objects.filter(numero_paiement__isnull=False).first()
        if paiement_exemple:
            print(f"   Paiement: {paiement_exemple.numero_paiement}")
            
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la v√©rification finale: {e}")
    
    print("\n" + "=" * 70)
    print("‚úÖ G√©n√©ration des IDs uniques termin√©e!")
    print("\nüéØ PROCHAINES √âTAPES:")
    print("   1. Red√©marrer le serveur Django")
    print("   2. Tester l'application dans le navigateur")
    print("   3. V√©rifier que les nouveaux IDs sont visibles dans les listes")
    print("   4. Tester la cr√©ation de nouveaux enregistrements")

if __name__ == '__main__':
    generer_ids_existants()
