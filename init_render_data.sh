#!/bin/bash
# Script d'initialisation des donn√©es pour Render

echo "üöÄ INITIALISATION DES DONN√âES RENDER"
echo "===================================="

# Aller dans le bon r√©pertoire
cd /opt/render/project/src

# Activer l'environnement virtuel
source .venv/bin/activate

echo "üìÅ R√©pertoire: $(pwd)"
echo "üêç Python: $(which python)"

# 1. Cr√©er les groupes de travail
echo "üë• Cr√©ation des groupes de travail..."
python manage.py shell -c "
from utilisateurs.models import GroupeTravail
groupes = [
    {'nom': 'ADMINISTRATION', 'description': 'Gestion administrative et comptable compl√®te'},
    {'nom': 'CAISSE', 'description': 'Gestion des paiements et encaissements'},
    {'nom': 'CONTROLES', 'description': 'Contr√¥les et v√©rifications des donn√©es'},
    {'nom': 'PRIVILEGE', 'description': 'Acc√®s privil√©gi√© aux fonctionnalit√©s avanc√©es'}
]
for g in groupes:
    groupe, created = GroupeTravail.objects.get_or_create(nom=g['nom'], defaults={'description': g['description']})
    print(f'Groupe: {groupe.nom} - {\"Cr√©√©\" if created else \"Existe d√©j√†\"}')
"

# 2. Cr√©er les types de biens
echo "üè† Cr√©ation des types de biens..."
python manage.py shell -c "
from proprietes.models import TypeBien
types = [
    'Appartement', 'Maison', 'Studio', 'T1', 'T2', 'T3', 'T4', 'T5+',
    'Bureau', 'Local commercial', 'Entrep√¥t', 'Parking', 'Cave', 'Grenier',
    'Terrain', 'Immeuble', 'R√©sidence', 'Villa', 'Duplex', 'Loft'
]
for t in types:
    type_bien, created = TypeBien.objects.get_or_create(nom=t)
    print(f'Type: {type_bien.nom} - {\"Cr√©√©\" if created else \"Existe d√©j√†\"}')
"

# 3. Cr√©er les devises
echo "üí∞ Cr√©ation des devises..."
python manage.py shell -c "
from core.models import Devise
devises = [
    {'code': 'XOF', 'nom': 'Franc CFA', 'symbole': 'FCFA', 'actif': True},
    {'code': 'EUR', 'nom': 'Euro', 'symbole': '‚Ç¨', 'actif': True},
    {'code': 'USD', 'nom': 'Dollar US', 'symbole': '$', 'actif': True}
]
for d in devises:
    devise, created = Devise.objects.get_or_create(code=d['code'], defaults=d)
    print(f'Devise: {devise.code} - {\"Cr√©√©\" if created else \"Existe d√©j√†\"}')
"

# 4. Cr√©er la configuration entreprise
echo "üè¢ Cr√©ation de la configuration entreprise..."
python manage.py shell -c "
from core.models import ConfigurationEntreprise, Devise
devise_principale = Devise.objects.filter(code='XOF').first()
config, created = ConfigurationEntreprise.objects.get_or_create(
    nom_entreprise='KBIS Immobilier',
    defaults={
        'adresse': 'Adresse de l\'entreprise',
        'telephone': '+226 XX XX XX XX',
        'email': 'contact@kbis-immobilier.com',
        'devise_principale': devise_principale,
        'actif': True
    }
)
print(f'Configuration: {\"Cr√©√©e\" if created else \"Existe d√©j√†\"}')
"

# 5. V√©rification finale
echo "üîç V√©rification des donn√©es cr√©√©es..."
python manage.py shell -c "
from utilisateurs.models import GroupeTravail
from proprietes.models import TypeBien
from core.models import Devise, ConfigurationEntreprise
print(f'Groupes: {GroupeTravail.objects.count()}')
print(f'Types biens: {TypeBien.objects.count()}')
print(f'Devises: {Devise.objects.count()}')
print(f'Configurations: {ConfigurationEntreprise.objects.count()}')
print('‚úÖ Initialisation termin√©e avec succ√®s!')
"

echo ""
echo "üéâ INITIALISATION TERMIN√âE!"
echo "üåê Votre application est pr√™te avec toutes les donn√©es!"
