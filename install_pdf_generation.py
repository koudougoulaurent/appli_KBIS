#!/usr/bin/env python3
"""
Script d'installation pour la fonctionnalit√© de g√©n√©ration PDF
Ce script configure et teste la g√©n√©ration automatique de PDF
"""

import os
import sys
import subprocess
import importlib

def check_python_version():
    """V√©rifie la version de Python"""
    print("üêç V√©rification de la version Python...")
    
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ est requis")
        return False
    
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} d√©tect√©")
    return True

def install_dependencies():
    """Installe les d√©pendances n√©cessaires"""
    print("\nüì¶ Installation des d√©pendances...")
    
    try:
        # Installation de reportlab (d√©pendance principale)
        print("   Installation de reportlab...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "reportlab>=4.0.0"])
        print("   ‚úÖ reportlab install√© avec succ√®s")
        
        # Installation des d√©pendances optionnelles
        optional_deps = [
            "Pillow>=9.0.0",
            "fonttools>=4.0.0",
            "PyPDF2>=3.0.0"
        ]
        
        for dep in optional_deps:
            try:
                print(f"   Installation de {dep}...")
                subprocess.check_call([sys.executable, "-m", "pip", "install", dep])
                print(f"   ‚úÖ {dep} install√© avec succ√®s")
            except subprocess.CalledProcessError:
                print(f"   ‚ö†Ô∏è  {dep} n'a pas pu √™tre install√© (optionnel)")
        
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur lors de l'installation : {e}")
        return False

def check_django_environment():
    """V√©rifie l'environnement Django"""
    print("\nüîß V√©rification de l'environnement Django...")
    
    try:
        # V√©rifier si Django est install√©
        import django
        print(f"‚úÖ Django {django.get_version()} d√©tect√©")
        
        # V√©rifier si on est dans un projet Django
        if not os.path.exists('manage.py'):
            print("‚ùå manage.py non trouv√© - assurez-vous d'√™tre dans le r√©pertoire du projet Django")
            return False
        
        print("‚úÖ Projet Django d√©tect√©")
        return True
        
    except ImportError:
        print("‚ùå Django n'est pas install√©")
        return False

def setup_django():
    """Configure Django pour les tests"""
    print("\n‚öôÔ∏è  Configuration de Django...")
    
    try:
        # Configuration Django
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gestion_immobiliere.settings')
        
        # Initialisation Django
        django.setup()
        print("‚úÖ Django configur√© avec succ√®s")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la configuration Django : {e}")
        return False

def test_imports():
    """Teste l'import des modules PDF"""
    print("\nüß™ Test des imports...")
    
    try:
        # Test des services PDF
        from contrats.services import ContratPDFService, ResiliationPDFService
        print("‚úÖ Services PDF import√©s avec succ√®s")
        
        # Test de la configuration
        from contrats.config import ENTREPRISE_CONFIG, PDF_CONFIG
        print("‚úÖ Configuration import√©e avec succ√®s")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Erreur d'import : {e}")
        return False

def run_tests():
    """Lance les tests de g√©n√©ration PDF"""
    print("\nüöÄ Lancement des tests...")
    
    try:
        # Ex√©cuter le script de test
        test_script = "contrats/test_pdf.py"
        if os.path.exists(test_script):
            print("   Ex√©cution des tests de g√©n√©ration PDF...")
            subprocess.run([sys.executable, test_script])
        else:
            print("   ‚ö†Ô∏è  Script de test non trouv√©")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors des tests : {e}")
        return False

def create_sample_config():
    """Cr√©e un exemple de configuration personnalis√©e"""
    print("\nüìù Cr√©ation d'un exemple de configuration...")
    
    config_example = """# Exemple de configuration personnalis√©e pour votre entreprise
# Copiez ce fichier vers contrats/config_personnalise.py et modifiez-le

ENTREPRISE_CONFIG_PERSONNALISE = {
    'nom': 'VOTRE ENTREPRISE IMMOBILIERE',
    'adresse': 'Votre adresse compl√®te',
    'ville': 'Votre ville',
    'code_postal': 'Votre code postal',
    'pays': 'Votre pays',
    'telephone': 'Votre t√©l√©phone',
    'email': 'votre@email.com',
    'site_web': 'www.votre-site.com',
    'siret': 'Votre SIRET',
    'numero_tva': 'Votre num√©ro TVA',
    'rcs': 'Votre RCS',
    'capital_social': 'Votre capital social',
    'gerant': 'Nom du g√©rant',
    
    # Informations bancaires
    'banque': 'Votre banque',
    'iban': 'Votre IBAN',
    'bic': 'Votre BIC',
    
    # Logo et branding
    'logo_path': 'static/images/votre_logo.png',
    'couleur_principale': '#Votre couleur principale',
    'couleur_secondaire': '#Votre couleur secondaire',
}

# Utilisez cette configuration en modifiant contrats/config.py
"""
    
    try:
        with open('exemple_config_entreprise.py', 'w', encoding='utf-8') as f:
            f.write(config_example)
        print("‚úÖ Exemple de configuration cr√©√© : exemple_config_entreprise.py")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de l'exemple : {e}")
        return False

def main():
    """Fonction principale d'installation"""
    print("üöÄ Installation de la fonctionnalit√© de g√©n√©ration PDF")
    print("=" * 60)
    
    # V√©rifications pr√©liminaires
    if not check_python_version():
        return False
    
    if not check_django_environment():
        return False
    
    # Installation des d√©pendances
    if not install_dependencies():
        return False
    
    # Configuration Django
    if not setup_django():
        return False
    
    # Test des imports
    if not test_imports():
        return False
    
    # Cr√©ation de l'exemple de configuration
    create_sample_config()
    
    # Lancement des tests
    run_tests()
    
    # R√©sum√© final
    print("\n" + "=" * 60)
    print("üéâ INSTALLATION TERMIN√âE AVEC SUCC√àS !")
    print("=" * 60)
    
    print("\nüìã Prochaines √©tapes :")
    print("1. Personnalisez la configuration dans contrats/config.py")
    print("2. Testez la g√©n√©ration PDF via l'interface web")
    print("3. Consultez la documentation dans GENERATION_PDF_CONTRATS.md")
    
    print("\nüîß En cas de probl√®me :")
    print("- V√©rifiez les logs Django")
    print("- Ex√©cutez : python contrats/test_pdf.py")
    print("- Consultez la documentation")
    
    print("\n‚úÖ La fonctionnalit√© de g√©n√©ration PDF est maintenant disponible !")
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Installation interrompue par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        print(f"\n\n‚ùå Erreur inattendue : {e}")
        sys.exit(1)
