#!/bin/bash

# Script de gestion des d√©ploiements
# Menu principal pour g√©rer les mises √† jour et d√©ploiements

set -e

# Couleurs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Variables
APP_DIR="/var/www/kbis_immobilier"
BACKUP_DIR="/var/backups/kbis_immobilier"

# Fonction pour afficher le menu
show_menu() {
    echo -e "${BLUE}üöÄ GESTIONNAIRE DE D√âPLOIEMENT KBIS${NC}"
    echo "=================================="
    echo ""
    echo "1. Mise √† jour s√©curis√©e (derni√®re version)"
    echo "2. D√©ploiement depuis un commit sp√©cifique"
    echo "3. Retour en arri√®re (rollback)"
    echo "4. V√©rifier l'√©tat de l'application"
    echo "5. Lister les sauvegardes disponibles"
    echo "6. Nettoyer les anciennes sauvegardes"
    echo "7. Quitter"
    echo ""
    echo -e "${YELLOW}Choisissez une option (1-7):${NC}"
}

# Fonction pour v√©rifier l'√©tat de l'application
check_app_status() {
    echo -e "\n${YELLOW}üìä √âTAT DE L'APPLICATION${NC}"
    echo "========================"
    
    # V√©rifier gunicorn
    if pgrep -f gunicorn > /dev/null; then
        echo -e "${GREEN}‚úÖ Gunicorn: ACTIF${NC}"
        echo "   PID: $(pgrep -f gunicorn)"
    else
        echo -e "${RED}‚ùå Gunicorn: INACTIF${NC}"
    fi
    
    # V√©rifier nginx
    if sudo systemctl is-active --quiet nginx; then
        echo -e "${GREEN}‚úÖ Nginx: ACTIF${NC}"
    else
        echo -e "${RED}‚ùå Nginx: INACTIF${NC}"
    fi
    
    # V√©rifier les ports
    echo -e "\n${YELLOW}Ports ouverts:${NC}"
    netstat -tlnp | grep -E ":(80|443|8000) " || echo "Aucun port ouvert"
    
    # Test de connectivit√©
    echo -e "\n${YELLOW}Test de connectivit√©:${NC}"
    if curl -s -I https://78.138.58.185 >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Application accessible via HTTPS${NC}"
    else
        echo -e "${RED}‚ùå Application non accessible${NC}"
    fi
    
    # Informations Git
    echo -e "\n${YELLOW}Informations Git:${NC}"
    cd $APP_DIR
    echo "Branche actuelle: $(git branch --show-current)"
    echo "Dernier commit: $(git log -1 --oneline)"
    echo "√âtat du d√©p√¥t: $(git status --porcelain | wc -l) fichiers modifi√©s"
}

# Fonction pour lister les sauvegardes
list_backups() {
    echo -e "\n${YELLOW}üìÅ SAUVEGARDES DISPONIBLES${NC}"
    echo "========================"
    
    if [ ! -d "$BACKUP_DIR" ]; then
        echo -e "${RED}‚ùå Aucune sauvegarde trouv√©e${NC}"
        return
    fi
    
    echo "Sauvegardes de configuration:"
    ls -la $BACKUP_DIR/settings_*.py 2>/dev/null | tail -10 || echo "Aucune sauvegarde de configuration"
    
    echo -e "\nSauvegardes de base de donn√©es:"
    ls -la $BACKUP_DIR/database_*.json 2>/dev/null | tail -10 || echo "Aucune sauvegarde de base de donn√©es"
    
    echo -e "\nSauvegardes Nginx:"
    ls -la $BACKUP_DIR/nginx_*.conf 2>/dev/null | tail -10 || echo "Aucune sauvegarde Nginx"
}

# Fonction pour nettoyer les anciennes sauvegardes
cleanup_backups() {
    echo -e "\n${YELLOW}üßπ NETTOYAGE DES ANCIENNES SAUVEGARDES${NC}"
    echo "====================================="
    
    if [ ! -d "$BACKUP_DIR" ]; then
        echo -e "${RED}‚ùå Aucune sauvegarde trouv√©e${NC}"
        return
    fi
    
    # Compter les sauvegardes
    backup_count=$(ls $BACKUP_DIR/*.py $BACKUP_DIR/*.json $BACKUP_DIR/*.conf 2>/dev/null | wc -l)
    echo "Nombre de sauvegardes: $backup_count"
    
    if [ $backup_count -gt 20 ]; then
        echo "Suppression des sauvegardes de plus de 30 jours..."
        find $BACKUP_DIR -name "*.py" -mtime +30 -delete
        find $BACKUP_DIR -name "*.json" -mtime +30 -delete
        find $BACKUP_DIR -name "*.conf" -mtime +30 -delete
        echo -e "${GREEN}‚úÖ Nettoyage termin√©${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Pas assez de sauvegardes pour le nettoyage${NC}"
    fi
}

# Boucle principale
while true; do
    show_menu
    read -r choice
    
    case $choice in
        1)
            echo -e "\n${YELLOW}üîÑ Mise √† jour s√©curis√©e...${NC}"
            bash update_app_safe.sh
            ;;
        2)
            echo -e "\n${YELLOW}üöÄ D√©ploiement depuis un commit...${NC}"
            bash deploy_from_commit.sh
            ;;
        3)
            echo -e "\n${YELLOW}‚è™ Retour en arri√®re...${NC}"
            bash rollback_app.sh
            ;;
        4)
            check_app_status
            ;;
        5)
            list_backups
            ;;
        6)
            cleanup_backups
            ;;
        7)
            echo -e "\n${GREEN}üëã Au revoir !${NC}"
            exit 0
            ;;
        *)
            echo -e "\n${RED}‚ùå Option invalide. Veuillez choisir entre 1 et 7.${NC}"
            ;;
    esac
    
    echo -e "\n${YELLOW}Appuyez sur Entr√©e pour continuer...${NC}"
    read -r
done

