#!/usr/bin/env python
"""
Script pour mettre √† jour les param√®tres Django avec la s√©curit√©
"""

import os
import sys

def update_settings_security():
    """Mettre √† jour les param√®tres de s√©curit√© Django"""
    
    print("üîí Mise √† jour des param√®tres de s√©curit√© Django")
    print("=" * 60)
    
    # Lire le fichier settings.py
    with open('gestion_immobiliere/settings.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Ajouter les middlewares de s√©curit√©
    security_middleware = '''MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
    # Middlewares de s√©curit√© personnalis√©s
    'core.middleware.SecurityMiddleware',
    'core.middleware.DataValidationMiddleware',
    'core.middleware.AuditMiddleware',
]'''
    
    # Remplacer les middlewares existants
    import re
    pattern = r'MIDDLEWARE = \[.*?\]'
    if re.search(pattern, content, re.DOTALL):
        content = re.sub(pattern, security_middleware, content, flags=re.DOTALL)
        print("‚úÖ Middlewares de s√©curit√© ajout√©s")
    
    # Ajouter les param√®tres de s√©curit√©
    security_settings = '''
# Param√®tres de s√©curit√©
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_SECONDS = 31536000
SECURE_HSTS_PRELOAD = True
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'
SECURE_SSL_REDIRECT = False  # Mettre True en production
SESSION_COOKIE_SECURE = False  # Mettre True en production
CSRF_COOKIE_SECURE = False  # Mettre True en production
X_FRAME_OPTIONS = 'DENY'

# Configuration des cookies
SESSION_COOKIE_HTTPONLY = True
CSRF_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'
CSRF_COOKIE_SAMESITE = 'Lax'

# Configuration de la session
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_AGE = 3600  # 1 heure
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_SAVE_EVERY_REQUEST = True

# Configuration CSRF
CSRF_COOKIE_AGE = 31449600  # 1 an
CSRF_USE_SESSIONS = True

# Configuration des mots de passe
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Configuration du logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'logs/gestion_immobiliere.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'core': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'proprietes': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'contrats': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'paiements': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# Configuration de la cache
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
        'TIMEOUT': 300,  # 5 minutes
        'OPTIONS': {
            'MAX_ENTRIES': 1000,
        }
    }
}

# Configuration des fichiers upload√©s
FILE_UPLOAD_HANDLERS = [
    'django.core.files.uploadhandler.MemoryFileUploadHandler',
    'django.core.files.uploadhandler.TemporaryFileUploadHandler',
]

FILE_UPLOAD_MAX_MEMORY_SIZE = 2621440  # 2.5 MB
FILE_UPLOAD_TEMP_DIR = None
FILE_UPLOAD_PERMISSIONS = 0o644
FILE_UPLOAD_DIRECTORY_PERMISSIONS = 0o755

# Configuration des messages
MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'

# Configuration des templates
TEMPLATES[0]['OPTIONS']['context_processors'].extend([
    'django.template.context_processors.debug',
])

# Configuration des applications
INSTALLED_APPS.extend([
    'django.contrib.humanize',
])

# Configuration des langues
LANGUAGES = [
    ('fr', 'Fran√ßais'),
]

LOCALE_PATHS = [
    BASE_DIR / 'locale',
]

# Configuration des fuseaux horaires
USE_TZ = True
TIME_ZONE = 'Europe/Paris'

# Configuration des m√©dias
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Configuration des fichiers statiques
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Configuration de la base de donn√©es (am√©lioration s√©curit√©)
DATABASES['default'].update({
    'OPTIONS': {
        'timeout': 20,
        'check_same_thread': False,
    },
    'ATOMIC_REQUESTS': True,
    'CONN_MAX_AGE': 600,  # 10 minutes
})

# Configuration des emails (pour les notifications)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_HOST = 'localhost'
EMAIL_PORT = 1025
EMAIL_USE_TLS = False
EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = ''
DEFAULT_FROM_EMAIL = 'noreply@gestion-immobiliere.com'

# Configuration des notifications
NOTIFICATION_SETTINGS = {
    'EMAIL_ENABLED': False,
    'SMS_ENABLED': False,
    'PUSH_ENABLED': False,
}

# Configuration de la s√©curit√© des formulaires
FORM_SECURITY = {
    'MAX_FIELD_LENGTH': 1000,
    'ALLOWED_FILE_TYPES': ['.pdf', '.doc', '.docx', '.jpg', '.jpeg', '.png'],
    'MAX_FILE_SIZE': 5242880,  # 5 MB
    'RATE_LIMIT': 100,  # requ√™tes par minute
}

# Configuration de la validation des donn√©es
DATA_VALIDATION = {
    'STRICT_MODE': True,
    'AUTO_SANITIZE': True,
    'LOG_VIOLATIONS': True,
}

# Configuration de l'audit
AUDIT_SETTINGS = {
    'ENABLED': True,
    'LOG_LEVEL': 'INFO',
    'RETENTION_DAYS': 365,
    'SENSITIVE_FIELDS': ['password', 'iban', 'numero_fiscal', 'numero_ss'],
}
'''
    
    # Ajouter les param√®tres de s√©curit√© √† la fin du fichier
    if 'SECURE_BROWSER_XSS_FILTER' not in content:
        content += security_settings
        print("‚úÖ Param√®tres de s√©curit√© ajout√©s")
    
    # √âcrire le fichier mis √† jour
    with open('gestion_immobiliere/settings.py', 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ Fichier settings.py mis √† jour avec succ√®s")


def create_logs_directory():
    """Cr√©er le r√©pertoire de logs"""
    
    logs_dir = 'logs'
    if not os.path.exists(logs_dir):
        os.makedirs(logs_dir)
        print("‚úÖ R√©pertoire logs cr√©√©")
    else:
        print("‚úÖ R√©pertoire logs existant")


def create_security_documentation():
    """Cr√©er la documentation de s√©curit√©"""
    
    doc_content = '''# üîí Documentation de S√©curit√©

## Vue d'ensemble

Ce document d√©crit les mesures de s√©curit√© mises en place dans l'application de gestion immobili√®re.

## Mesures de S√©curit√© Impl√©ment√©es

### 1. Validation des Donn√©es

#### Formulaires S√©curis√©s
- Validation c√¥t√© client et serveur
- Nettoyage automatique des donn√©es
- Protection contre les injections
- Validation des types de donn√©es

#### Validateurs Personnalis√©s
- Validation des t√©l√©phones fran√ßais
- Validation des codes postaux
- Validation des IBAN
- Validation des montants
- Validation des surfaces

### 2. Protection contre les Attaques

#### Injection SQL
- Validation des param√®tres
- Utilisation des ORM Django
- √âchappement automatique des caract√®res

#### Cross-Site Scripting (XSS)
- Filtrage des balises HTML
- Validation des entr√©es utilisateur
- En-t√™tes de s√©curit√©

#### Injection de Commandes
- Validation des caract√®res sp√©ciaux
- Filtrage des commandes syst√®me
- Sanitisation des entr√©es

### 3. Middleware de S√©curit√©

#### SecurityMiddleware
- V√©rification des en-t√™tes
- Protection contre les attaques
- Rate limiting
- Logging des activit√©s suspectes

#### DataValidationMiddleware
- Validation des donn√©es POST/GET
- V√©rification des types
- Nettoyage automatique

#### AuditMiddleware
- Tra√ßabilit√© des actions
- Logging des erreurs
- Historique des modifications

### 4. Sauvegarde S√©curis√©e

#### DataSaveHandler
- Validation avant sauvegarde
- Gestion des erreurs
- Logging des actions
- Notifications automatiques

#### Signaux Django
- Validation automatique
- Nettoyage des donn√©es
- Logging des √©v√©nements

### 5. Configuration de S√©curit√©

#### Param√®tres Django
- En-t√™tes de s√©curit√©
- Configuration des cookies
- Gestion des sessions
- Validation des mots de passe

#### Logging
- Tra√ßabilit√© compl√®te
- Rotation des logs
- Niveaux de log appropri√©s

## Bonnes Pratiques

### 1. Validation des Donn√©es
- Toujours valider c√¥t√© serveur
- Utiliser les validateurs Django
- Nettoyer les donn√©es avant sauvegarde

### 2. Gestion des Erreurs
- Ne pas exposer les erreurs internes
- Logger les erreurs pour debugging
- Messages d'erreur appropri√©s

### 3. Authentification
- Utiliser les d√©corateurs @login_required
- V√©rifier les permissions
- G√©rer les sessions

### 4. Fichiers Upload√©s
- Valider les types de fichiers
- Limiter la taille des fichiers
- Stocker en s√©curit√©

## Tests de S√©curit√©

### Ex√©cution des Tests
```bash
python test_securite_formulaires.py
```

### Tests Inclus
- Validation des donn√©es
- Protection contre les attaques
- Sauvegarde s√©curis√©e
- Nettoyage des donn√©es

## Maintenance

### Surveillance
- V√©rifier les logs r√©guli√®rement
- Surveiller les tentatives d'attaque
- Maintenir les d√©pendances

### Mises √† Jour
- Mettre √† jour Django r√©guli√®rement
- V√©rifier les vuln√©rabilit√©s
- Tester apr√®s les mises √† jour

## Contact

Pour toute question de s√©curit√©, contactez l'√©quipe de d√©veloppement.
'''
    
    with open('SECURITE.md', 'w', encoding='utf-8') as f:
        f.write(doc_content)
    
    print("‚úÖ Documentation de s√©curit√© cr√©√©e")


def main():
    """Fonction principale"""
    
    print("üöÄ Mise √† jour des param√®tres de s√©curit√©")
    print("=" * 60)
    
    # Cr√©er le r√©pertoire de logs
    create_logs_directory()
    
    # Mettre √† jour les param√®tres
    update_settings_security()
    
    # Cr√©er la documentation
    create_security_documentation()
    
    print("\nüéâ Configuration de s√©curit√© termin√©e !")
    print("\nüìã R√©capitulatif des am√©liorations:")
    print("‚úÖ Middlewares de s√©curit√© ajout√©s")
    print("‚úÖ Param√®tres de s√©curit√© configur√©s")
    print("‚úÖ Logging configur√©")
    print("‚úÖ Cache configur√©")
    print("‚úÖ Validation des mots de passe renforc√©e")
    print("‚úÖ Protection contre les attaques")
    print("‚úÖ Documentation de s√©curit√© cr√©√©e")


if __name__ == '__main__':
    main() 