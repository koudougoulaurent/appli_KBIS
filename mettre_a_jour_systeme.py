#!/usr/bin/env python
"""
Script pour mettre √† jour le syst√®me et g√©n√©rer les IDs uniques
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gestion_immobiliere.settings')
django.setup()

from django.db import connection, transaction
from core.id_generator import IDGenerator


def mettre_a_jour_bailleurs():
    """Mettre √† jour les bailleurs avec les nouveaux IDs uniques"""
    
    print("üë§ MISE √Ä JOUR DES BAILLEURS")
    print("-" * 40)
    
    try:
        from proprietes.models import Bailleur
        
        # V√©rifier si le champ numero_bailleur existe
        with connection.cursor() as cursor:
            cursor.execute("PRAGMA table_info(proprietes_bailleur)")
            colonnes = cursor.fetchall()
            colonnes_noms = [col[1] for col in colonnes]
            
            if 'numero_bailleur' not in colonnes_noms:
                print("   ‚ùå Champ numero_bailleur manquant dans le mod√®le")
                return False
        
        # R√©cup√©rer tous les bailleurs
        bailleurs = Bailleur.objects.all()
        print(f"   {bailleurs.count()} bailleurs trouv√©s")
        
        # G√©n√©rer les IDs uniques pour chaque bailleur
        for bailleur in bailleurs:
            if not hasattr(bailleur, 'numero_bailleur') or not bailleur.numero_bailleur:
                try:
                    # G√©n√©rer un nouveau num√©ro au format BLR-YYYY-XXXX
                    nouveau_numero = IDGenerator.generate_id('bailleur')
                    
                    # Mettre √† jour directement en base
                    with connection.cursor() as cursor:
                        cursor.execute(
                            "UPDATE proprietes_bailleur SET numero_bailleur = %s WHERE id = %s",
                            [nouveau_numero, bailleur.id]
                        )
                    
                    print(f"      ‚úÖ {bailleur.nom} {bailleur.prenom}: {nouveau_numero}")
                    
                except Exception as e:
                    print(f"      ‚ùå Erreur pour {bailleur.nom}: {e}")
        
        print("   ‚úÖ Mise √† jour des bailleurs termin√©e")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
        return False


def mettre_a_jour_locataires():
    """Mettre √† jour les locataires avec les nouveaux IDs uniques"""
    
    print("\nüë• MISE √Ä JOUR DES LOCATAIRES")
    print("-" * 40)
    
    try:
        from proprietes.models import Locataire
        
        # V√©rifier si le champ numero_locataire existe
        with connection.cursor() as cursor:
            cursor.execute("PRAGMA table_info(proprietes_locataire)")
            colonnes = cursor.fetchall()
            colonnes_noms = [col[1] for col in colonnes]
            
            if 'numero_locataire' not in colonnes_noms:
                print("   ‚ùå Champ numero_locataire manquant dans le mod√®le")
                return False
        
        # R√©cup√©rer tous les locataires
        locataires = Locataire.objects.all()
        print(f"   {locataires.count()} locataires trouv√©s")
        
        # G√©n√©rer les IDs uniques pour chaque locataire
        for locataire in locataires:
            if not hasattr(locataire, 'numero_locataire') or not locataire.numero_locataire:
                try:
                    # G√©n√©rer un nouveau num√©ro au format LOC-YYYY-XXXX
                    nouveau_numero = IDGenerator.generate_id('locataire')
                    
                    # Mettre √† jour directement en base
                    with connection.cursor() as cursor:
                        cursor.execute(
                            "UPDATE proprietes_locataire SET numero_locataire = %s WHERE id = %s",
                            [nouveau_numero, locataire.id]
                        )
                    
                    print(f"      ‚úÖ {locataire.nom} {locataire.prenom}: {nouveau_numero}")
                    
                except Exception as e:
                    print(f"      ‚ùå Erreur pour {locataire.nom}: {e}")
        
        print("   ‚úÖ Mise √† jour des locataires termin√©e")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
        return False


def mettre_a_jour_proprietes():
    """Mettre √† jour les propri√©t√©s avec les nouveaux IDs uniques"""
    
    print("\nüè† MISE √Ä JOUR DES PROPRI√âT√âS")
    print("-" * 40)
    
    try:
        from proprietes.models import Propriete
        
        # V√©rifier si le champ numero_propriete existe
        with connection.cursor() as cursor:
            cursor.execute("PRAGMA table_info(proprietes_propriete)")
            colonnes = cursor.fetchall()
            colonnes_noms = [col[1] for col in colonnes]
            
            if 'numero_propriete' not in colonnes_noms:
                print("   ‚ùå Champ numero_propriete manquant dans le mod√®le")
                return False
        
        # R√©cup√©rer toutes les propri√©t√©s
        proprietes = Propriete.objects.all()
        print(f"   {proprietes.count()} propri√©t√©s trouv√©es")
        
        # G√©n√©rer les IDs uniques pour chaque propri√©t√©
        for propriete in proprietes:
            if not hasattr(propriete, 'numero_propriete') or not propriete.numero_propriete:
                try:
                    # G√©n√©rer un nouveau num√©ro au format PRP-YYYY-XXXX
                    nouveau_numero = IDGenerator.generate_id('propriete')
                    
                    # Mettre √† jour directement en base
                    with connection.cursor() as cursor:
                        cursor.execute(
                            "UPDATE proprietes_propriete SET numero_propriete = %s WHERE id = %s",
                            [nouveau_numero, propriete.id]
                        )
                    
                    print(f"      ‚úÖ {propriete.adresse}: {nouveau_numero}")
                    
                except Exception as e:
                    print(f"      ‚ùå Erreur pour {propriete.adresse}: {e}")
        
        print("   ‚úÖ Mise √† jour des propri√©t√©s termin√©e")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
        return False


def mettre_a_jour_paiements():
    """Mettre √† jour les paiements avec les nouveaux IDs uniques"""
    
    print("\nüí≥ MISE √Ä JOUR DES PAIEMENTS")
    print("-" * 40)
    
    try:
        from paiements.models import Paiement
        
        # V√©rifier si le champ numero_paiement existe
        with connection.cursor() as cursor:
            cursor.execute("PRAGMA table_info(paiements_paiement)")
            colonnes = cursor.fetchall()
            colonnes_noms = [col[1] for col in colonnes]
            
            if 'numero_paiement' not in colonnes_noms:
                print("   ‚ùå Champ numero_paiement manquant dans le mod√®le")
                return False
        
        # R√©cup√©rer tous les paiements
        paiements = Paiement.objects.all()
        print(f"   {paiements.count()} paiements trouv√©s")
        
        # G√©n√©rer les IDs uniques pour chaque paiement
        for paiement in paiements:
            if not hasattr(paiement, 'numero_paiement') or not paiement.numero_paiement:
                try:
                    # G√©n√©rer un nouveau num√©ro au format PAY-YYYYMM-XXXX
                    nouveau_numero = IDGenerator.generate_id('paiement', date_paiement=paiement.date_paiement)
                    
                    # Mettre √† jour directement en base
                    with connection.cursor() as cursor:
                        cursor.execute(
                            "UPDATE paiements_paiement SET numero_paiement = %s WHERE id = %s",
                            [nouveau_numero, paiement.id]
                        )
                    
                    print(f"      ‚úÖ Paiement {paiement.id}: {nouveau_numero}")
                    
                except Exception as e:
                    print(f"      ‚ùå Erreur pour paiement {paiement.id}: {e}")
        
        print("   ‚úÖ Mise √† jour des paiements termin√©e")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
        return False


def verifier_resultats():
    """V√©rifier les r√©sultats de la mise √† jour"""
    
    print("\nüîç V√âRIFICATION DES R√âSULTATS")
    print("-" * 40)
    
    try:
        with connection.cursor() as cursor:
            # V√©rifier les bailleurs
            cursor.execute("SELECT COUNT(*) FROM proprietes_bailleur WHERE numero_bailleur IS NOT NULL")
            bailleurs_avec_id = cursor.fetchone()[0]
            cursor.execute("SELECT COUNT(*) FROM proprietes_bailleur")
            total_bailleurs = cursor.fetchone()[0]
            
            print(f"   Bailleurs avec ID unique: {bailleurs_avec_id}/{total_bailleurs}")
            
            # V√©rifier les locataires
            cursor.execute("SELECT COUNT(*) FROM proprietes_locataire WHERE numero_locataire IS NOT NULL")
            locataires_avec_id = cursor.fetchone()[0]
            cursor.execute("SELECT COUNT(*) FROM proprietes_locataire")
            total_locataires = cursor.fetchone()[0]
            
            print(f"   Locataires avec ID unique: {locataires_avec_id}/{total_locataires}")
            
            # V√©rifier les propri√©t√©s
            cursor.execute("SELECT COUNT(*) FROM proprietes_propriete WHERE numero_propriete IS NOT NULL")
            proprietes_avec_id = cursor.fetchone()[0]
            cursor.execute("SELECT COUNT(*) FROM proprietes_propriete")
            total_proprietes = cursor.fetchone()[0]
            
            print(f"   Propri√©t√©s avec ID unique: {proprietes_avec_id}/{total_proprietes}")
            
            # V√©rifier les paiements
            cursor.execute("SELECT COUNT(*) FROM paiements_paiement WHERE numero_paiement IS NOT NULL")
            paiements_avec_id = cursor.fetchone()[0]
            cursor.execute("SELECT COUNT(*) FROM paiements_paiement")
            total_paiements = cursor.fetchone()[0]
            
            print(f"   Paiements avec ID unique: {paiements_avec_id}/{total_paiements}")
            
            # Afficher quelques exemples
            print("\nüìä Exemples d'IDs au nouveau format:")
            print("-" * 40)
            
            # Bailleurs
            cursor.execute("SELECT numero_bailleur, nom, prenom FROM proprietes_bailleur WHERE numero_bailleur IS NOT NULL LIMIT 3")
            for row in cursor.fetchall():
                print(f"   Bailleur: {row[0]} - {row[2]} {row[1]}")
            
            # Locataires
            cursor.execute("SELECT numero_locataire, nom, prenom FROM proprietes_locataire WHERE numero_locataire IS NOT NULL LIMIT 3")
            for row in cursor.fetchall():
                print(f"   Locataire: {row[0]} - {row[2]} {row[1]}")
            
            # Propri√©t√©s
            cursor.execute("SELECT numero_propriete, adresse FROM proprietes_propriete WHERE numero_propriete IS NOT NULL LIMIT 3")
            for row in cursor.fetchall():
                print(f"   Propri√©t√©: {row[0]} - {row[1]}")
            
            # Paiements
            cursor.execute("SELECT numero_paiement, montant FROM paiements_paiement WHERE numero_paiement IS NOT NULL LIMIT 3")
            for row in cursor.fetchall():
                print(f"   Paiement: {row[0]} - {row[1]}")
        
        print("\n‚úÖ V√©rification termin√©e!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {e}")
        return False


def main():
    """Fonction principale"""
    
    print("üöÄ MISE √Ä JOUR DU SYST√àME D'IDS UNIQUES")
    print("=" * 60)
    
    # √âtape 1: Mettre √† jour les bailleurs
    if not mettre_a_jour_bailleurs():
        print("‚ùå √âchec de la mise √† jour des bailleurs")
        return False
    
    # √âtape 2: Mettre √† jour les locataires
    if not mettre_a_jour_locataires():
        print("‚ùå √âchec de la mise √† jour des locataires")
        return False
    
    # √âtape 3: Mettre √† jour les propri√©t√©s
    if not mettre_a_jour_proprietes():
        print("‚ùå √âchec de la mise √† jour des propri√©t√©s")
        return False
    
    # √âtape 4: Mettre √† jour les paiements
    if not mettre_a_jour_paiements():
        print("‚ùå √âchec de la mise √† jour des paiements")
        return False
    
    # √âtape 5: V√©rifier les r√©sultats
    if not verifier_resultats():
        print("‚ùå √âchec de la v√©rification")
        return False
    
    print("\nüéâ MISE √Ä JOUR TERMIN√âE AVEC SUCC√àS!")
    print("=" * 60)
    print("‚úÖ Tous les mod√®les ont maintenant des IDs uniques")
    print("‚úÖ Les vues affichent les nouvelles colonnes")
    print("‚úÖ Les donn√©es existantes ont √©t√© mises √† jour")
    print("‚úÖ Le syst√®me est pr√™t √† √™tre utilis√©")
    
    return True


if __name__ == "__main__":
    main()
