#!/usr/bin/env python
"""
Script de migration intelligent qui g√®re les colonnes existantes
"""
import os
import sys
import django
from django.db import connection

# Configuration Django pour PostgreSQL
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gestion_immobiliere.settings_postgresql')
django.setup()

def check_column_exists(table_name, column_name):
    """V√©rifie si une colonne existe dans une table"""
    with connection.cursor() as cursor:
        cursor.execute("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = %s AND column_name = %s
        """, [table_name, column_name])
        return cursor.fetchone() is not None

def check_table_exists(table_name):
    """V√©rifie si une table existe"""
    with connection.cursor() as cursor:
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_name = %s
        """, [table_name])
        return cursor.fetchone() is not None

def run_smart_migrations():
    """Ex√©cute les migrations de mani√®re intelligente"""
    print("MIGRATION INTELLIGENTE POSTGRESQL")
    print("=" * 50)
    
    try:
        from django.core.management import execute_from_command_line
        
        # 1. Appliquer les migrations de base (tables principales)
        print("1. Application des migrations de base...")
        execute_from_command_line(['manage.py', 'migrate', 'admin'])
        execute_from_command_line(['manage.py', 'migrate', 'auth'])
        execute_from_command_line(['manage.py', 'migrate', 'contenttypes'])
        execute_from_command_line(['manage.py', 'migrate', 'sessions'])
        print("   ‚úì Migrations de base appliqu√©es")
        
        # 2. Migrations core
        print("2. Application des migrations core...")
        execute_from_command_line(['manage.py', 'migrate', 'core'])
        print("   ‚úì Migrations core appliqu√©es")
        
        # 3. Migrations utilisateurs
        print("3. Application des migrations utilisateurs...")
        execute_from_command_line(['manage.py', 'migrate', 'utilisateurs'])
        print("   ‚úì Migrations utilisateurs appliqu√©es")
        
        # 4. Migrations propri√©t√©s
        print("4. Application des migrations propri√©t√©s...")
        execute_from_command_line(['manage.py', 'migrate', 'proprietes'])
        print("   ‚úì Migrations propri√©t√©s appliqu√©es")
        
        # 5. Migrations contrats
        print("5. Application des migrations contrats...")
        execute_from_command_line(['manage.py', 'migrate', 'contrats'])
        print("   ‚úì Migrations contrats appliqu√©es")
        
        # 6. Migrations notifications
        print("6. Application des migrations notifications...")
        execute_from_command_line(['manage.py', 'migrate', 'notifications'])
        print("   ‚úì Migrations notifications appliqu√©es")
        
        # 7. Migrations paiements (avec gestion des conflits)
        print("7. Application des migrations paiements...")
        try:
            execute_from_command_line(['manage.py', 'migrate', 'paiements'])
            print("   ‚úì Migrations paiements appliqu√©es")
        except Exception as e:
            print(f"   ‚ö† Conflit dans paiements: {e}")
            print("   ‚Üí Application des migrations individuelles...")
            
            # Appliquer les migrations une par une
            paiements_migrations = [
                '0001_initial', '0002_recu_date_envoi_email_recu_envoye_email_and_more',
                '0003_recu_date_validation_recu_email_destinataire_and_more',
                '0004_paiement_deleted_at_paiement_deleted_by_and_more',
                '0005_paiement_montant_charges_deduites_and_more',
                '0006_paiement_est_paiement_partiel_paiement_mois_paye_and_more',
                '0007_add_reference_paiement', '0008_paiement_numero_paiement',
                '0009_tableaubordfinancier', '0010_paiementcautionavance',
                '0011_auto_20250821_0805', '0012_remove_chargedeductible_paiements_c_statut_836dc4_idx_and_more',
                '0013_quittancepaiement', '0014_retraitbailleur_recuretrait_retraitchargedeductible_and_more',
                '0015_retraitbailleur_date_annulation_and_more', '0016_add_tableau_bord_financier',
                '0017_recapmensuel', '0018_recapitulatifmensuelbailleur_recu',
                '0019_alter_recapmensuel_options_and_more', '0002_retraitbailleur_recap_lie',
                '0020_merge_20250902_1406', '0021_auto_20250902_1617',
                '0022_auto_20250902_1620', '0023_auto_20250902_1630',
                '0024_recurecapitulatif_delete_recu_and_more', '0025_add_validation_fields',
                '0026_detailretraitunite', '0027_add_partial_payment_models',
                '0028_remove_echelonpaiement_unique_plan_echelon_and_more',
                '0029_alter_echelonpaiement_montant_and_more', '0030_change_mois_paye_to_charfield',
                '0031_add_total_charges_bailleur_column', '0046_fix_statut_field'
            ]
            
            for migration in paiements_migrations:
                try:
                    execute_from_command_line(['manage.py', 'migrate', 'paiements', migration])
                    print(f"   ‚úì {migration}")
                except Exception as e:
                    print(f"   ‚ö† {migration} ignor√©e: {e}")
        
        print("\n‚úÖ MIGRATION TERMIN√âE AVEC SUCC√àS!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur migration: {e}")
        return False

def create_initial_data():
    """Cr√©e les donn√©es initiales essentielles"""
    print("\nCR√âATION DES DONN√âES INITIALES")
    print("=" * 50)
    
    try:
        from utilisateurs.models import GroupeTravail
        from proprietes.models import TypeBien
        from core.models import Devise, ConfigurationEntreprise
        from django.contrib.auth import get_user_model
        from django.contrib.auth.models import Group

        print("Cr√©ation des groupes de travail...")
        groupes = ["ADMINISTRATION", "CAISSE", "CONTROLES", "PRIVILEGE"]
        for nom_groupe in groupes:
            if not GroupeTravail.objects.filter(nom=nom_groupe).exists():
                GroupeTravail.objects.create(nom=nom_groupe)
                print(f"‚úÖ GroupeTravail cr√©√©: {nom_groupe}")
            else:
                print(f"‚ÑπÔ∏è GroupeTravail {nom_groupe} existe d√©j√†")

        print("Cr√©ation des types de biens...")
        types_biens = ["Appartement", "Maison", "Studio", "T1", "T2", "T3", "T4", "T5+", "Bureau", "Local commercial", "Entrep√¥t", "Parking", "Cave", "Grenier", "Terrain", "Immeuble", "R√©sidence", "Villa", "Duplex", "Loft"]
        for nom_type in types_biens:
            if not TypeBien.objects.filter(nom=nom_type).exists():
                TypeBien.objects.create(nom=nom_type)
                print(f"‚úÖ TypeBien cr√©√©: {nom_type}")
            else:
                print(f"‚ÑπÔ∏è TypeBien {nom_type} existe d√©j√†")

        print("Cr√©ation des devises...")
        try:
            if not Devise.objects.filter(code="XOF").exists():
                Devise.objects.create(nom="Franc CFA", code="XOF", symbole="CFA", taux_change=1.0, actif=True)
                print("‚úÖ Devise XOF cr√©√©e")
            else:
                print("‚ÑπÔ∏è Devise XOF existe d√©j√†")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur cr√©ation devises: {e}")

        print("Cr√©ation de la configuration entreprise...")
        try:
            if not ConfigurationEntreprise.objects.exists():
                # Cr√©er une instance minimale
                config = ConfigurationEntreprise.objects.create(
                    nom_entreprise="Ma Soci√©t√© Immobili√®re",
                    email_contact="contact@example.com",
                    telephone_contact="+22500000000",
                    adresse_siege="Abidjan, C√¥te d'Ivoire",
                    code_postal="00000",
                    ville="Abidjan",
                    pays="C√¥te d'Ivoire",
                    registre_commerce="RC-XXXX",
                    numero_fiscal="SN-XXXX",
                    devise_principale=Devise.objects.get(code="XOF") # Assurez-vous que XOF existe
                )
                print("‚úÖ ConfigurationEntreprise cr√©√©e")
            else:
                print("‚ÑπÔ∏è ConfigurationEntreprise existe d√©j√†")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur cr√©ation configuration: {e}")

        print("Cr√©ation du superutilisateur...")
        User = get_user_model()
        if not User.objects.filter(username='admin').exists():
            User.objects.create_superuser('admin', 'admin@example.com', 'admin123')
            print("‚úÖ Superutilisateur cr√©√©: admin/admin123")
        else:
            print("‚ÑπÔ∏è Superutilisateur admin existe d√©j√†")

        print("‚úÖ Configuration termin√©e avec succ√®s!")
        print("‚úÖ Toutes les donn√©es des champs select sont maintenant disponibles!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation donn√©es initiales: {e}")
        return False

def create_superuser():
    """Cr√©e un superutilisateur (fonction de compatibilit√©)"""
    return create_initial_data()

def main():
    """Fonction principale"""
    print("üöÄ MIGRATION INTELLIGENTE POSTGRESQL")
    print("=" * 60)
    
    if not run_smart_migrations():
        print("‚ùå √âchec de la migration")
        sys.exit(1)
    
    if not create_superuser():
        print("‚ùå √âchec de la cr√©ation du superutilisateur")
        sys.exit(1)
    
    print("\nüéâ MIGRATION TERMIN√âE AVEC SUCC√àS!")
    print("‚úÖ Toutes les migrations appliqu√©es")
    print("‚úÖ Superutilisateur cr√©√©")
    print("\nVotre application est maintenant pr√™te sur PostgreSQL!")

if __name__ == '__main__':
    main()
