#!/usr/bin/env python
"""
Script de migration des donn√©es de SQLite vers PostgreSQL
Pour d√©ployer sur Render avec une base de donn√©es permanente
"""
import os
import sys
import django
from django.conf import settings

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gestion_immobiliere.settings_render')
django.setup()

from django.core.management import call_command
from django.db import connections
import json
from datetime import datetime


def migrate_to_postgresql():
    """Migrer les donn√©es de SQLite vers PostgreSQL"""
    print("üîÑ MIGRATION SQLITE ‚Üí POSTGRESQL - KBIS INTERNATIONAL")
    print("=" * 60)
    
    try:
        # 1. V√©rifier la connexion √† la base de donn√©es
        print("üîç V√©rification des connexions...")
        
        # SQLite (source)
        sqlite_conn = connections['default']
        if 'sqlite' not in sqlite_conn.vendor:
            print("‚ö†Ô∏è La base de donn√©es par d√©faut n'est pas SQLite")
            print("üí° Assurez-vous d'utiliser les bons settings")
        
        # PostgreSQL (destination)
        postgres_conn = connections['postgresql']
        if postgres_conn.vendor != 'postgresql':
            print("‚ùå Connexion PostgreSQL non trouv√©e")
            print("üí° V√©rifiez la configuration DATABASE_URL")
            return False
        
        print("‚úÖ Connexions v√©rifi√©es")
        
        # 2. Cr√©er les tables PostgreSQL
        print("\nüóÑÔ∏è Cr√©ation des tables PostgreSQL...")
        call_command('migrate', database='postgresql', verbosity=2)
        print("‚úÖ Tables cr√©√©es")
        
        # 3. Exporter les donn√©es SQLite
        print("\nüì§ Export des donn√©es SQLite...")
        export_data_from_sqlite()
        
        # 4. Importer les donn√©es PostgreSQL
        print("\nüì• Import des donn√©es PostgreSQL...")
        import_data_to_postgresql()
        
        # 5. V√©rifier l'int√©grit√©
        print("\nüîç V√©rification de l'int√©grit√©...")
        verify_data_integrity()
        
        print("\nüéâ MIGRATION TERMIN√âE AVEC SUCC√àS !")
        print("üåê Votre application est pr√™te pour Render")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la migration: {e}")
        return False


def export_data_from_sqlite():
    """Exporter les donn√©es de SQLite"""
    print("  üìã Export des mod√®les...")
    
    # Liste des mod√®les √† exporter
    models_to_export = [
        'utilisateurs.Utilisateur',
        'utilisateurs.GroupeTravail',
        'proprietes.TypeBien',
        'proprietes.Bailleur',
        'proprietes.Locataire',
        'proprietes.Propriete',
        'contrats.Contrat',
        'contrats.Quittance',
        'paiements.Paiement',
        'core.NiveauAcces',
        'notifications.Notification'
    ]
    
    exported_data = {}
    
    for model_path in models_to_export:
        try:
            app_label, model_name = model_path.split('.')
            from django.apps import apps
            model = apps.get_model(app_label, model_name)
            
            # Exporter les donn√©es
            data = list(model.objects.using('default').values())
            exported_data[model_path] = data
            
            print(f"    ‚úÖ {model_name}: {len(data)} enregistrements")
            
        except Exception as e:
            print(f"    ‚ö†Ô∏è Erreur pour {model_path}: {e}")
    
    # Sauvegarder dans un fichier JSON
    with open('migration_data.json', 'w', encoding='utf-8') as f:
        json.dump(exported_data, f, indent=2, default=str)
    
    print("  üíæ Donn√©es export√©es dans migration_data.json")


def import_data_to_postgresql():
    """Importer les donn√©es dans PostgreSQL"""
    print("  üì• Import des donn√©es...")
    
    try:
        with open('migration_data.json', 'r', encoding='utf-8') as f:
            exported_data = json.load(f)
        
        for model_path, data in exported_data.items():
            if not data:
                continue
                
            try:
                app_label, model_name = model_path.split('.')
                from django.apps import apps
                model = apps.get_model(app_label, model_name)
                
                # Importer les donn√©es
                for record in data:
                    # Cr√©er l'objet sans l'ID pour √©viter les conflits
                    if 'id' in record:
                        del record['id']
                    
                    model.objects.using('postgresql').create(**record)
                
                print(f"    ‚úÖ {model_name}: {len(data)} enregistrements import√©s")
                
            except Exception as e:
                print(f"    ‚ö†Ô∏è Erreur pour {model_path}: {e}")
    
    except FileNotFoundError:
        print("    ‚ùå Fichier migration_data.json non trouv√©")
    except Exception as e:
        print(f"    ‚ùå Erreur lors de l'import: {e}")


def verify_data_integrity():
    """V√©rifier l'int√©grit√© des donn√©es"""
    print("  üîç V√©rification de l'int√©grit√©...")
    
    # V√©rifier les compteurs
    models_to_check = [
        'utilisateurs.Utilisateur',
        'proprietes.Bailleur',
        'proprietes.Locataire',
        'proprietes.Propriete',
        'contrats.Contrat',
        'paiements.Paiement'
    ]
    
    for model_path in models_to_check:
        try:
            app_label, model_name = model_path.split('.')
            from django.apps import apps
            model = apps.get_model(app_label, model_name)
            
            # Compter les enregistrements
            sqlite_count = model.objects.using('default').count()
            postgres_count = model.objects.using('postgresql').count()
            
            if sqlite_count == postgres_count:
                print(f"    ‚úÖ {model_name}: {postgres_count} enregistrements")
            else:
                print(f"    ‚ö†Ô∏è {model_name}: SQLite={sqlite_count}, PostgreSQL={postgres_count}")
                
        except Exception as e:
            print(f"    ‚ùå Erreur pour {model_path}: {e}")


def cleanup_migration_files():
    """Nettoyer les fichiers de migration temporaires"""
    print("\nüßπ Nettoyage des fichiers temporaires...")
    
    files_to_remove = [
        'migration_data.json',
        'migration_log.txt'
    ]
    
    for file in files_to_remove:
        try:
            if os.path.exists(file):
                os.remove(file)
                print(f"  ‚úÖ {file} supprim√©")
        except Exception as e:
            print(f"  ‚ö†Ô∏è Erreur lors de la suppression de {file}: {e}")


if __name__ == "__main__":
    success = migrate_to_postgresql()
    
    if success:
        cleanup_migration_files()
        print("\nüéØ PROCHAINES √âTAPES:")
        print("1. V√©rifiez les donn√©es dans PostgreSQL")
        print("2. Testez l'application avec PostgreSQL")
        print("3. D√©ployez sur Render")
        print("4. Configurez les variables d'environnement")
    else:
        print("\n‚ùå MIGRATION √âCHOU√âE")
        print("üí° V√©rifiez les logs et r√©essayez")
        sys.exit(1)
