#!/usr/bin/env python
"""
Script de migration vers le plan Pro (100 GB)
Migration des donn√©es de SQLite vers PostgreSQL Pro
"""
import os
import sys
import django
from django.conf import settings

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gestion_immobiliere.settings_pro')
django.setup()

from django.core.management import call_command
from django.db import connections
import json
from datetime import datetime


def migrate_to_pro():
    """Migrer vers le plan Pro (100 GB)"""
    print("üöÄ MIGRATION VERS PLAN PRO (100 GB) - KBIS IMMOBILIER")
    print("=" * 60)
    
    try:
        # 1. V√©rifier la connexion PostgreSQL Pro
        print("üîç V√©rification de la connexion PostgreSQL Pro...")
        
        connection = connections['default']
        if connection.vendor != 'postgresql':
            print("‚ùå Connexion PostgreSQL non trouv√©e")
            print("üí° V√©rifiez la configuration DATABASE_URL")
            return False
        
        with connection.cursor() as cursor:
            cursor.execute("SELECT version();")
            version = cursor.fetchone()
            print(f"‚úÖ Connexion PostgreSQL Pro r√©ussie: {version[0]}")
        
        # 2. V√©rifier l'espace disque disponible
        print("\nüíæ V√©rification de l'espace disque...")
        check_disk_space()
        
        # 3. Cr√©er les tables PostgreSQL Pro
        print("\nüóÑÔ∏è Cr√©ation des tables PostgreSQL Pro...")
        call_command('migrate', verbosity=2)
        print("‚úÖ Tables cr√©√©es")
        
        # 4. Exporter les donn√©es SQLite
        print("\nüì§ Export des donn√©es SQLite...")
        export_data_from_sqlite()
        
        # 5. Importer les donn√©es PostgreSQL Pro
        print("\nüì• Import des donn√©es PostgreSQL Pro...")
        import_data_to_postgresql_pro()
        
        # 6. V√©rifier l'int√©grit√©
        print("\nüîç V√©rification de l'int√©grit√©...")
        verify_data_integrity()
        
        # 7. Optimiser la base de donn√©es
        print("\n‚ö° Optimisation de la base de donn√©es...")
        optimize_database()
        
        print("\nüéâ MIGRATION VERS PLAN PRO TERMIN√âE !")
        print("üåê Votre application est pr√™te avec 100 GB de stockage")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la migration: {e}")
        return False


def check_disk_space():
    """V√©rifier l'espace disque disponible"""
    try:
        connection = connections['default']
        with connection.cursor() as cursor:
            # V√©rifier l'espace disque
            cursor.execute("""
                SELECT pg_size_pretty(pg_database_size(current_database()));
            """)
            size = cursor.fetchone()
            print(f"  üìä Taille actuelle: {size[0]}")
            
            # V√©rifier l'espace disponible
            cursor.execute("""
                SELECT pg_size_pretty(
                    pg_tablespace_size('pg_default') - pg_database_size(current_database())
                );
            """)
            available = cursor.fetchone()
            print(f"  üíæ Espace disponible: {available[0]}")
            
            # V√©rifier les limites
            cursor.execute("""
                SELECT setting FROM pg_settings WHERE name = 'max_database_size';
            """)
            limit = cursor.fetchone()
            print(f"  üîí Limite de base de donn√©es: {limit[0] if limit[0] else 'Illimit√©e'}")
            
    except Exception as e:
        print(f"  ‚ö†Ô∏è Erreur lors de la v√©rification de l'espace: {e}")


def export_data_from_sqlite():
    """Exporter les donn√©es de SQLite"""
    print("  üìã Export des mod√®les...")
    
    # Liste des mod√®les √† exporter
    models_to_export = [
        'utilisateurs.Utilisateur',
        'utilisateurs.GroupeTravail',
        'proprietes.TypeBien',
        'proprietes.Bailleur',
        'proprietes.Locataire',
        'proprietes.Propriete',
        'contrats.Contrat',
        'contrats.Quittance',
        'paiements.Paiement',
        'core.NiveauAcces',
        'notifications.Notification'
    ]
    
    exported_data = {}
    
    for model_path in models_to_export:
        try:
            app_label, model_name = model_path.split('.')
            from django.apps import apps
            model = apps.get_model(app_label, model_name)
            
            # Exporter les donn√©es
            data = list(model.objects.using('default').values())
            exported_data[model_path] = data
            
            print(f"    ‚úÖ {model_name}: {len(data)} enregistrements")
            
        except Exception as e:
            print(f"    ‚ö†Ô∏è Erreur pour {model_path}: {e}")
    
    # Sauvegarder dans un fichier JSON
    with open('migration_pro_data.json', 'w', encoding='utf-8') as f:
        json.dump(exported_data, f, indent=2, default=str)
    
    print("  üíæ Donn√©es export√©es dans migration_pro_data.json")


def import_data_to_postgresql_pro():
    """Importer les donn√©es dans PostgreSQL Pro"""
    print("  üì• Import des donn√©es...")
    
    try:
        with open('migration_pro_data.json', 'r', encoding='utf-8') as f:
            exported_data = json.load(f)
        
        for model_path, data in exported_data.items():
            if not data:
                continue
                
            try:
                app_label, model_name = model_path.split('.')
                from django.apps import apps
                model = apps.get_model(app_label, model_name)
                
                # Importer les donn√©es par lots pour optimiser
                batch_size = 1000
                for i in range(0, len(data), batch_size):
                    batch = data[i:i + batch_size]
                    
                    # Cr√©er les objets sans l'ID
                    for record in batch:
                        if 'id' in record:
                            del record['id']
                    
                    # Cr√©er en lot
                    model.objects.using('default').bulk_create([
                        model(**record) for record in batch
                    ])
                
                print(f"    ‚úÖ {model_name}: {len(data)} enregistrements import√©s")
                
            except Exception as e:
                print(f"    ‚ö†Ô∏è Erreur pour {model_path}: {e}")
    
    except FileNotFoundError:
        print("    ‚ùå Fichier migration_pro_data.json non trouv√©")
    except Exception as e:
        print(f"    ‚ùå Erreur lors de l'import: {e}")


def verify_data_integrity():
    """V√©rifier l'int√©grit√© des donn√©es"""
    print("  üîç V√©rification de l'int√©grit√©...")
    
    # V√©rifier les compteurs
    models_to_check = [
        'utilisateurs.Utilisateur',
        'proprietes.Bailleur',
        'proprietes.Locataire',
        'proprietes.Propriete',
        'contrats.Contrat',
        'paiements.Paiement'
    ]
    
    for model_path in models_to_check:
        try:
            app_label, model_name = model_path.split('.')
            from django.apps import apps
            model = apps.get_model(app_label, model_name)
            
            # Compter les enregistrements
            count = model.objects.using('default').count()
            print(f"    ‚úÖ {model_name}: {count} enregistrements")
            
        except Exception as e:
            print(f"    ‚ùå Erreur pour {model_path}: {e}")


def optimize_database():
    """Optimiser la base de donn√©es"""
    print("  ‚ö° Optimisation...")
    
    try:
        connection = connections['default']
        with connection.cursor() as cursor:
            # Analyser les tables
            cursor.execute("ANALYZE;")
            print("    ‚úÖ Analyse des tables termin√©e")
            
            # V√©rifier les index
            cursor.execute("""
                SELECT schemaname, tablename, indexname, indexdef 
                FROM pg_indexes 
                WHERE schemaname = 'public'
                ORDER BY tablename, indexname;
            """)
            indexes = cursor.fetchall()
            print(f"    ‚úÖ {len(indexes)} index trouv√©s")
            
            # V√©rifier les contraintes
            cursor.execute("""
                SELECT conname, contype, confrelid::regclass
                FROM pg_constraint 
                WHERE connamespace = 'public'::regnamespace;
            """)
            constraints = cursor.fetchall()
            print(f"    ‚úÖ {len(constraints)} contraintes trouv√©es")
            
    except Exception as e:
        print(f"    ‚ö†Ô∏è Erreur lors de l'optimisation: {e}")


def cleanup_migration_files():
    """Nettoyer les fichiers de migration temporaires"""
    print("\nüßπ Nettoyage des fichiers temporaires...")
    
    files_to_remove = [
        'migration_pro_data.json',
        'migration_log.txt'
    ]
    
    for file in files_to_remove:
        try:
            if os.path.exists(file):
                os.remove(file)
                print(f"  ‚úÖ {file} supprim√©")
        except Exception as e:
            print(f"  ‚ö†Ô∏è Erreur lors de la suppression de {file}: {e}")


if __name__ == "__main__":
    success = migrate_to_pro()
    
    if success:
        cleanup_migration_files()
        print("\nüéØ PROCHAINES √âTAPES:")
        print("1. V√©rifiez les donn√©es dans PostgreSQL Pro")
        print("2. Testez l'application avec 100 GB de stockage")
        print("3. Configurez le monitoring et les alertes")
        print("4. D√©ployez sur Render avec le plan Pro")
    else:
        print("\n‚ùå MIGRATION √âCHOU√âE")
        print("üí° V√©rifiez les logs et r√©essayez")
        sys.exit(1)
