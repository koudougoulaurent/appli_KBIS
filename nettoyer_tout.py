#!/usr/bin/env python
"""
Script de nettoyage simple - Suppression de toutes les donn√©es de test
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gestion_immobiliere.settings')
django.setup()

from django.db import connection

def nettoyer_tout():
    """Supprime toutes les donn√©es de test en une seule fois"""
    
    print("üßπ NETTOYAGE COMPLET DE LA BASE DE DONN√âES")
    print("=" * 60)
    
    with connection.cursor() as cursor:
        print("\nüóÑÔ∏è Suppression de toutes les donn√©es de test...")
        
        # D√©sactiver temporairement les contraintes de cl√©s √©trang√®res
        cursor.execute("PRAGMA foreign_keys=OFF")
        
        try:
            # Supprimer toutes les donn√©es de test en une seule fois
            cursor.execute("""
                DELETE FROM proprietes_propriete 
                WHERE adresse LIKE '%test%' OR adresse LIKE '%Test%'
            """)
            count_prop = cursor.rowcount
            print(f"   ‚úÖ {count_prop} propri√©t√©s de test supprim√©es")
            
            cursor.execute("""
                DELETE FROM proprietes_bailleur 
                WHERE nom LIKE '%test%' OR nom LIKE '%Test%'
            """)
            count_bailleur = cursor.rowcount
            print(f"   ‚úÖ {count_bailleur} bailleurs de test supprim√©s")
            
            cursor.execute("""
                DELETE FROM proprietes_locataire 
                WHERE nom LIKE '%test%' OR nom LIKE '%Test%'
            """)
            count_locataire = cursor.rowcount
            print(f"   ‚úÖ {count_locataire} locataires de test supprim√©s")
            
            cursor.execute("""
                DELETE FROM utilisateurs_utilisateur 
                WHERE username LIKE 'test_%'
            """)
            count_user = cursor.rowcount
            print(f"   ‚úÖ {count_user} utilisateurs de test supprim√©s")
            
        finally:
            # R√©activer les contraintes de cl√©s √©trang√®res
            cursor.execute("PRAGMA foreign_keys=ON")
        
        print("\n‚úÖ Nettoyage termin√© !")

def verifier_nettoyage():
    """V√©rifie que le nettoyage a bien fonctionn√©"""
    
    print("\nüîç V√âRIFICATION DU NETTOYAGE")
    print("=" * 60)
    
    with connection.cursor() as cursor:
        # Compter les donn√©es restantes
        cursor.execute("SELECT COUNT(*) FROM proprietes_propriete WHERE adresse LIKE '%test%'")
        prop_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM proprietes_bailleur WHERE nom LIKE '%test%'")
        bailleur_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM proprietes_locataire WHERE nom LIKE '%test%'")
        locataire_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM utilisateurs_utilisateur WHERE username LIKE 'test_%'")
        user_count = cursor.fetchone()[0]
        
        print(f"   Propri√©t√©s de test restantes: {prop_count}")
        print(f"   Bailleurs de test restants: {bailleur_count}")
        print(f"   Locataires de test restants: {locataire_count}")
        print(f"   Utilisateurs de test restants: {user_count}")
        
        if prop_count == 0 and bailleur_count == 0 and locataire_count == 0 and user_count == 0:
            print("\n‚úÖ Toutes les donn√©es de test ont √©t√© supprim√©es !")
            return True
        else:
            print("\n‚ö†Ô∏è  Il reste encore des donn√©es de test")
            return False

def main():
    """Fonction principale"""
    
    print("üßπ NETTOYAGE COMPLET DE LA BASE DE DONN√âES")
    print("=" * 80)
    
    try:
        # 1. Nettoyage
        nettoyer_tout()
        
        # 2. V√©rification
        verifier_nettoyage()
        
        print("\nüéâ Nettoyage termin√© avec succ√®s !")
        
    except Exception as e:
        print(f"\n‚ùå ERREUR LORS DU NETTOYAGE: {e}")
        return False
    
    return True

if __name__ == "__main__":
    main()
