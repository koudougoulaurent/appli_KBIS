from django.core.management.base import BaseCommand
from django.utils import timezone
from datetime import timedelta

from notifications.models import Notification, NotificationPreference
from utilisateurs.models import Utilisateur
from contrats.models import Contrat
from paiements.models import Paiement
from proprietes.models import Propriete


class Command(BaseCommand):
    help = 'Cr√©er des notifications de test pour d√©monstration'

    def add_arguments(self, parser):
        parser.add_argument(
            '--count',
            type=int,
            default=6,
            help='Nombre de notifications √† cr√©er (d√©faut: 6)'
        )
        parser.add_argument(
            '--user',
            type=str,
            help='Nom d\'utilisateur pour recevoir les notifications (d√©faut: premier utilisateur staff)'
        )

    def handle(self, *args, **options):
        count = options['count']
        username = options.get('user')
        
        self.stdout.write(self.style.SUCCESS('üöÄ Cr√©ation de notifications de test...'))
        
        # R√©cup√©rer l'utilisateur
        if username:
            try:
                user = Utilisateur.objects.get(username=username)
            except Utilisateur.DoesNotExist:
                self.stdout.write(
                    self.style.ERROR(f'‚ùå Utilisateur "{username}" non trouv√©.')
                )
                return
        else:
            user = Utilisateur.objects.filter(is_staff=True).first()
            if not user:
                user = Utilisateur.objects.first()
            
            if not user:
                self.stdout.write(
                    self.style.ERROR('‚ùå Aucun utilisateur trouv√©. Cr√©ez d\'abord un utilisateur.')
                )
                return
        
        self.stdout.write(f'‚úÖ Utilisateur trouv√© : {user.username}')
        
        # Cr√©er les pr√©f√©rences de notification
        preferences, created = NotificationPreference.objects.get_or_create(
            user=user,
            defaults={
                'email_notifications': True,
                'browser_notifications': True,
                'payment_due_email': True,
                'payment_received_email': True,
                'contract_expiring_email': True,
                'maintenance_email': True,
                'system_alerts_email': True,
            }
        )
        
        if created:
            self.stdout.write('‚úÖ Pr√©f√©rences de notification cr√©√©es')
        else:
            self.stdout.write('‚úÖ Pr√©f√©rences de notification existantes')
        
        # R√©cup√©rer des objets existants
        contrat = Contrat.objects.first()
        paiement = Paiement.objects.first()
        propriete = Propriete.objects.first()
        
        # Types de notifications disponibles
        notification_templates = [
            {
                'type': 'payment_received',
                'title': 'Paiement re√ßu',
                'message': f'Un paiement de 150,000 F CFA a √©t√© re√ßu pour le contrat #{contrat.id if contrat else "N/A"}.',
                'priority': 'medium',
                'content_object': paiement
            },
            {
                'type': 'payment_due',
                'title': '√âch√©ance de paiement approche',
                'message': f'Le paiement du loyer pour le contrat #{contrat.id if contrat else "N/A"} arrive √† √©ch√©ance dans 5 jours.',
                'priority': 'high',
                'content_object': contrat
            },
            {
                'type': 'contract_expiring',
                'title': 'Contrat expirant',
                'message': f'Le contrat #{contrat.id if contrat else "N/A"} expire dans 15 jours. Pensez √† le renouveler.',
                'priority': 'high',
                'content_object': contrat
            },
            {
                'type': 'maintenance_request',
                'title': 'Demande de maintenance',
                'message': f'Nouvelle demande de maintenance pour la propri√©t√© {propriete.titre if propriete else "N/A"}.',
                'priority': 'medium',
                'content_object': propriete
            },
            {
                'type': 'system_alert',
                'title': 'Sauvegarde automatique',
                'message': 'La sauvegarde automatique de la base de donn√©es a √©t√© effectu√©e avec succ√®s.',
                'priority': 'low',
                'content_object': None
            },
            {
                'type': 'info',
                'title': 'Bienvenue sur la plateforme',
                'message': 'Bienvenue sur la plateforme de gestion immobili√®re ! Explorez toutes les fonctionnalit√©s disponibles.',
                'priority': 'low',
                'content_object': None
            },
            {
                'type': 'payment_overdue',
                'title': 'Paiement en retard',
                'message': f'Le paiement du loyer pour le contrat #{contrat.id if contrat else "N/A"} est en retard depuis 3 jours.',
                'priority': 'urgent',
                'content_object': contrat
            },
            {
                'type': 'maintenance_completed',
                'title': 'Maintenance termin√©e',
                'message': f'La maintenance de la propri√©t√© {propriete.titre if propriete else "N/A"} a √©t√© termin√©e avec succ√®s.',
                'priority': 'low',
                'content_object': propriete
            }
        ]
        
        notifications_created = 0
        
        # Cr√©er les notifications
        for i in range(count):
            template = notification_templates[i % len(notification_templates)]
            
            # Cr√©er la notification avec une date diff√©rente
            created_at = timezone.now() - timedelta(days=i, hours=i*2)
            
            notification = Notification.objects.create(
                recipient=user,
                type=template['type'],
                title=template['title'],
                message=template['message'],
                priority=template['priority'],
                content_object=template['content_object'],
                created_at=created_at,
                is_read=(i % 3 == 0)  # Marquer certaines comme lues
            )
            
            notifications_created += 1
            self.stdout.write(f'‚úÖ Notification cr√©√©e : {notification.title}')
        
        self.stdout.write(
            self.style.SUCCESS(f'\nüéâ {notifications_created} notifications cr√©√©es avec succ√®s !')
        )
        
        # Afficher des statistiques
        total_notifications = Notification.objects.filter(recipient=user).count()
        unread_notifications = Notification.objects.filter(recipient=user, is_read=False).count()
        high_priority_notifications = Notification.objects.filter(
            recipient=user, 
            priority__in=['high', 'urgent']
        ).count()
        
        self.stdout.write(f'\nüìä Statistiques des notifications :')
        self.stdout.write(f'   ‚Ä¢ Total : {total_notifications}')
        self.stdout.write(f'   ‚Ä¢ Non lues : {unread_notifications}')
        self.stdout.write(f'   ‚Ä¢ Priorit√© √©lev√©e : {high_priority_notifications}')
        
        self.stdout.write(f'\nüîó URLs disponibles :')
        self.stdout.write(f'   ‚Ä¢ Liste des notifications : /notifications/')
        self.stdout.write(f'   ‚Ä¢ API REST : /notifications/api/notifications/')
        self.stdout.write(f'   ‚Ä¢ Pr√©f√©rences : /notifications/preferences/')
