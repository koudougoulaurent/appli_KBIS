"""
Commande de Gestion Simple pour les Notifications
Gestion simple et efficace du syst√®me de notifications
"""
from django.core.management.base import BaseCommand, CommandError
from django.utils import timezone
from datetime import datetime, timedelta, date
import json

from notifications.services_notifications_simples import ServiceNotificationsSimples
from notifications.signals_simples import (
    verifier_retards_paiement_simple,
    verifier_contrats_expirants_simple,
    nettoyer_notifications_anciennes_simple,
    notifier_erreur_systeme_simple,
    notifier_info_systeme_simple
)
from notifications.models import Notification, NotificationPreference
from utilisateurs.models import Utilisateur


class Command(BaseCommand):
    help = 'Gestion simple et efficace du syst√®me de notifications'
    
    def add_arguments(self, parser):
        parser.add_argument(
            'action',
            type=str,
            choices=[
                'status', 'test', 'clean', 'retards', 'contrats', 'maintenance',
                'stats', 'info', 'error'
            ],
            help='Action √† effectuer'
        )
        parser.add_argument(
            '--user',
            type=str,
            help='Nom d\'utilisateur pour les actions sp√©cifiques'
        )
        parser.add_argument(
            '--type',
            type=str,
            choices=[
                'payment_received', 'payment_partial', 'payment_overdue',
                'advance_consumed', 'contract_expiring', 'retrait_created',
                'system_alert', 'info'
            ],
            help='Type de notification pour les tests'
        )
        parser.add_argument(
            '--message',
            type=str,
            help='Message personnalis√© pour les tests'
        )
        parser.add_argument(
            '--days',
            type=int,
            default=30,
            help='Nombre de jours pour le nettoyage'
        )
        parser.add_argument(
            '--force',
            action='store_true',
            help='Forcer l\'action sans confirmation'
        )
    
    def handle(self, *args, **options):
        action = options['action']
        
        try:
            if action == 'status':
                self.show_status()
            elif action == 'test':
                self.test_notification(options)
            elif action == 'clean':
                self.clean_notifications(options)
            elif action == 'retards':
                self.check_retards()
            elif action == 'contrats':
                self.check_contrats()
            elif action == 'maintenance':
                self.maintenance()
            elif action == 'stats':
                self.show_statistics(options)
            elif action == 'info':
                self.test_info_notification(options)
            elif action == 'error':
                self.test_error_notification(options)
            else:
                raise CommandError(f"Action inconnue: {action}")
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f"Erreur lors de l'ex√©cution: {str(e)}")
            )
            raise CommandError(f"√âchec de l'action {action}: {str(e)}")
    
    def show_status(self):
        """Affiche le statut du syst√®me de notifications simples"""
        self.stdout.write(self.style.SUCCESS("üîî STATUT DU SYST√àME DE NOTIFICATIONS SIMPLES"))
        self.stdout.write("=" * 60)
        
        # Statistiques g√©n√©rales
        total_notifications = Notification.objects.count()
        unread_notifications = Notification.objects.filter(is_read=False).count()
        today_notifications = Notification.objects.filter(
            created_at__date=timezone.now().date()
        ).count()
        
        self.stdout.write(f"üìä Total notifications: {total_notifications}")
        self.stdout.write(f"üî¥ Non lues: {unread_notifications}")
        self.stdout.write(f"üìÖ Aujourd'hui: {today_notifications}")
        
        # Notifications par priorit√©
        self.stdout.write("\nüìà Par priorit√©:")
        for priority in ['urgent', 'high', 'medium', 'low']:
            count = Notification.objects.filter(priority=priority, is_read=False).count()
            self.stdout.write(f"  {priority.upper()}: {count}")
        
        # Notifications par type
        self.stdout.write("\nüè∑Ô∏è Par type:")
        for type_notif in ServiceNotificationsSimples.NOTIFICATION_TYPES.keys():
            count = Notification.objects.filter(type=type_notif, is_read=False).count()
            self.stdout.write(f"  {type_notif}: {count}")
        
        # Utilisateurs avec pr√©f√©rences
        users_with_prefs = NotificationPreference.objects.count()
        total_users = Utilisateur.objects.count()
        self.stdout.write(f"\nüë• Utilisateurs avec pr√©f√©rences: {users_with_prefs}/{total_users}")
    
    def test_notification(self, options):
        """Test d'envoi de notification simple"""
        user = self.get_user(options['user'])
        type_notif = options['type'] or 'info'
        message = options['message'] or f"Test de notification simple {type_notif}"
        
        self.stdout.write(f"üß™ Test d'envoi de notification simple...")
        self.stdout.write(f"Utilisateur: {user.username}")
        self.stdout.write(f"Type: {type_notif}")
        self.stdout.write(f"Message: {message}")
        
        notification = ServiceNotificationsSimples.creer_notification_simple(
            recipient=user,
            type_notification=type_notif,
            message=message,
            force_send=True
        )
        
        if notification:
            self.stdout.write(
                self.style.SUCCESS(f"‚úÖ Notification simple cr√©√©e avec succ√®s (ID: {notification.id})")
            )
        else:
            self.stdout.write(
                self.style.ERROR("‚ùå √âchec de la cr√©ation de la notification simple")
            )
    
    def clean_notifications(self, options):
        """Nettoie les notifications anciennes de mani√®re simple"""
        days = options['days']
        force = options['force']
        
        if not force:
            confirm = input(f"Supprimer les notifications de plus de {days} jours? (y/N): ")
            if confirm.lower() != 'y':
                self.stdout.write("‚ùå Op√©ration annul√©e")
                return
        
        self.stdout.write(f"üßπ Nettoyage simple des notifications anciennes (> {days} jours)...")
        
        count = ServiceNotificationsSimples.nettoyer_notifications_anciennes_simple(days)
        
        self.stdout.write(
            self.style.SUCCESS(f"‚úÖ {count} notification(s) supprim√©e(s)")
        )
    
    def check_retards(self):
        """V√©rifie les retards de paiement de mani√®re simple"""
        self.stdout.write("üîç V√©rification simple des retards de paiement...")
        
        verifier_retards_paiement_simple()
        
        self.stdout.write(
            self.style.SUCCESS("‚úÖ V√©rification simple des retards termin√©e")
        )
    
    def check_contrats(self):
        """V√©rifie les contrats expirants de mani√®re simple"""
        self.stdout.write("üîç V√©rification simple des contrats expirants...")
        
        verifier_contrats_expirants_simple()
        
        self.stdout.write(
            self.style.SUCCESS("‚úÖ V√©rification simple des contrats termin√©e")
        )
    
    def maintenance(self):
        """Maintenance simple du syst√®me"""
        self.stdout.write("üîß Maintenance simple du syst√®me de notifications...")
        
        # Nettoyage
        self.stdout.write("  üßπ Nettoyage des notifications anciennes...")
        nettoyer_notifications_anciennes_simple()
        
        # V√©rifications
        self.stdout.write("  üîç V√©rification des retards...")
        verifier_retards_paiement_simple()
        
        self.stdout.write("  üîç V√©rification des contrats...")
        verifier_contrats_expirants_simple()
        
        self.stdout.write(
            self.style.SUCCESS("‚úÖ Maintenance simple termin√©e")
        )
    
    def show_statistics(self, options):
        """Affiche les statistiques simples"""
        user = self.get_user(options['user']) if options['user'] else None
        
        if user:
            self.stdout.write(f"üìä Statistiques simples pour {user.username}")
            stats = ServiceNotificationsSimples.get_statistiques_notifications_simple(user)
        else:
            self.stdout.write("üìä Statistiques globales simples")
            stats = {
                'total': Notification.objects.count(),
                'non_lues': Notification.objects.filter(is_read=False).count(),
                'aujourd_hui': Notification.objects.filter(
                    created_at__date=timezone.now().date()
                ).count(),
                'cette_semaine': Notification.objects.filter(
                    created_at__date__gte=timezone.now().date() - timedelta(days=7)
                ).count(),
                'par_priorite': {}
            }
            
            for priority in ['urgent', 'high', 'medium', 'low']:
                stats['par_priorite'][priority] = Notification.objects.filter(
                    priority=priority, is_read=False
                ).count()
        
        self.stdout.write("=" * 40)
        self.stdout.write(f"Total: {stats['total']}")
        self.stdout.write(f"Non lues: {stats['non_lues']}")
        self.stdout.write(f"Aujourd'hui: {stats['aujourd_hui']}")
        self.stdout.write(f"Cette semaine: {stats['cette_semaine']}")
        
        if 'par_priorite' in stats:
            self.stdout.write("\nPar priorit√©:")
            for priority, count in stats['par_priorite'].items():
                self.stdout.write(f"  {priority.upper()}: {count}")
    
    def test_info_notification(self, options):
        """Test d'envoi de notification d'information simple"""
        message = options['message'] or "Test d'information syst√®me simple"
        
        self.stdout.write("‚ÑπÔ∏è Test de notification d'information simple...")
        
        notifier_info_systeme_simple(message)
        
        self.stdout.write(
            self.style.SUCCESS("‚úÖ Notification d'information simple envoy√©e")
        )
    
    def test_error_notification(self, options):
        """Test d'envoi de notification d'erreur simple"""
        message = options['message'] or "Test d'erreur syst√®me simple"
        
        self.stdout.write("üö® Test de notification d'erreur simple...")
        
        notifier_erreur_systeme_simple(message)
        
        self.stdout.write(
            self.style.SUCCESS("‚úÖ Notification d'erreur simple envoy√©e")
        )
    
    def get_user(self, username):
        """R√©cup√®re un utilisateur par nom d'utilisateur"""
        if not username:
            # Utiliser le premier utilisateur disponible
            user = Utilisateur.objects.first()
            if not user:
                raise CommandError("Aucun utilisateur trouv√©")
            return user
        
        try:
            return Utilisateur.objects.get(username=username)
        except Utilisateur.DoesNotExist:
            raise CommandError(f"Utilisateur '{username}' non trouv√©")

