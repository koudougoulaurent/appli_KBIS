"""
Commande pour corriger les avances qui ont des mois futurs marqu√©s comme consomm√©s.
"""
from django.core.management.base import BaseCommand
from django.utils import timezone
from datetime import date
from dateutil.relativedelta import relativedelta
from paiements.models_avance import AvanceLoyer, ConsommationAvance


class Command(BaseCommand):
    help = 'Corrige les avances qui ont des mois futurs marqu√©s comme consomm√©s'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Affiche ce qui serait corrig√© sans faire les modifications',
        )

    def handle(self, *args, **options):
        dry_run = options['dry_run']
        
        if dry_run:
            self.stdout.write(self.style.WARNING('üîç Mode DRY-RUN - Aucune modification ne sera effectu√©e'))
        
        aujourd_hui = date.today()
        mois_actuel = aujourd_hui.replace(day=1)
        
        self.stdout.write(f'üìÖ Mois actuel: {mois_actuel}')
        
        # R√©cup√©rer toutes les avances actives
        avances = AvanceLoyer.objects.filter(statut='active')
        
        total_avances = avances.count()
        avances_corrigees = 0
        consommations_supprimees = 0
        
        self.stdout.write(f'üîç Analyse de {total_avances} avances actives...')
        
        for avance in avances:
            if not avance.mois_debut_couverture:
                continue
            
            # R√©cup√©rer toutes les consommations de cette avance
            consommations = ConsommationAvance.objects.filter(avance=avance).order_by('mois_consomme')
            
            consommations_futures = []
            for consommation in consommations:
                if consommation.mois_consomme >= mois_actuel:
                    consommations_futures.append(consommation)
            
            if consommations_futures:
                self.stdout.write(f'\n‚ö†Ô∏è  Avance {avance.id} (Contrat {avance.contrat.id}):')
                self.stdout.write(f'   P√©riode: {avance.mois_debut_couverture} - {avance.mois_fin_couverture}')
                self.stdout.write(f'   Mois couverts: {avance.nombre_mois_couverts}')
                
                for consommation in consommations_futures:
                    self.stdout.write(f'   ‚ùå Consommation future: {consommation.mois_consomme} (devrait √™tre supprim√©e)')
                
                if not dry_run:
                    # Supprimer les consommations futures
                    for consommation in consommations_futures:
                        consommation.delete()
                        consommations_supprimees += 1
                    
                    # Recalculer le montant restant
                    montant_consomme = sum(
                        c.montant_consomme for c in ConsommationAvance.objects.filter(avance=avance)
                    )
                    avance.montant_restant = avance.montant_avance - montant_consomme
                    avance.save()
                    
                    self.stdout.write(f'   ‚úÖ {len(consommations_futures)} consommations futures supprim√©es')
                    self.stdout.write(f'   ‚úÖ Montant restant recalcul√©: {avance.montant_restant:,.0f} F CFA')
                
                avances_corrigees += 1
        
        # R√©sum√©
        self.stdout.write(f'\nüìä R√âSUM√â:')
        self.stdout.write(f'   Avances analys√©es: {total_avances}')
        self.stdout.write(f'   Avances avec probl√®mes: {avances_corrigees}')
        
        if not dry_run:
            self.stdout.write(f'   Consommations futures supprim√©es: {consommations_supprimees}')
            self.stdout.write(self.style.SUCCESS('‚úÖ Correction termin√©e avec succ√®s'))
        else:
            self.stdout.write(self.style.WARNING('üîç Mode DRY-RUN - Aucune modification effectu√©e'))
            self.stdout.write('   Pour appliquer les corrections, relancez sans --dry-run')
