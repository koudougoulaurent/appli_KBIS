#!/usr/bin/env python
"""
Script de r√©paration automatique pour le groupe PRIVILEGE
Usage: python reparer_privilege_auto.py
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gestion_immobiliere.settings')
django.setup()

from django.contrib.auth import authenticate
from django.contrib.auth.models import Permission, Group
from django.contrib.contenttypes.models import ContentType
from utilisateurs.models import GroupeTravail, Utilisateur

def reparer_groupe_privilege():
    """R√©paration automatique du groupe PRIVILEGE"""
    print("üîß R√âPARATION AUTOMATIQUE DU GROUPE PRIVILEGE")
    print("=" * 60)
    
    try:
        # 1. Cr√©er/r√©parer le groupe Django PRIVILEGE
        print("\n1Ô∏è‚É£ R√âPARATION DU GROUPE DJANGO PRIVILEGE")
        groupe_django, created = Group.objects.get_or_create(name='PRIVILEGE')
        if created:
            print("   ‚úÖ Groupe Django PRIVILEGE cr√©√©")
        else:
            print("   ‚ÑπÔ∏è  Groupe Django PRIVILEGE existe d√©j√†")
        
        # 2. Cr√©er/r√©parer le groupe de travail PRIVILEGE
        print("\n2Ô∏è‚É£ R√âPARATION DU GROUPE DE TRAVAIL PRIVILEGE")
        groupe_travail, created = GroupeTravail.objects.get_or_create(
            nom='PRIVILEGE',
            defaults={
                'description': 'Groupe avec privil√®ges √©tendus pour la gestion compl√®te du syst√®me',
                'permissions': {
                    'modules': [
                        'proprietes',
                        'contrats', 
                        'paiements',
                        'utilisateurs',
                        'notifications',
                        'core'
                    ],
                    'actions_speciales': [
                        'suppression_complete',
                        'gestion_profils',
                        'acces_toutes_donnees',
                        'modification_systeme'
                    ]
                },
                'actif': True
            }
        )
        
        if created:
            print("   ‚úÖ Groupe de travail PRIVILEGE cr√©√©")
        else:
            print("   ‚ÑπÔ∏è  Groupe de travail PRIVILEGE existe d√©j√†")
            # Mettre √† jour les permissions si elles sont vides
            if not groupe_travail.permissions:
                groupe_travail.permissions = {
                    'modules': [
                        'proprietes',
                        'contrats', 
                        'paiements',
                        'utilisateurs',
                        'notifications',
                        'core'
                    ],
                    'actions_speciales': [
                        'suppression_complete',
                        'gestion_profils',
                        'acces_toutes_donnees',
                        'modification_systeme'
                    ]
                }
                groupe_travail.save()
                print("   ‚úÖ Permissions mises √† jour")
        
        # 3. Cr√©er/r√©parer l'utilisateur privilege1
        print("\n3Ô∏è‚É£ R√âPARATION DE L'UTILISATEUR PRIVILEGE1")
        
        try:
            utilisateur = Utilisateur.objects.get(username='privilege1')
            print("   ‚ÑπÔ∏è  Utilisateur privilege1 existe d√©j√†")
            
            # Mettre √† jour les informations
            utilisateur.is_active = True
            utilisateur.is_staff = True
            utilisateur.groupe_travail = groupe_travail
            utilisateur.set_password('test123')
            utilisateur.save()
            print("   ‚úÖ Utilisateur mis √† jour")
            
        except Utilisateur.DoesNotExist:
            print("   Cr√©ation de l'utilisateur privilege1...")
            utilisateur = Utilisateur.objects.create_user(
                username='privilege1',
                email='privilege1@gestionimmo.com',
                password='test123',
                first_name='Utilisateur',
                last_name='Privilege',
                is_staff=True,
                is_active=True,
                groupe_travail=groupe_travail,
                poste='Utilisateur Test',
                departement='Test',
                telephone='+33123456789',
                adresse='123 Rue de Test, 75001 Paris'
            )
            print("   ‚úÖ Utilisateur privilege1 cr√©√©")
        
        # 4. Ajouter l'utilisateur au groupe Django
        print("\n4Ô∏è‚É£ AJOUT AU GROUPE DJANGO")
        if groupe_django not in utilisateur.groups.all():
            utilisateur.groups.add(groupe_django)
            print("   ‚úÖ Utilisateur ajout√© au groupe Django PRIVILEGE")
        else:
            print("   ‚ÑπÔ∏è  Utilisateur d√©j√† dans le groupe Django PRIVILEGE")
        
        # 5. Test de connexion
        print("\n5Ô∏è‚É£ TEST DE CONNEXION")
        user_auth = authenticate(username='privilege1', password='test123')
        
        if user_auth:
            print("   ‚úÖ Authentification r√©ussie!")
            print("   ‚úÖ Utilisateur peut se connecter!")
            
            # V√©rifier les groupes
            groupes_django = user_auth.groups.all()
            print(f"   Groupes Django: {[g.name for g in groupes_django]}")
            
            if hasattr(user_auth, 'groupe_travail') and user_auth.groupe_travail:
                print(f"   Groupe de travail: {user_auth.groupe_travail.nom}")
                print(f"   Groupe actif: {user_auth.groupe_travail.actif}")
                
                modules = user_auth.groupe_travail.get_permissions_list()
                print(f"   Modules accessibles: {', '.join(modules)}")
            
            return True
            
        else:
            print("   ‚ùå √âchec de l'authentification")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la r√©paration: {str(e)}")
        return False

def verifier_reparation():
    """V√©rifie que la r√©paration a bien fonctionn√©"""
    print("\nüîç V√âRIFICATION DE LA R√âPARATION")
    print("=" * 40)
    
    try:
        # V√©rifier l'utilisateur
        utilisateur = Utilisateur.objects.get(username='privilege1')
        print(f"‚úÖ Utilisateur: {utilisateur.username}")
        print(f"   - Actif: {utilisateur.is_active}")
        print(f"   - Staff: {utilisateur.is_staff}")
        print(f"   - Groupe travail: {utilisateur.groupe_travail.nom if utilisateur.groupe_travail else 'Aucun'}")
        
        # V√©rifier le groupe de travail
        if utilisateur.groupe_travail:
            print(f"‚úÖ Groupe de travail: {utilisateur.groupe_travail.nom}")
            print(f"   - Actif: {utilisateur.groupe_travail.actif}")
            print(f"   - Permissions: {utilisateur.groupe_travail.permissions}")
        
        # V√©rifier les groupes Django
        groupes_django = utilisateur.groups.all()
        print(f"‚úÖ Groupes Django: {[g.name for g in groupes_django]}")
        
        # Test d'authentification final
        user_auth = authenticate(username='privilege1', password='test123')
        if user_auth:
            print("‚úÖ Authentification: SUCC√àS")
            return True
        else:
            print("‚ùå Authentification: √âCHEC")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification: {str(e)}")
        return False

def main():
    """Fonction principale"""
    print("üöÄ R√âPARATION AUTOMATIQUE DU GROUPE PRIVILEGE")
    print("=" * 60)
    
    try:
        # R√©parer le syst√®me
        reparation_ok = reparer_groupe_privilege()
        
        if reparation_ok:
            # V√©rifier la r√©paration
            verification_ok = verifier_reparation()
            
            if verification_ok:
                print(f"\nüéâ R√âPARATION R√âUSSIE!")
                print(f"   Vous pouvez maintenant vous connecter avec:")
                print(f"   - Nom d'utilisateur: privilege1")
                print(f"   - Mot de passe: test123")
                print(f"   - Groupe: PRIVILEGE")
                
                print(f"\nüìã R√âSUM√â DES CORRECTIONS:")
                print(f"   ‚úÖ Groupe Django PRIVILEGE cr√©√©/r√©par√©")
                print(f"   ‚úÖ Groupe de travail PRIVILEGE cr√©√©/r√©par√©")
                print(f"   ‚úÖ Utilisateur privilege1 cr√©√©/r√©par√©")
                print(f"   ‚úÖ Permissions configur√©es")
                print(f"   ‚úÖ Authentification test√©e")
                
            else:
                print(f"\n‚ö†Ô∏è  R√âPARATION PARTIELLE")
                print(f"   V√©rifiez les erreurs ci-dessus")
                
        else:
            print(f"\n‚ùå R√âPARATION √âCHOU√âE")
            print(f"   V√©rifiez les erreurs ci-dessus")
            
    except Exception as e:
        print(f"\nüí• ERREUR CRITIQUE: {str(e)}")
        print(f"   V√©rifiez la configuration Django")

if __name__ == '__main__':
    main()
