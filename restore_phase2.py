#!/usr/bin/env python
"""
Script de restauration √† l'√©tat Phase 2
Supprime les donn√©es de la Phase 3 (contrats et paiements) pour revenir √† un √©tat stable
"""
import os
import django
import sys

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gestion_immobiliere.settings')
django.setup()

from django.db import connection
from django.core.management import execute_from_command_line

def restore_to_phase2():
    """Restaure l'application √† l'√©tat Phase 2"""
    print("üîÑ Restauration √† l'√©tat Phase 2...")
    
    try:
        # 1. Supprimer les donn√©es de la Phase 3
        print("üìã Suppression des donn√©es Phase 3...")
        
        with connection.cursor() as cursor:
            # Supprimer les donn√©es des contrats
            cursor.execute("DELETE FROM contrats_renouvellementcontrat;")
            cursor.execute("DELETE FROM contrats_documentcontrat;")
            cursor.execute("DELETE FROM contrats_clausecontrat;")
            cursor.execute("DELETE FROM contrats_contrat;")
            cursor.execute("DELETE FROM contrats_typecontrat;")
            
            # Supprimer les donn√©es des paiements
            cursor.execute("DELETE FROM paiements_transaction;")
            cursor.execute("DELETE FROM paiements_quittanceloyer;")
            cursor.execute("DELETE FROM paiements_retrait;")
            cursor.execute("DELETE FROM paiements_frais;")
            cursor.execute("DELETE FROM paiements_paiement;")
            cursor.execute("DELETE FROM paiements_typepaiement;")
            cursor.execute("DELETE FROM paiements_comptebancaire;")
            
            print("‚úÖ Donn√©es Phase 3 supprim√©es")
        
        # 2. V√©rifier l'√©tat de la base de donn√©es
        print("üîç V√©rification de l'√©tat de la base de donn√©es...")
        
        with connection.cursor() as cursor:
            # V√©rifier les tables Phase 2 (propri√©t√©s, utilisateurs)
            cursor.execute("SELECT COUNT(*) FROM proprietes_propriete;")
            proprietes_count = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM proprietes_bailleur;")
            bailleurs_count = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM proprietes_locataire;")
            locataires_count = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM utilisateurs_utilisateur;")
            users_count = cursor.fetchone()[0]
            
            print(f"‚úÖ Phase 2 - Propri√©t√©s: {proprietes_count}")
            print(f"‚úÖ Phase 2 - Bailleurs: {bailleurs_count}")
            print(f"‚úÖ Phase 2 - Locataires: {locataires_count}")
            print(f"‚úÖ Phase 2 - Utilisateurs: {users_count}")
        
        # 3. V√©rifier que les tables Phase 3 sont vides
        print("üîç V√©rification des tables Phase 3...")
        
        with connection.cursor() as cursor:
            cursor.execute("SELECT COUNT(*) FROM contrats_contrat;")
            contrats_count = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM paiements_paiement;")
            paiements_count = cursor.fetchone()[0]
            
            print(f"‚úÖ Phase 3 - Contrats: {contrats_count} (vide)")
            print(f"‚úÖ Phase 3 - Paiements: {paiements_count} (vide)")
        
        print("\nüéâ Restauration Phase 2 termin√©e avec succ√®s !")
        print("\nüìã √âtat actuel :")
        print("- ‚úÖ Phase 1 : Fondations (Django, auth, admin)")
        print("- ‚úÖ Phase 2 : Gestion des propri√©t√©s (propri√©t√©s, bailleurs, locataires)")
        print("- üîÑ Phase 3 : Contrats et paiements (supprim√©s)")
        print("- üìã Phase 4 : Interface utilisateur (√† d√©velopper)")
        
        print("\nüåê Acc√®s :")
        print("- Dashboard : http://127.0.0.1:8000/")
        print("- Admin : http://127.0.0.1:8000/admin/")
        print("- Login : http://127.0.0.1:8000/accounts/login/")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la restauration : {e}")
        return False

def check_phase2_functionality():
    """V√©rifie que les fonctionnalit√©s Phase 2 fonctionnent"""
    print("\nüß™ Test des fonctionnalit√©s Phase 2...")
    
    try:
        from proprietes.models import Propriete, Bailleur, Locataire
        from utilisateurs.models import Utilisateur
        
        # Test des mod√®les Phase 2
        proprietes = Propriete.objects.all()
        bailleurs = Bailleur.objects.all()
        locataires = Locataire.objects.all()
        users = Utilisateur.objects.all()
        
        print(f"‚úÖ Mod√®les Phase 2 accessibles")
        print(f"   - Propri√©t√©s : {proprietes.count()}")
        print(f"   - Bailleurs : {bailleurs.count()}")
        print(f"   - Locataires : {locataires.count()}")
        print(f"   - Utilisateurs : {users.count()}")
        
        # Test de l'admin
        from django.contrib import admin
        registered_models = list(admin.site._registry.keys())
        phase2_models = [m for m in registered_models if 'proprietes' in str(m) or 'utilisateurs' in str(m)]
        
        print(f"‚úÖ Admin Phase 2 : {len(phase2_models)} mod√®les enregistr√©s")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test Phase 2 : {e}")
        return False

if __name__ == '__main__':
    print("üè¢ RESTAURATION GESTION IMMOBILI√àRE - PHASE 2")
    print("=" * 50)
    
    success = restore_to_phase2()
    
    if success:
        check_phase2_functionality()
        print("\n‚ú® L'application est maintenant restaur√©e √† l'√©tat Phase 2 !")
        print("Vous pouvez continuer le d√©veloppement √† partir de cet √©tat stable.")
    else:
        print("\n‚ùå La restauration a √©chou√©. V√©rifiez les erreurs ci-dessus.")
        sys.exit(1) 