#!/usr/bin/env python
"""
Script pour sauvegarder l'√©tat final du projet avec la personnalisation des re√ßus
"""

import os
import sys
import shutil
import json
import zipfile
from datetime import datetime
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gestion_immobiliere.settings')
django.setup()

from core.models import ConfigurationEntreprise, TemplateRecu
from paiements.models import Paiement, Recu
from proprietes.models import Propriete, Locataire, Bailleur
from contrats.models import Contrat
from utilisateurs.models import Utilisateur

def sauvegarder_etat12():
    """Sauvegarde l'√©tat final avec la personnalisation des re√ßus."""
    
    print("üé® SAUVEGARDE √âTAT 12 - PERSONNALISATION DES RE√áUS")
    print("=" * 80)
    
    # Cr√©er le r√©pertoire de sauvegarde
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_dir = f"backups/etat12_personnalisation_recus_{timestamp}"
    os.makedirs(backup_dir, exist_ok=True)
    
    print(f"üìÅ Cr√©ation du r√©pertoire de sauvegarde : {backup_dir}")
    
    # Copier la base de donn√©es
    if os.path.exists('db.sqlite3'):
        shutil.copy2('db.sqlite3', os.path.join(backup_dir, 'db.sqlite3'))
        print("‚úÖ Base de donn√©es copi√©e")
    
    # Copier les fichiers de configuration
    config_files = [
        'manage.py',
        'requirements.txt',
        'README.md',
        'gestion_immobiliere/settings.py',
        'gestion_immobiliere/urls.py',
    ]
    
    for file_path in config_files:
        if os.path.exists(file_path):
            dest_path = os.path.join(backup_dir, file_path)
            os.makedirs(os.path.dirname(dest_path), exist_ok=True)
            shutil.copy2(file_path, dest_path)
            print(f"‚úÖ {file_path} copi√©")
    
    # Copier les applications
    apps = ['core', 'paiements', 'proprietes', 'contrats', 'utilisateurs', 'notifications']
    
    for app in apps:
        if os.path.exists(app):
            dest_path = os.path.join(backup_dir, app)
            shutil.copytree(app, dest_path, dirs_exist_ok=True)
            print(f"‚úÖ Application {app} copi√©e")
    
    # Copier les templates
    if os.path.exists('templates'):
        dest_path = os.path.join(backup_dir, 'templates')
        shutil.copytree('templates', dest_path, dirs_exist_ok=True)
        print("‚úÖ Templates copi√©s")
    
    # Copier les fichiers statiques
    if os.path.exists('static'):
        dest_path = os.path.join(backup_dir, 'static')
        shutil.copytree('static', dest_path, dirs_exist_ok=True)
        print("‚úÖ Fichiers statiques copi√©s")
    
    if os.path.exists('staticfiles'):
        dest_path = os.path.join(backup_dir, 'staticfiles')
        shutil.copytree('staticfiles', dest_path, dirs_exist_ok=True)
        print("‚úÖ Fichiers staticfiles copi√©s")
    
    # Copier les m√©dias (logos, etc.)
    if os.path.exists('media'):
        dest_path = os.path.join(backup_dir, 'media')
        shutil.copytree('media', dest_path, dirs_exist_ok=True)
        print("‚úÖ Fichiers m√©dias copi√©s")
    
    # Collecter les statistiques
    print("\nüìä Collecte des statistiques...")
    
    stats = {
        'timestamp': timestamp,
        'etat': 'etat12_personnalisation_recus',
        'description': '√âtat final avec personnalisation compl√®te des re√ßus',
        
        # Statistiques g√©n√©rales
        'paiements': {
            'total': Paiement.objects.count(),
            'valides': Paiement.objects.filter(statut='valide').count(),
            'en_attente': Paiement.objects.filter(statut='en_attente').count(),
            'refuses': Paiement.objects.filter(statut='refuse').count(),
        },
        
        'recus': {
            'total': Recu.objects.count(),
            'valides': Recu.objects.filter(valide=True).count(),
            'imprimes': Recu.objects.filter(imprime=True).count(),
            'envoyes_email': Recu.objects.filter(envoye_email=True).count(),
        },
        
        'proprietes': {
            'total': Propriete.objects.count(),
            'louees': Propriete.objects.filter(disponible=False).count(),
            'disponibles': Propriete.objects.filter(disponible=True).count(),
        },
        
        'utilisateurs': {
            'total': Utilisateur.objects.count(),
            'actifs': Utilisateur.objects.filter(is_active=True).count(),
        },
        
        'contrats': {
            'total': Contrat.objects.count(),
            'actifs': Contrat.objects.filter(est_actif=True).count(),
        },
        
        'locataires': {
            'total': Locataire.objects.count(),
            'actifs': Locataire.objects.filter(est_actif=True).count(),
        },
        
        'bailleurs': {
            'total': Bailleur.objects.count(),
            'actifs': Bailleur.objects.filter(est_actif=True).count(),
        },
        
        # Configuration entreprise
        'configuration_entreprise': {
            'existe': ConfigurationEntreprise.objects.filter(active=True).exists(),
            'nom': ConfigurationEntreprise.get_configuration_active().nom_entreprise if ConfigurationEntreprise.objects.filter(active=True).exists() else None,
            'logo': ConfigurationEntreprise.get_configuration_active().logo.name if ConfigurationEntreprise.objects.filter(active=True).exists() and ConfigurationEntreprise.get_configuration_active().logo else None,
        },
        
        # Templates de re√ßus
        'templates_recus': {
            'total': TemplateRecu.objects.count(),
            'actifs': TemplateRecu.objects.filter(actif=True).count(),
            'par_defaut': TemplateRecu.objects.filter(par_defaut=True).count(),
            'listes': list(TemplateRecu.objects.values_list('nom', flat=True)),
        },
        
        # Fonctionnalit√©s impl√©ment√©es
        'fonctionnalites': [
            'Configuration compl√®te de l\'entreprise',
            'Gestion des logos et informations de contact',
            'Personnalisation des couleurs et polices',
            'Gestion des informations l√©gales (SIRET, TVA, RCS)',
            'Gestion des informations bancaires (IBAN, BIC)',
            'Templates de re√ßus personnalisables',
            'G√©n√©ration PDF avec ReportLab personnalis√©',
            'Interface de configuration intuitive',
            'Gestion des templates avec aper√ßu',
            'Validation des donn√©es et s√©curit√©',
            'API de configuration',
            'Tests complets de personnalisation',
        ],
        
        # Fichiers g√©n√©r√©s
        'fichiers_generes': [
            'core/models.py - Mod√®les ConfigurationEntreprise et TemplateRecu',
            'core/views.py - Vues de configuration et gestion des templates',
            'core/urls.py - URLs pour la configuration',
            'templates/core/configuration_entreprise.html - Interface de configuration',
            'templates/core/gestion_templates.html - Interface de gestion des templates',
            'paiements/views.py - Fonction PDF personnalis√©e',
            'initialiser_configuration_entreprise.py - Script d\'initialisation',
            'test_personnalisation_recus.py - Script de test complet',
            'PERSONNALISATION_RECUS_ENTREPRISE.md - Documentation compl√®te',
        ],
    }
    
    # Sauvegarder les statistiques
    stats_file = os.path.join(backup_dir, 'etat12_stats.json')
    with open(stats_file, 'w', encoding='utf-8') as f:
        json.dump(stats, f, indent=2, ensure_ascii=False)
    print("‚úÖ Statistiques sauvegard√©es")
    
    # Cr√©er le fichier README
    readme_content = f"""# üé® √âTAT 12 - PERSONNALISATION DES RE√áUS

## üìã Description

Cette sauvegarde repr√©sente l'√©tat final du projet avec le syst√®me complet de personnalisation des re√ßus impl√©ment√©.

## üóìÔ∏è Date de sauvegarde

**{datetime.now().strftime('%d/%m/%Y √† %H:%M:%S')}**

## üéØ Fonctionnalit√©s impl√©ment√©es

### ‚úÖ Configuration de l'entreprise
- Mod√®le `ConfigurationEntreprise` complet
- Gestion du logo et informations de contact
- Personnalisation des couleurs et polices
- Informations l√©gales (SIRET, TVA, RCS)
- Informations bancaires (IBAN, BIC)
- Options d'affichage configurables
- Textes personnalis√©s (pied de page, conditions)

### ‚úÖ Templates de re√ßus
- Mod√®le `TemplateRecu` pour les mod√®les personnalis√©s
- 4 templates par d√©faut cr√©√©s (Standard, Professionnel, Simplifi√©, Luxe)
- Gestion des couleurs et polices par template
- Options d'affichage par template
- Interface de gestion compl√®te

### ‚úÖ G√©n√©ration PDF personnalis√©e
- Fonction `generer_pdf_reportlab()` refactoris√©e
- Utilisation de la configuration de l'entreprise
- Logo et informations personnalis√©es
- Couleurs et polices configurables
- Informations l√©gales conditionnelles
- Mapping automatique des polices ReportLab

### ‚úÖ Interface utilisateur
- Page de configuration compl√®te (`/core/configuration/`)
- Gestion des templates (`/core/templates/`)
- Aper√ßu en temps r√©el des modifications
- Upload et pr√©visualisation du logo
- S√©lecteurs de couleurs et polices
- Options d'affichage configurables

### ‚úÖ API et fonctionnalit√©s avanc√©es
- API de configuration (`/core/api/configuration/`)
- Validation des donn√©es (couleurs, fichiers)
- Gestion d'erreurs robuste
- Permissions administrateur
- Tests complets automatis√©s

## üìä Statistiques

### Donn√©es g√©n√©rales
- **Paiements** : {stats['paiements']['total']} (dont {stats['paiements']['valides']} valid√©s)
- **Re√ßus** : {stats['recus']['total']} (dont {stats['recus']['valides']} valid√©s)
- **Propri√©t√©s** : {stats['proprietes']['total']} (dont {stats['proprietes']['louees']} lou√©es)
- **Utilisateurs** : {stats['utilisateurs']['total']} (dont {stats['utilisateurs']['actifs']} actifs)
- **Contrats** : {stats['contrats']['total']} (dont {stats['contrats']['actifs']} actifs)
- **Locataires** : {stats['locataires']['total']} (dont {stats['locataires']['actifs']} actifs)
- **Bailleurs** : {stats['bailleurs']['total']} (dont {stats['bailleurs']['actifs']} actifs)

### Configuration entreprise
- **Configuration active** : {'Oui' if stats['configuration_entreprise']['existe'] else 'Non'}
- **Nom entreprise** : {stats['configuration_entreprise']['nom'] or 'Non d√©fini'}
- **Logo** : {'Pr√©sent' if stats['configuration_entreprise']['logo'] else 'Non d√©fini'}

### Templates de re√ßus
- **Total templates** : {stats['templates_recus']['total']}
- **Templates actifs** : {stats['templates_recus']['actifs']}
- **Template par d√©faut** : {stats['templates_recus']['par_defaut']}
- **Templates disponibles** : {', '.join(stats['templates_recus']['listes'])}

## üöÄ Installation et utilisation

### 1. Restaurer la sauvegarde
```bash
# Extraire l'archive
unzip etat12_personnalisation_recus_{timestamp}.zip

# Installer les d√©pendances
pip install -r requirements.txt

# Appliquer les migrations
python manage.py migrate

# Cr√©er un superutilisateur
python manage.py createsuperuser
```

### 2. Initialiser la configuration
```bash
python initialiser_configuration_entreprise.py
```

### 3. Tester la personnalisation
```bash
python test_personnalisation_recus.py
```

### 4. Acc√©der aux interfaces
- **Configuration entreprise** : http://localhost:8000/core/configuration/
- **Gestion des templates** : http://localhost:8000/core/templates/
- **Administration** : http://localhost:8000/admin/

## üìÅ Structure des fichiers

```
etat12_personnalisation_recus_{timestamp}/
‚îú‚îÄ‚îÄ core/                    # Application de configuration
‚îÇ   ‚îú‚îÄ‚îÄ models.py           # Mod√®les ConfigurationEntreprise et TemplateRecu
‚îÇ   ‚îú‚îÄ‚îÄ views.py            # Vues de configuration
‚îÇ   ‚îú‚îÄ‚îÄ urls.py             # URLs de configuration
‚îÇ   ‚îî‚îÄ‚îÄ templates/          # Templates de configuration
‚îú‚îÄ‚îÄ paiements/              # Application des paiements
‚îÇ   ‚îú‚îÄ‚îÄ views.py            # Fonction PDF personnalis√©e
‚îÇ   ‚îî‚îÄ‚îÄ models.py           # Mod√®les de paiements et re√ßus
‚îú‚îÄ‚îÄ templates/              # Templates HTML
‚îÇ   ‚îî‚îÄ‚îÄ core/               # Templates de configuration
‚îú‚îÄ‚îÄ static/                 # Fichiers statiques
‚îú‚îÄ‚îÄ media/                  # Fichiers m√©dias (logos)
‚îú‚îÄ‚îÄ scripts/                # Scripts utilitaires
‚îÇ   ‚îú‚îÄ‚îÄ initialiser_configuration_entreprise.py
‚îÇ   ‚îî‚îÄ‚îÄ test_personnalisation_recus.py
‚îú‚îÄ‚îÄ db.sqlite3              # Base de donn√©es
‚îú‚îÄ‚îÄ etat12_stats.json       # Statistiques d√©taill√©es
‚îî‚îÄ‚îÄ README.md               # Ce fichier
```

## üéâ R√©sultats

Le syst√®me de personnalisation des re√ßus est maintenant **compl√®tement op√©rationnel** et permet aux entreprises de :

- ‚úÖ Personnaliser leur identit√© visuelle sur tous les re√ßus
- ‚úÖ Ajouter leur logo et informations de contact
- ‚úÖ Choisir leurs couleurs et polices pr√©f√©r√©es
- ‚úÖ G√©rer leurs informations l√©gales et bancaires
- ‚úÖ Cr√©er des templates personnalis√©s pour diff√©rents usages
- ‚úÖ Modifier et adapter les re√ßus selon leurs besoins

**üéØ Objectif atteint : Les re√ßus peuvent maintenant √™tre modifi√©s et personnalis√©s avec les informations et le logo de l'entreprise !**

---

*Sauvegarde g√©n√©r√©e le {datetime.now().strftime('%d/%m/%Y √† %H:%M:%S')}*
"""
    
    readme_file = os.path.join(backup_dir, 'README.md')
    with open(readme_file, 'w', encoding='utf-8') as f:
        f.write(readme_content)
    print("‚úÖ README cr√©√©")
    
    # Cr√©er l'archive ZIP
    zip_filename = f"backups/etat12_personnalisation_recus_{timestamp}.zip"
    with zipfile.ZipFile(zip_filename, 'w', zipfile.ZIP_DEFLATED) as zipf:
        for root, dirs, files in os.walk(backup_dir):
            for file in files:
                file_path = os.path.join(root, file)
                arcname = os.path.relpath(file_path, backup_dir)
                zipf.write(file_path, arcname)
    
    print(f"‚úÖ Archive cr√©√©e : {zip_filename}")
    
    # Nettoyer le r√©pertoire temporaire
    shutil.rmtree(backup_dir)
    print("‚úÖ R√©pertoire temporaire nettoy√©")
    
    # Afficher le r√©sum√©
    print("\n" + "=" * 80)
    print("üéâ SAUVEGARDE √âTAT 12 TERMIN√âE AVEC SUCC√àS !")
    print("=" * 80)
    print(f"üìÅ Archive : {zip_filename}")
    print(f"üìä Statistiques : {stats['paiements']['total']} paiements, {stats['recus']['total']} re√ßus")
    print(f"üè¢ Configuration : {'Active' if stats['configuration_entreprise']['existe'] else 'Non configur√©e'}")
    print(f"üìÑ Templates : {stats['templates_recus']['total']} templates cr√©√©s")
    print(f"‚úÖ Fonctionnalit√©s : {len(stats['fonctionnalites'])} fonctionnalit√©s impl√©ment√©es")
    
    print(f"\nüöÄ Le syst√®me de personnalisation des re√ßus est maintenant op√©rationnel !")
    print(f"   üìã Acc√©dez √† la configuration : /core/configuration/")
    print(f"   üìÑ G√©rez les templates : /core/templates/")
    print(f"   üß™ Testez la personnalisation : python test_personnalisation_recus.py")

if __name__ == "__main__":
    sauvegarder_etat12() 