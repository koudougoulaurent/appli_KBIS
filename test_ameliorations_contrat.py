#!/usr/bin/env python
"""
Script de test pour v√©rifier les am√©liorations du formulaire de contrat :
1. Remplissage automatique du loyer √† partir de la propri√©t√©
2. Champs optionnels pour charges mensuelles et d√©p√¥t de garantie
"""

import os
import sys
import django
from django.test import TestCase, Client
from django.urls import reverse
from django.contrib.auth import get_user_model

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gestion_immobiliere.settings')
django.setup()

from contrats.models import Contrat
from proprietes.models import Propriete, Bailleur, Locataire, TypeBien

def test_ameliorations_contrat():
    """Test des am√©liorations du formulaire de contrat"""
    
    print("üß™ Test des am√©liorations du formulaire de contrat")
    print("=" * 60)
    
    try:
        # V√©rifier que le mod√®le Contrat a les bonnes modifications
        print("\n1. V√©rification du mod√®le Contrat...")
        
        # V√©rifier que le champ loyer_mensuel est optionnel
        loyer_field = Contrat._meta.get_field('loyer_mensuel')
        if loyer_field.blank:
            print("   ‚úÖ Champ loyer_mensuel rendu optionnel (blank=True)")
        else:
            print("   ‚ùå Champ loyer_mensuel n'est pas optionnel")
        
        # V√©rifier que les champs charges_mensuelles et depot_garantie sont optionnels
        charges_field = Contrat._meta.get_field('charges_mensuelles')
        depot_field = Contrat._meta.get_field('depot_garantie')
        
        if charges_field.blank and charges_field.null:
            print("   ‚úÖ Champ charges_mensuelles rendu optionnel (blank=True, null=True)")
        else:
            print("   ‚ùå Champ charges_mensuelles n'est pas optionnel")
            
        if depot_field.blank and depot_field.null:
            print("   ‚úÖ Champ depot_garantie rendu optionnel (blank=True, null=True)")
        else:
            print("   ‚ùå Champ depot_garantie n'est pas optionnel")
        
        # V√©rifier que le mod√®le Propriete a le champ loyer_actuel
        print("\n2. V√©rification du mod√®le Propriete...")
        loyer_actuel_field = Propriete._meta.get_field('loyer_actuel')
        if loyer_actuel_field:
            print("   ‚úÖ Champ loyer_actuel existe dans Propriete")
        else:
            print("   ‚ùå Champ loyer_actuel n'existe pas dans Propriete")
        
        # V√©rifier que l'API des propri√©t√©s est accessible
        print("\n3. V√©rification de l'API des propri√©t√©s...")
        try:
            from proprietes.api_views import ProprieteViewSet
            print("   ‚úÖ ProprieteViewSet existe")
        except ImportError as e:
            print(f"   ‚ùå Erreur d'import ProprieteViewSet: {e}")
        
        # V√©rifier que le formulaire ContratForm a les bonnes modifications
        print("\n4. V√©rification du formulaire ContratForm...")
        try:
            from contrats.forms import ContratForm
            form = ContratForm()
            
            # V√©rifier que les champs sont optionnels
            if not form.fields['charges_mensuelles'].required:
                print("   ‚úÖ Champ charges_mensuelles rendu optionnel dans le formulaire")
            else:
                print("   ‚ùå Champ charges_mensuelles toujours requis dans le formulaire")
                
            if not form.fields['depot_garantie'].required:
                print("   ‚úÖ Champ depot_garantie rendu optionnel dans le formulaire")
            else:
                print("   ‚ùå Champ depot_garantie toujours requis dans le formulaire")
            
            # V√©rifier que le champ loyer_mensuel est en lecture seule
            loyer_widget = form.fields['loyer_mensuel'].widget
            if hasattr(loyer_widget, 'attrs') and loyer_widget.attrs.get('readonly'):
                print("   ‚úÖ Champ loyer_mensuel configur√© en lecture seule")
            else:
                print("   ‚ùå Champ loyer_mensuel n'est pas en lecture seule")
                
        except ImportError as e:
            print(f"   ‚ùå Erreur d'import ContratForm: {e}")
        
        print("\nüéâ Test des am√©liorations termin√© avec succ√®s !")
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors du test: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    test_ameliorations_contrat()
