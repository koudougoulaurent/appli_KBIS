#!/usr/bin/env python
"""
Script de test pour v√©rifier toutes les am√©liorations du formulaire de contrat :
1. Remplissage automatique du loyer
2. Champs optionnels
3. Nouveau nom du champ "D√©p√¥t de garantie ou Caution"
4. Messages d'erreur d√©taill√©s
5. Sauvegarde en base de donn√©es
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gestion_immobiliere.settings')
django.setup()

from contrats.forms import ContratForm
from proprietes.models import Propriete
from contrats.models import Contrat

def test_ameliorations_finales():
    """Test de toutes les am√©liorations du formulaire de contrat"""
    
    print("üß™ Test de toutes les am√©liorations du formulaire de contrat")
    print("=" * 70)
    
    try:
        # 1. V√©rifier le mod√®le Contrat
        print("\n1. V√©rification du mod√®le Contrat...")
        
        # V√©rifier le nom du champ depot_garantie
        depot_field = Contrat._meta.get_field('depot_garantie')
        if 'Caution' in depot_field.verbose_name:
            print("   ‚úÖ Champ depot_garantie renomm√© en 'D√©p√¥t de garantie ou Caution'")
        else:
            print(f"   ‚ùå Champ depot_garantie n'a pas le bon nom: {depot_field.verbose_name}")
        
        # V√©rifier que les champs sont optionnels
        if depot_field.blank and depot_field.null:
            print("   ‚úÖ Champ depot_garantie rendu optionnel (blank=True, null=True)")
        else:
            print("   ‚ùå Champ depot_garantie n'est pas optionnel")
        
        # 2. V√©rifier le formulaire
        print("\n2. V√©rification du formulaire ContratForm...")
        form = ContratForm()
        
        # V√©rifier que les champs sont optionnels
        if not form.fields['charges_mensuelles'].required:
            print("   ‚úÖ Champ charges_mensuelles rendu optionnel")
        else:
            print("   ‚ùå Champ charges_mensuelles toujours requis")
            
        if not form.fields['depot_garantie'].required:
            print("   ‚úÖ Champ depot_garantie rendu optionnel")
        else:
            print("   ‚ùå Champ depot_garantie toujours requis")
        
        # V√©rifier que le champ loyer est en lecture seule
        loyer_widget = form.fields['loyer_mensuel'].widget
        if hasattr(loyer_widget, 'attrs') and loyer_widget.attrs.get('readonly'):
            print("   ‚úÖ Champ loyer_mensuel configur√© en lecture seule")
        else:
            print("   ‚ùå Champ loyer_mensuel n'est pas en lecture seule")
        
        # 3. V√©rifier les donn√©es des propri√©t√©s
        print("\n3. V√©rification des donn√©es des propri√©t√©s...")
        if hasattr(form, 'proprietes_data'):
            print(f"   ‚úÖ Donn√©es des propri√©t√©s disponibles : {len(form.proprietes_data)} propri√©t√©s")
            
            for prop_id, prop_data in form.proprietes_data.items():
                print(f"      - ID {prop_id}: {prop_data['titre']} - Loyer: {prop_data['loyer']} XOF")
        else:
            print("   ‚ùå Donn√©es des propri√©t√©s non disponibles")
        
        # 4. V√©rifier la m√©thode get_errors_summary
        print("\n4. V√©rification de la m√©thode get_errors_summary...")
        if hasattr(form, 'get_errors_summary'):
            print("   ‚úÖ M√©thode get_errors_summary disponible")
            
            # Tester la m√©thode directement
            error_summary = form.get_errors_summary()
            if error_summary == "":  # Pas d'erreurs sur un formulaire vide
                print("   ‚úÖ R√©sum√© des erreurs fonctionne (aucune erreur sur formulaire vide)")
            else:
                print(f"   ‚úÖ R√©sum√© des erreurs g√©n√©r√©: {error_summary}")
        else:
            print("   ‚ùå M√©thode get_errors_summary non disponible")
        
        # 5. V√©rifier qu'il y a des propri√©t√©s disponibles
        print("\n5. V√©rification des propri√©t√©s disponibles...")
        proprietes_disponibles = Propriete.objects.filter(disponible=True)
        print(f"   ‚úÖ {proprietes_disponibles.count()} propri√©t√©s disponibles")
        
        if proprietes_disponibles.exists():
            for prop in proprietes_disponibles:
                print(f"      - {prop.titre} (ID: {prop.id}) - Loyer: {prop.loyer_actuel} XOF")
        
        # 6. Test de validation et sauvegarde
        print("\n6. Test de validation et sauvegarde...")
        
        # Cr√©er des donn√©es de test
        test_data = {
            'numero_contrat': 'TEST-CT-001',
            'propriete': proprietes_disponibles.first().id,
            'locataire': 1,  # Assurez-vous qu'il y a un locataire
            'date_debut': '2025-09-01',
            'date_fin': '2026-08-31',
            'date_signature': '2025-08-25',
            'loyer_mensuel': '75000.00',
            'charges_mensuelles': '',  # Champ optionnel vide
            'depot_garantie': '',      # Champ optionnel vide
            'avance_loyer': '0.00',
            'jour_paiement': 1,
            'mode_paiement': 'virement',
            'notes': 'Test d\'am√©lioration'
        }
        
        # Tester la validation
        form_test = ContratForm(data=test_data)
        if form_test.is_valid():
            print("   ‚úÖ Formulaire valide avec champs optionnels vides")
            
            # Tester la sauvegarde
            try:
                contrat = form_test.save(commit=False)
                print("   ‚úÖ Formulaire pr√™t pour sauvegarde")
                print(f"      - Num√©ro: {contrat.numero_contrat}")
                print(f"      - Propri√©t√©: {contrat.propriete.titre}")
                print(f"      - Loyer: {contrat.loyer_mensuel}")
                print(f"      - Charges: {contrat.charges_mensuelles or 'Non d√©finies'}")
                print(f"      - D√©p√¥t: {contrat.depot_garantie or 'Non d√©fini'}")
                
            except Exception as e:
                print(f"   ‚ùå Erreur lors de la pr√©paration de la sauvegarde: {e}")
        else:
            print("   ‚ùå Formulaire invalide:")
            error_summary = form_test.get_errors_summary()
            if error_summary:
                print(f"      {error_summary}")
        
        print("\nüéâ Test de toutes les am√©liorations termin√© avec succ√®s !")
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors du test: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    test_ameliorations_finales()
