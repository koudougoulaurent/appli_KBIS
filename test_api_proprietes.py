#!/usr/bin/env python
"""
Script de test pour v√©rifier l'API des propri√©t√©s et le remplissage automatique du loyer
"""

import os
import sys
import django
import requests
import json

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gestion_immobiliere.settings')
django.setup()

from proprietes.models import Propriete
from django.contrib.auth import get_user_model

def test_api_proprietes():
    """Test de l'API des propri√©t√©s"""
    
    print("üß™ Test de l'API des propri√©t√©s")
    print("=" * 50)
    
    try:
        # 1. V√©rifier qu'il y a des propri√©t√©s dans la base
        proprietes = Propriete.objects.all()
        print(f"\n1. Nombre de propri√©t√©s dans la base : {proprietes.count()}")
        
        if proprietes.exists():
            # Prendre la premi√®re propri√©t√© pour le test
            propriete = proprietes.first()
            print(f"   Propri√©t√© de test : {propriete.titre}")
            print(f"   Loyer actuel : {propriete.loyer_actuel}")
            print(f"   ID : {propriete.id}")
            
            # 2. Tester l'API directement
            print(f"\n2. Test de l'API REST...")
            
            # Test avec l'URL de l'API
            api_url = f"http://localhost:8000/proprietes/api/proprietes/{propriete.id}/"
            print(f"   URL de test : {api_url}")
            
            try:
                response = requests.get(api_url, timeout=5)
                print(f"   Statut de la r√©ponse : {response.status_code}")
                
                if response.status_code == 200:
                    data = response.json()
                    print(f"   Donn√©es re√ßues : {json.dumps(data, indent=2)}")
                    
                    if 'loyer_actuel' in data:
                        print(f"   ‚úÖ Loyer r√©cup√©r√© via API : {data['loyer_actuel']}")
                    else:
                        print(f"   ‚ùå Loyer non trouv√© dans la r√©ponse API")
                else:
                    print(f"   ‚ùå Erreur API : {response.status_code}")
                    print(f"   Contenu de la r√©ponse : {response.text}")
                    
            except requests.exceptions.RequestException as e:
                print(f"   ‚ùå Erreur de connexion √† l'API : {e}")
                print(f"   Assurez-vous que le serveur Django fonctionne sur le port 8001")
            
            # 3. Test avec l'URL alternative
            print(f"\n3. Test avec URL alternative...")
            alt_api_url = f"http://localhost:8000/proprietes/api/proprietes/{propriete.id}/"
            print(f"   URL alternative : {alt_api_url}")
            
            try:
                response = requests.get(alt_api_url, timeout=5)
                print(f"   Statut de la r√©ponse : {response.status_code}")
                
                if response.status_code == 200:
                    data = response.json()
                    print(f"   ‚úÖ Donn√©es r√©cup√©r√©es via URL alternative")
                    if 'loyer_actuel' in data:
                        print(f"   Loyer : {data['loyer_actuel']}")
                else:
                    print(f"   ‚ùå Erreur avec URL alternative : {response.status_code}")
                    
            except requests.exceptions.RequestException as e:
                print(f"   ‚ùå Erreur de connexion : {e}")
        
        else:
            print("   ‚ùå Aucune propri√©t√© trouv√©e dans la base de donn√©es")
        
        # 4. V√©rifier la configuration des URLs
        print(f"\n4. V√©rification de la configuration...")
        
        try:
            from proprietes.urls import urlpatterns
            api_urls = [url for url in urlpatterns if 'api' in str(url)]
            print(f"   URLs API trouv√©es : {len(api_urls)}")
            
            for url in api_urls:
                print(f"   - {url}")
                
        except Exception as e:
            print(f"   ‚ùå Erreur lors de la v√©rification des URLs : {e}")
        
        print(f"\nüéØ Recommandations :")
        print(f"   1. V√©rifiez que le serveur Django fonctionne sur le port 8001")
        print(f"   2. V√©rifiez que l'URL de l'API est correcte dans le JavaScript")
        print(f"   3. V√©rifiez les logs du serveur pour d'√©ventuelles erreurs")
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors du test : {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    test_api_proprietes()
