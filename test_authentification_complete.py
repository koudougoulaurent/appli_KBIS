#!/usr/bin/env python
"""
Test de l'authentification compl√®te
- S√©lection du groupe de travail
- Connexion sur la page sp√©cifique du groupe
- V√©rification de l'acc√®s aux pages prot√©g√©es
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gestion_immobiliere.settings')
django.setup()

from django.test import Client
from utilisateurs.models import Utilisateur, GroupeTravail

def test_authentification_complete():
    """Test de l'authentification compl√®te"""
    
    print("üîê TEST DE L'AUTHENTIFICATION COMPL√àTE")
    print("=" * 60)
    
    # √âtape 1: V√©rifier l'√©tat initial
    print("\nüìã √âtape 1: √âtat initial")
    print("-" * 40)
    
    client = Client()
    
    # Tester l'acc√®s √† la page de connexion des groupes
    response = client.get('/utilisateurs/')
    print(f"‚úÖ GET /utilisateurs/ - Status: {response.status_code}")
    
    # Tester l'acc√®s √† une page prot√©g√©e (doit rediriger)
    response = client.get('/paiements/retraits/')
    print(f"‚úÖ GET /paiements/retraits/ (non connect√©) - Status: {response.status_code}")
    
    if response.status_code == 302:
        print(f"‚úÖ Redirection vers: {response.url}")
    else:
        print(f"‚ùå Pas de redirection: {response.status_code}")
    
    # √âtape 2: Trouver un utilisateur valide pour la connexion
    print("\nüîç √âtape 2: Recherche d'un utilisateur valide")
    print("-" * 40)
    
    utilisateur_test = None
    for user in Utilisateur.objects.all():
        if user.groupe_travail and user.actif:
            utilisateur_test = user
            break
    
    if not utilisateur_test:
        print("‚ùå Aucun utilisateur valide trouv√©")
        return False
    
    print(f"‚úÖ Utilisateur de test: {utilisateur_test.username}")
    print(f"   Groupe: {utilisateur_test.groupe_travail.nom}")
    print(f"   Actif: {utilisateur_test.actif}")
    
    # √âtape 3: S√©lectionner le groupe de travail
    print("\nüè¢ √âtape 3: S√©lection du groupe de travail")
    print("-" * 40)
    
    try:
        # Simuler la s√©lection du groupe
        groupe_nom = utilisateur_test.groupe_travail.nom
        response = client.post('/utilisateurs/', {
            'groupe': groupe_nom
        }, follow=True)
        
        print(f"‚úÖ POST /utilisateurs/ (s√©lection groupe) - Status: {response.status_code}")
        print(f"   Redirections: {len(response.redirect_chain)}")
        
        for i, (url, status) in enumerate(response.redirect_chain):
            print(f"   Redirection {i+1}: {status} -> {url}")
        
        # V√©rifier que nous sommes sur la page de connexion du groupe
        if 'login_groupe' in str(response.url):
            print("‚úÖ Redirection vers la page de connexion du groupe")
        else:
            print(f"‚ö†Ô∏è Redirection inattendue vers: {response.url}")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la s√©lection du groupe: {e}")
    
    # √âtape 4: Connexion sur la page du groupe
    print("\nüîë √âtape 4: Connexion sur la page du groupe")
    print("-" * 40)
    
    try:
        # Construire l'URL de connexion du groupe
        groupe_nom = utilisateur_test.groupe_travail.nom
        login_url = f'/utilisateurs/login/{groupe_nom}/'
        
        print(f"‚úÖ URL de connexion: {login_url}")
        
        # Simuler la connexion sur la page du groupe
        response = client.post(login_url, {
            'username': utilisateur_test.username,
            'password': 'test123',  # Mot de passe par d√©faut
        }, follow=True)
        
        print(f"‚úÖ POST {login_url} - Status: {response.status_code}")
        print(f"   Redirections: {len(response.redirect_chain)}")
        
        for i, (url, status) in enumerate(response.redirect_chain):
            print(f"   Redirection {i+1}: {status} -> {url}")
        
        # V√©rifier si l'utilisateur est connect√©
        if response.context and 'user' in response.context:
            user = response.context['user']
            print(f"‚úÖ Utilisateur dans le contexte: {user.username}")
            print(f"   Authentifi√©: {user.is_authenticated}")
        else:
            print("‚ö†Ô∏è Pas d'utilisateur dans le contexte")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la connexion: {e}")
    
    # √âtape 5: V√©rifier l'√©tat de la session
    print("\nüì± √âtape 5: V√©rification de la session")
    print("-" * 40)
    
    try:
        # V√©rifier si l'utilisateur est connect√© dans la session
        session = client.session
        print(f"‚úÖ Session ID: {session.session_key}")
        
        if 'user_id' in session:
            print(f"‚úÖ User ID dans la session: {session['user_id']}")
        else:
            print("‚ö†Ô∏è Pas de user_id dans la session")
            
        if '_auth_user_id' in session:
            print(f"‚úÖ _auth_user_id dans la session: {session['_auth_user_id']}")
        else:
            print("‚ö†Ô∏è Pas de _auth_user_id dans la session")
            
        if '_auth_user_backend' in session:
            print(f"‚úÖ Backend d'authentification: {session['_auth_user_backend']}")
        else:
            print("‚ö†Ô∏è Pas de backend d'authentification")
            
        # V√©rifier le groupe s√©lectionn√©
        if 'groupe_selectionne' in session:
            print(f"‚úÖ Groupe s√©lectionn√©: {session['groupe_selectionne']}")
        else:
            print("‚ö†Ô∏è Pas de groupe s√©lectionn√© dans la session")
            
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification de la session: {e}")
    
    # √âtape 6: Tester l'acc√®s √† la page prot√©g√©e apr√®s connexion
    print("\nüåê √âtape 6: Test d'acc√®s apr√®s connexion")
    print("-" * 40)
    
    try:
        # Tester l'acc√®s √† la page des retraits apr√®s connexion
        response = client.get('/paiements/retraits/')
        print(f"‚úÖ GET /paiements/retraits/ (apr√®s connexion) - Status: {response.status_code}")
        
        if response.status_code == 200:
            print("‚úÖ Page accessible apr√®s connexion")
        elif response.status_code == 302:
            print(f"‚ö†Ô∏è Redirection apr√®s connexion vers: {response.url}")
            
            # Suivre la redirection
            response = client.get(response.url, follow=True)
            print(f"   Suivi de la redirection - Status final: {response.status_code}")
            
        else:
            print(f"‚ùå Erreur apr√®s connexion: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test d'acc√®s: {e}")
    
    # √âtape 7: Test avec force_login pour comparaison
    print("\n‚ö° √âtape 7: Test avec force_login pour comparaison")
    print("-" * 40)
    
    try:
        # Cr√©er un nouveau client et utiliser force_login
        client2 = Client()
        client2.force_login(utilisateur_test)
        
        # Tester l'acc√®s
        response = client2.get('/paiements/retraits/')
        print(f"‚úÖ GET /paiements/retraits/ (force_login) - Status: {response.status_code}")
        
        if response.status_code == 200:
            print("‚úÖ Page accessible avec force_login")
        else:
            print(f"‚ùå Erreur avec force_login: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erreur avec force_login: {e}")
    
    print("\n‚úÖ TEST TERMIN√â !")
    print("üéØ Analysez les r√©sultats pour identifier le probl√®me de redirection")
    
    return True

if __name__ == "__main__":
    test_authentification_complete()
