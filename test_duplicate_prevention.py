#!/usr/bin/env python
"""
Script de test pour v√©rifier la pr√©vention des doublons
"""

import os
import sys
import django
from datetime import datetime

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gestion_immobiliere.settings')
django.setup()

from core.id_generator import IDGenerator
from core.duplicate_prevention import DuplicatePreventionSystem
from proprietes.models import Propriete
from django.db import transaction
import threading
import time

def test_concurrent_id_generation():
    """
    Test de g√©n√©ration concurrente d'IDs pour v√©rifier l'absence de doublons
    """
    print("üß™ Test de g√©n√©ration concurrente d'IDs...")
    
    generated_ids = []
    errors = []
    
    def generate_id_worker(worker_id):
        """Worker pour g√©n√©rer des IDs en concurrence"""
        try:
            generator = IDGenerator()
            for i in range(10):  # 10 IDs par worker
                id_value = generator.generate_id('propriete')
                generated_ids.append((worker_id, i, id_value))
                time.sleep(0.01)  # Petite pause pour simuler la concurrence
        except Exception as e:
            errors.append((worker_id, str(e)))
    
    # Cr√©er 5 threads qui g√©n√®rent des IDs en concurrence
    threads = []
    for i in range(5):
        thread = threading.Thread(target=generate_id_worker, args=(i,))
        threads.append(thread)
        thread.start()
    
    # Attendre que tous les threads se terminent
    for thread in threads:
        thread.join()
    
    # V√©rifier les r√©sultats
    unique_ids = set()
    duplicates = []
    
    for worker_id, iteration, id_value in generated_ids:
        if id_value in unique_ids:
            duplicates.append((worker_id, iteration, id_value))
        else:
            unique_ids.add(id_value)
    
    print(f"‚úÖ IDs g√©n√©r√©s: {len(generated_ids)}")
    print(f"‚úÖ IDs uniques: {len(unique_ids)}")
    print(f"‚ùå Doublons d√©tect√©s: {len(duplicates)}")
    print(f"‚ùå Erreurs: {len(errors)}")
    
    if duplicates:
        print("üö® DOUBLONS TROUV√âS:")
        for worker_id, iteration, id_value in duplicates:
            print(f"  Worker {worker_id}, Iteration {iteration}: {id_value}")
    
    if errors:
        print("üö® ERREURS:")
        for worker_id, error in errors:
            print(f"  Worker {worker_id}: {error}")
    
    return len(duplicates) == 0 and len(errors) == 0

def test_duplicate_prevention_system():
    """
    Test du syst√®me de pr√©vention des doublons
    """
    print("\nüß™ Test du syst√®me de pr√©vention des doublons...")
    
    # Cr√©er une propri√©t√© de test
    test_property = Propriete.objects.create(
        numero_propriete="TEST-DUPLICATE-001",
        titre="Propri√©t√© de test",
        type_bien_id=1,  # Supposer qu'il existe un TypeBien avec ID 1
        type_gestion='propriete_entiere'
    )
    
    try:
        # Tester la d√©tection de doublon
        is_unique = DuplicatePreventionSystem.check_property_number_uniqueness(
            "TEST-DUPLICATE-001"
        )
        
        if not is_unique:
            print("‚úÖ Syst√®me de d√©tection de doublon fonctionne")
        else:
            print("‚ùå Syst√®me de d√©tection de doublon ne fonctionne pas")
            return False
        
        # Tester avec un num√©ro unique
        is_unique = DuplicatePreventionSystem.check_property_number_uniqueness(
            "TEST-UNIQUE-001"
        )
        
        if is_unique:
            print("‚úÖ Syst√®me de d√©tection d'unicit√© fonctionne")
        else:
            print("‚ùå Syst√®me de d√©tection d'unicit√© ne fonctionne pas")
            return False
        
        return True
        
    finally:
        # Nettoyer
        test_property.delete()

def test_form_validation():
    """
    Test de la validation c√¥t√© formulaire
    """
    print("\nüß™ Test de la validation c√¥t√© formulaire...")
    
    from proprietes.forms import ProprieteForm
    from proprietes.models import TypeBien
    
    # Cr√©er un type de bien si n√©cessaire
    type_bien, created = TypeBien.objects.get_or_create(
        nom="Test",
        defaults={'description': 'Type de test'}
    )
    
    # Cr√©er une propri√©t√© de test
    test_property = Propriete.objects.create(
        numero_propriete="TEST-FORM-001",
        titre="Propri√©t√© de test form",
        type_bien=type_bien,
        type_gestion='propriete_entiere'
    )
    
    try:
        # Tester la validation avec un doublon
        form_data = {
            'numero_propriete': 'TEST-FORM-001',
            'titre': 'Nouvelle propri√©t√©',
            'type_bien': type_bien.id,
            'type_gestion': 'propriete_entiere'
        }
        
        form = ProprieteForm(data=form_data)
        is_valid = form.is_valid()
        
        if not is_valid and 'numero_propriete' in form.errors:
            print("‚úÖ Validation de doublon fonctionne")
        else:
            print("‚ùå Validation de doublon ne fonctionne pas")
            return False
        
        # Tester la validation avec un num√©ro unique
        form_data['numero_propriete'] = 'TEST-FORM-UNIQUE-001'
        form = ProprieteForm(data=form_data)
        is_valid = form.is_valid()
        
        if is_valid:
            print("‚úÖ Validation d'unicit√© fonctionne")
        else:
            print(f"‚ùå Validation d'unicit√© ne fonctionne pas: {form.errors}")
            return False
        
        return True
        
    finally:
        # Nettoyer
        test_property.delete()

def main():
    """
    Fonction principale de test
    """
    print("üöÄ D√©marrage des tests de pr√©vention des doublons")
    print("=" * 60)
    
    tests = [
        test_concurrent_id_generation,
        test_duplicate_prevention_system,
        test_form_validation
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
                print("‚úÖ Test r√©ussi")
            else:
                print("‚ùå Test √©chou√©")
        except Exception as e:
            print(f"‚ùå Test √©chou√© avec erreur: {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä R√©sultats: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("üéâ Tous les tests sont pass√©s ! Le syst√®me de pr√©vention des doublons fonctionne.")
    else:
        print("‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez le syst√®me.")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)


