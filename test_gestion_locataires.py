#!/usr/bin/env python3
"""
Script de test pour v√©rifier le bon fonctionnement du syst√®me de gestion des locataires
avec suppression logique, corbeille et gestion des r√©f√©rences.
"""

import os
import sys
import django
from datetime import datetime, timedelta

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gestion_immobiliere.settings')
django.setup()

from django.contrib.auth.models import User
from django.test import TestCase
from proprietes.models import Locataire, Propriete
from contrats.models import Contrat
from paiements.models import Paiement
from utilisateurs.models import GroupeTravail, Utilisateur

def test_gestion_locataires():
    """
    Test complet du syst√®me de gestion des locataires
    """
    print("üß™ Test du syst√®me de gestion des locataires")
    print("=" * 60)
    
    try:
        # 1. V√©rifier que les mod√®les existent
        print("\n1. V√©rification des mod√®les...")
        assert hasattr(Locataire, 'est_supprime'), "Le mod√®le Locataire doit avoir le champ 'est_supprime'"
        assert hasattr(Locataire, 'date_suppression'), "Le mod√®le Locataire doit avoir le champ 'date_suppression'"
        print("‚úÖ Mod√®les v√©rifi√©s")
        
        # 2. V√©rifier les privil√®ges
        print("\n2. V√©rification des privil√®ges...")
        groupes_privileges = ['ADMINISTRATION', 'PRIVILEGE']
        for nom_groupe in groupes_privileges:
            groupe, created = GroupeTravail.objects.get_or_create(nom=nom_groupe)
            if created:
                print(f"   - Groupe '{nom_groupe}' cr√©√©")
            else:
                print(f"   - Groupe '{nom_groupe}' existe d√©j√†")
        print("‚úÖ Privil√®ges v√©rifi√©s")
        
        # 3. V√©rifier les URLs
        print("\n3. V√©rification des URLs...")
        from django.urls import reverse
        try:
            # URLs des locataires
            reverse('proprietes:locataires_liste')
            reverse('proprietes:corbeille_locataires')
            reverse('contrats:orphelins')
            print("‚úÖ URLs v√©rifi√©es")
        except Exception as e:
            print(f"‚ùå Erreur avec les URLs: {e}")
            return False
        
        # 4. V√©rifier les vues
        print("\n4. V√©rification des vues...")
        from proprietes.views import corbeille_locataires
        from contrats.views import contrats_orphelins
        print("‚úÖ Vues v√©rifi√©es")
        
        # 5. V√©rifier les templates
        print("\n5. V√©rification des templates...")
        template_paths = [
            'templates/proprietes/confirm_supprimer_locataire_avance.html',
            'templates/proprietes/corbeille_locataires.html',
            'templates/contrats/orphelins.html'
        ]
        
        for template_path in template_paths:
            if os.path.exists(template_path):
                print(f"   ‚úÖ {template_path}")
            else:
                print(f"   ‚ùå {template_path} manquant")
        
        # 6. Test de cr√©ation de donn√©es de test
        print("\n6. Cr√©ation de donn√©es de test...")
        
        # Cr√©er un utilisateur de test
        user, created = User.objects.get_or_create(
            username='test_admin',
            defaults={'email': 'test@example.com', 'is_staff': True}
        )
        if created:
            user.set_password('testpass123')
            user.save()
            print("   - Utilisateur de test cr√©√©")
        
        # Cr√©er un groupe de travail
        groupe_admin, created = GroupeTravail.objects.get_or_create(nom='ADMINISTRATION')
        
        # Cr√©er un utilisateur avec groupe
        utilisateur, created = Utilisateur.objects.get_or_create(
            user=user,
            defaults={'groupe_travail': groupe_admin}
        )
        if created:
            print("   - Utilisateur avec groupe cr√©√©")
        
        # Cr√©er une propri√©t√© de test
        propriete, created = Propriete.objects.get_or_create(
            titre='Propri√©t√© de Test',
            defaults={
                'adresse': '123 Rue de Test',
                'type_propriete': 'APPARTEMENT',
                'surface': 80.0,
                'nombre_pieces': 3,
                'loyer_mensuel': 50000,
                'charges_mensuelles': 5000,
                'est_actif': True
            }
        )
        if created:
            print("   - Propri√©t√© de test cr√©√©e")
        
        # Cr√©er des locataires de test
        locataire1, created = Locataire.objects.get_or_create(
            nom='Dupont',
            prenom='Jean',
            defaults={
                'email': 'jean.dupont@example.com',
                'telephone': '0123456789',
                'date_naissance': '1980-01-01',
                'profession': 'Ing√©nieur',
                'est_actif': True
            }
        )
        if created:
            print("   - Locataire 1 cr√©√©")
        
        locataire2, created = Locataire.objects.get_or_create(
            nom='Martin',
            prenom='Marie',
            defaults={
                'email': 'marie.martin@example.com',
                'telephone': '0987654321',
                'date_naissance': '1985-05-15',
                'profession': 'M√©decin',
                'est_actif': True
            }
        )
        if created:
            print("   - Locataire 2 cr√©√©")
        
        # Cr√©er des contrats de test
        contrat1, created = Contrat.objects.get_or_create(
            numero_contrat='CTR-001-2024',
            defaults={
                'propriete': propriete,
                'locataire': locataire1,
                'date_debut': datetime.now().date(),
                'date_fin': (datetime.now() + timedelta(days=365)).date(),
                'loyer_mensuel': 50000,
                'charges_mensuelles': 5000,
                'caution': 100000,
                'est_actif': True
            }
        )
        if created:
            print("   - Contrat 1 cr√©√©")
        
        contrat2, created = Contrat.objects.get_or_create(
            numero_contrat='CTR-002-2024',
            defaults={
                'propriete': propriete,
                'locataire': locataire2,
                'date_debut': (datetime.now() + timedelta(days=30)).date(),
                'date_fin': (datetime.now() + timedelta(days=395)).date(),
                'loyer_mensuel': 55000,
                'charges_mensuelles': 6000,
                'caution': 110000,
                'est_actif': True
            }
        )
        if created:
            print("   - Contrat 2 cr√©√©")
        
        print("‚úÖ Donn√©es de test cr√©√©es")
        
        # 7. Test de suppression logique
        print("\n7. Test de suppression logique...")
        
        # Supprimer logiquement le premier locataire
        locataire1.est_supprime = True
        locataire1.date_suppression = datetime.now()
        locataire1.save()
        print("   - Locataire 1 supprim√© logiquement")
        
        # V√©rifier que le locataire est marqu√© comme supprim√©
        locataire1.refresh_from_db()
        assert locataire1.est_supprime == True, "Le locataire doit √™tre marqu√© comme supprim√©"
        assert locataire1.date_suppression is not None, "La date de suppression doit √™tre d√©finie"
        print("   ‚úÖ Suppression logique v√©rifi√©e")
        
        # 8. Test de la corbeille
        print("\n8. Test de la corbeille...")
        
        # V√©rifier que le locataire appara√Æt dans la corbeille
        locataires_supprimes = Locataire.objects.filter(est_supprime=True)
        assert locataire1 in locataires_supprimes, "Le locataire supprim√© doit appara√Ætre dans la corbeille"
        print("   ‚úÖ Locataire dans la corbeille")
        
        # 9. Test des contrats orphelins
        print("\n9. Test des contrats orphelins...")
        
        # V√©rifier que le contrat du locataire supprim√© est consid√©r√© comme orphelin
        contrats_orphelins = Contrat.objects.filter(locataire__est_supprime=True)
        assert contrat1 in contrats_orphelins, "Le contrat du locataire supprim√© doit √™tre orphelin"
        print("   ‚úÖ Contrat orphelin d√©tect√©")
        
        # 10. Test de restauration
        print("\n10. Test de restauration...")
        
        # Restaurer le locataire
        locataire1.est_supprime = False
        locataire1.date_suppression = None
        locataire1.save()
        print("   - Locataire 1 restaur√©")
        
        # V√©rifier que le locataire n'est plus dans la corbeille
        locataire1.refresh_from_db()
        assert locataire1.est_supprime == False, "Le locataire doit √™tre restaur√©"
        assert locataire1.date_suppression is None, "La date de suppression doit √™tre effac√©e"
        print("   ‚úÖ Restauration v√©rifi√©e")
        
        # 11. Test de suppression d√©finitive
        print("\n11. Test de suppression d√©finitive...")
        
        # Supprimer d√©finitivement le deuxi√®me locataire (sans contrats actifs)
        locataire2.delete()
        print("   - Locataire 2 supprim√© d√©finitivement")
        
        # V√©rifier que le locataire n'existe plus
        try:
            Locataire.objects.get(pk=locataire2.pk)
            print("   ‚ùå Le locataire existe encore apr√®s suppression d√©finitive")
            return False
        except Locataire.DoesNotExist:
            print("   ‚úÖ Suppression d√©finitive v√©rifi√©e")
        
        # 12. Nettoyage
        print("\n12. Nettoyage des donn√©es de test...")
        
        # Supprimer les contrats
        contrat1.delete()
        contrat2.delete()
        
        # Supprimer la propri√©t√©
        propriete.delete()
        
        # Supprimer l'utilisateur de test
        user.delete()
        
        print("‚úÖ Donn√©es de test nettoy√©es")
        
        print("\nüéâ Tous les tests sont pass√©s avec succ√®s !")
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors des tests: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """
    Fonction principale
    """
    print("üöÄ D√©marrage des tests de gestion des locataires")
    print("=" * 60)
    
    success = test_gestion_locataires()
    
    if success:
        print("\n‚úÖ Le syst√®me de gestion des locataires fonctionne correctement")
        print("\nüìã Fonctionnalit√©s impl√©ment√©es :")
        print("   - Suppression logique des locataires")
        print("   - Corbeille des locataires supprim√©s")
        print("   - Gestion des contrats orphelins")
        print("   - Restauration des locataires")
        print("   - Suppression d√©finitive")
        print("   - V√©rification des r√©f√©rences")
        print("   - Interface utilisateur compl√®te")
        return 0
    else:
        print("\n‚ùå Des probl√®mes ont √©t√© d√©tect√©s")
        return 1

if __name__ == '__main__':
    sys.exit(main())
