#!/usr/bin/env python
"""
Script de test pour v√©rifier l'accessibilit√© de la page des notifications
"""

import os
import sys
import django
import requests
from django.test import Client
from django.contrib.auth import get_user_model

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gestion_immobiliere.settings')
django.setup()

User = get_user_model()


def test_notifications_page():
    """Tester l'accessibilit√© de la page des notifications"""
    print("üß™ Test de la page des notifications...")
    
    try:
        client = Client()
        
        # Se connecter avec un utilisateur
        user = User.objects.first()
        if not user:
            print("‚ùå Aucun utilisateur trouv√© pour les tests")
            return False
        
        client.force_login(user)
        
        # Test 1: Page principale des notifications
        print("üìÑ Test de la page principale des notifications...")
        response = client.get('/notifications/')
        if response.status_code == 200:
            print("‚úÖ Page principale accessible (200)")
            print(f"   - Contenu : {len(response.content)} caract√®res")
            
            # V√©rifier la pr√©sence d'√©l√©ments cl√©s
            content = response.content.decode('utf-8')
            if 'Notifications' in content:
                print("‚úÖ Titre 'Notifications' trouv√©")
            if 'notification-card' in content:
                print("‚úÖ Classes CSS des notifications trouv√©es")
            if 'Filtrer' in content:
                print("‚úÖ Bouton de filtrage trouv√©")
        else:
            print(f"‚ùå Page principale inaccessible : {response.status_code}")
            return False
        
        # Test 2: Page des pr√©f√©rences
        print("\n‚öôÔ∏è Test de la page des pr√©f√©rences...")
        response = client.get('/notifications/preferences/')
        if response.status_code == 200:
            print("‚úÖ Page des pr√©f√©rences accessible (200)")
            print(f"   - Contenu : {len(response.content)} caract√®res")
            
            content = response.content.decode('utf-8')
            if 'Pr√©f√©rences de Notification' in content:
                print("‚úÖ Titre des pr√©f√©rences trouv√©")
            if 'form-check' in content:
                print("‚úÖ Formulaire de pr√©f√©rences trouv√©")
        else:
            print(f"‚ùå Page des pr√©f√©rences inaccessible : {response.status_code}")
            return False
        
        # Test 3: D√©tail d'une notification
        print("\nüìã Test du d√©tail d'une notification...")
        from notifications.models import Notification
        notification = Notification.objects.filter(recipient=user).first()
        if notification:
            response = client.get(f'/notifications/{notification.id}/')
            if response.status_code == 200:
                print("‚úÖ Page de d√©tail accessible (200)")
                print(f"   - Notification : {notification.title}")
                
                content = response.content.decode('utf-8')
                if notification.title in content:
                    print("‚úÖ Titre de la notification trouv√©")
                if 'Retour' in content:
                    print("‚úÖ Bouton de retour trouv√©")
            else:
                print(f"‚ùå Page de d√©tail inaccessible : {response.status_code}")
        else:
            print("‚ö†Ô∏è Aucune notification trouv√©e pour tester le d√©tail")
        
        # Test 4: Actions AJAX
        print("\nüîÑ Test des actions AJAX...")
        
        # Marquer comme lu
        if notification:
            response = client.post(f'/notifications/{notification.id}/mark-read/')
            if response.status_code == 200:
                print("‚úÖ Action 'marquer comme lu' fonctionnelle")
            else:
                print(f"‚ùå Action 'marquer comme lu' √©choue : {response.status_code}")
        
        # Comptage des notifications
        response = client.get('/notifications/notification-count/')
        if response.status_code == 200:
            print("‚úÖ Comptage des notifications fonctionnel")
        else:
            print(f"‚ùå Comptage des notifications √©choue : {response.status_code}")
        
        # Marquer toutes comme lues
        response = client.post('/notifications/mark-all-as-read/')
        if response.status_code == 200:
            print("‚úÖ Action 'marquer toutes comme lues' fonctionnelle")
        else:
            print(f"‚ùå Action 'marquer toutes comme lues' √©choue : {response.status_code}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test de la page : {e}")
        return False


def test_notifications_api():
    """Tester l'API des notifications"""
    print("\nüåê Test de l'API des notifications...")
    
    try:
        client = Client()
        
        # Se connecter avec un utilisateur
        user = User.objects.first()
        if not user:
            print("‚ùå Aucun utilisateur trouv√© pour les tests")
            return False
        
        client.force_login(user)
        
        # Test des endpoints API
        endpoints = [
            ('/notifications/api/notifications/', 'Liste des notifications'),
            ('/notifications/api/notifications/unread_count/', 'Comptage non lues'),
            ('/notifications/api/notifications/recent/', 'Notifications r√©centes'),
            ('/notifications/api/preferences/my_preferences/', 'Mes pr√©f√©rences'),
        ]
        
        for endpoint, description in endpoints:
            response = client.get(endpoint)
            if response.status_code == 200:
                print(f"‚úÖ {description} : OK")
            else:
                print(f"‚ùå {description} : {response.status_code}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test de l'API : {e}")
        return False


def main():
    """Fonction principale de test"""
    print("üöÄ Test de l'accessibilit√© des notifications")
    print("=" * 50)
    
    tests = [
        test_notifications_page,
        test_notifications_api,
    ]
    
    passed_tests = 0
    total_tests = len(tests)
    
    for test in tests:
        try:
            if test():
                passed_tests += 1
        except Exception as e:
            print(f"‚ùå Erreur lors de l'ex√©cution du test {test.__name__} : {e}")
    
    print("\n" + "=" * 50)
    print(f"üìã R√©sum√© des tests : {passed_tests}/{total_tests} tests r√©ussis")
    
    if passed_tests == total_tests:
        print("üéâ Tous les tests sont pass√©s avec succ√®s !")
        print("\n‚úÖ La page des notifications est maintenant accessible")
        print("\nüìù URLs disponibles :")
        print("   - Page principale : http://127.0.0.1:8000/notifications/")
        print("   - Pr√©f√©rences : http://127.0.0.1:8000/notifications/preferences/")
        print("   - API : http://127.0.0.1:8000/notifications/api/")
    else:
        print("‚ö†Ô∏è Certains tests ont √©chou√©. V√©rifiez les erreurs ci-dessus.")
    
    return passed_tests == total_tests


if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1) 