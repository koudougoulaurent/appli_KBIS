#!/usr/bin/env python
"""
Test du nouveau syst√®me d'IDs uniques professionnels
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gestion_immobiliere.settings')
django.setup()

from core.id_generator import IDGenerator, IDConfiguration
from datetime import datetime, date


def test_generation_ids():
    """Tester la g√©n√©ration des nouveaux IDs uniques"""
    
    print("üß™ TEST DU NOUVEAU SYST√àME D'IDS UNIQUES PROFESSIONNELS")
    print("=" * 70)
    
    # Test 1: Formats disponibles
    print("\nüìã Test 1: Formats d'IDs disponibles")
    print("-" * 50)
    
    formats = IDGenerator.get_available_formats()
    for entity_type, config in formats.items():
        print(f"   {entity_type.upper()}: {config['description']}")
        print(f"     Format: {config['format']}")
        print(f"     Exemple: {config['example']}")
        print()
    
    # Test 2: G√©n√©ration d'IDs pour chaque type
    print("\nüîÑ Test 2: G√©n√©ration d'IDs pour chaque type")
    print("-" * 50)
    
    # Test bailleur
    try:
        bailleur_id = IDGenerator.generate_id('bailleur')
        print(f"   ‚úÖ Bailleur: {bailleur_id}")
        
        # V√©rifier le format
        if IDGenerator.validate_id_format('bailleur', bailleur_id):
            print(f"      Format valid√©: {bailleur_id}")
            info = IDGenerator.get_id_info('bailleur', bailleur_id)
            print(f"      Ann√©e: {info['year']}, S√©quence: {info['sequence']}")
        else:
            print(f"      ‚ùå Format invalide: {bailleur_id}")
    except Exception as e:
        print(f"   ‚ùå Erreur bailleur: {e}")
    
    # Test locataire
    try:
        locataire_id = IDGenerator.generate_id('locataire')
        print(f"   ‚úÖ Locataire: {locataire_id}")
        
        if IDGenerator.validate_id_format('locataire', locataire_id):
            print(f"      Format valid√©: {locataire_id}")
            info = IDGenerator.get_id_info('locataire', locataire_id)
            print(f"      Ann√©e: {info['year']}, S√©quence: {info['sequence']}")
        else:
            print(f"      ‚ùå Format invalide: {locataire_id}")
    except Exception as e:
        print(f"   ‚ùå Erreur locataire: {e}")
    
    # Test propri√©t√©
    try:
        propriete_id = IDGenerator.generate_id('propriete')
        print(f"   ‚úÖ Propri√©t√©: {propriete_id}")
        
        if IDGenerator.validate_id_format('propriete', propriete_id):
            print(f"      Format valid√©: {propriete_id}")
            info = IDGenerator.get_id_info('propriete', propriete_id)
            print(f"      Ann√©e: {info['year']}, S√©quence: {info['sequence']}")
        else:
            print(f"      ‚ùå Format invalide: {propriete_id}")
    except Exception as e:
        print(f"   ‚ùå Erreur propri√©t√©: {e}")
    
    # Test contrat
    try:
        contrat_id = IDGenerator.generate_id('contrat')
        print(f"   ‚úÖ Contrat: {contrat_id}")
        
        if IDGenerator.validate_id_format('contrat', contrat_id):
            print(f"      Format valid√©: {contrat_id}")
            info = IDGenerator.get_id_info('contrat', contrat_id)
            print(f"      Ann√©e: {info['year']}, S√©quence: {info['sequence']}")
        else:
            print(f"      ‚ùå Format invalide: {contrat_id}")
    except Exception as e:
        print(f"   ‚ùå Erreur contrat: {e}")
    
    # Test paiement avec date sp√©cifique
    try:
        date_paiement = date(2025, 8, 20)
        paiement_id = IDGenerator.generate_id('paiement', date_paiement=date_paiement)
        print(f"   ‚úÖ Paiement: {paiement_id}")
        
        if IDGenerator.validate_id_format('paiement', paiement_id):
            print(f"      Format valid√©: {paiement_id}")
            info = IDGenerator.get_id_info('paiement', paiement_id)
            print(f"      Ann√©e: {info['year']}, Mois: {info['month']}, S√©quence: {info['sequence']}")
        else:
            print(f"      ‚ùå Format invalide: {paiement_id}")
    except Exception as e:
        print(f"   ‚ùå Erreur paiement: {e}")
    
    # Test re√ßu avec date sp√©cifique
    try:
        date_emission = datetime(2025, 8, 20, 14, 30, 0)
        recu_id = IDGenerator.generate_id('recu', date_emission=date_emission)
        print(f"   ‚úÖ Re√ßu: {recu_id}")
        
        if IDGenerator.validate_id_format('recu', recu_id):
            print(f"      Format valid√©: {recu_id}")
            info = IDGenerator.get_id_info('recu', recu_id)
            print(f"      Date: {info['date']}, S√©quence: {info['sequence']}")
        else:
            print(f"      ‚ùå Format invalide: {recu_id}")
    except Exception as e:
        print(f"   ‚ùå Erreur re√ßu: {e}")
    
    # Test quittance avec date sp√©cifique
    try:
        date_emission = datetime(2025, 8, 20, 14, 30, 0)
        quittance_id = IDGenerator.generate_id('quittance', date_emission=date_emission)
        print(f"   ‚úÖ Quittance: {quittance_id}")
        
        if IDGenerator.validate_id_format('quittance', quittance_id):
            print(f"      Format valid√©: {quittance_id}")
            info = IDGenerator.get_id_info('quittance', quittance_id)
            print(f"      Ann√©e: {info['year']}, Mois: {info['month']}, S√©quence: {info['sequence']}")
        else:
            print(f"      ‚ùå Format invalide: {quittance_id}")
    except Exception as e:
        print(f"   ‚ùå Erreur quittance: {e}")
    
    # Test 3: Validation des formats
    print("\nüîç Test 3: Validation des formats d'IDs")
    print("-" * 50)
    
    # Test avec des IDs valides
    ids_valides = [
        ('bailleur', 'BLR-2025-0001'),
        ('locataire', 'LOC-2025-0001'),
        ('propriete', 'PRP-2025-0001'),
        ('contrat', 'CTR-2025-0001'),
        ('paiement', 'PAY-202508-0001'),
        ('recu', 'REC-20250820-0001'),
        ('quittance', 'QUI-202508-0001')
    ]
    
    for entity_type, test_id in ids_valides:
        is_valid = IDGenerator.validate_id_format(entity_type, test_id)
        print(f"   {entity_type.upper()}: {test_id} - {'‚úÖ Valide' if is_valid else '‚ùå Invalide'}")
    
    # Test avec des IDs invalides
    print("\n   Test avec des IDs invalides:")
    ids_invalides = [
        ('bailleur', 'BLR-2025-001'),      # S√©quence trop courte
        ('locataire', 'LOC-2025-00001'),   # S√©quence trop longue
        ('paiement', 'PAY-2025-0001'),     # Format ann√©e au lieu de ann√©e-mois
        ('recu', 'REC-2025-0001'),         # Format ann√©e au lieu de date compl√®te
    ]
    
    for entity_type, test_id in ids_invalides:
        is_valid = IDGenerator.validate_id_format(entity_type, test_id)
        print(f"   {entity_type.upper()}: {test_id} - {'‚úÖ Valide' if is_valid else '‚ùå Invalide'}")
    
    # Test 4: Extraction d'informations
    print("\nüìä Test 4: Extraction d'informations des IDs")
    print("-" * 50)
    
    test_ids = [
        ('bailleur', 'BLR-2025-0042'),
        ('paiement', 'PAY-202508-0015'),
        ('recu', 'REC-20250820-0023')
    ]
    
    for entity_type, test_id in test_ids:
        info = IDGenerator.get_id_info(entity_type, test_id)
        if info:
            print(f"   {entity_type.upper()}: {test_id}")
            for key, value in info.items():
                print(f"      {key}: {value}")
        else:
            print(f"   {entity_type.upper()}: {test_id} - ‚ùå Impossible d'extraire les infos")
    
    # Test 5: Configuration de l'entreprise
    print("\nüè¢ Test 5: Configuration de l'entreprise")
    print("-" * 50)
    
    company_prefix = IDConfiguration.get_company_prefix()
    print(f"   Pr√©fixe entreprise: {company_prefix}")
    
    custom_formats = IDConfiguration.get_custom_formats()
    print(f"   Formats personnalis√©s disponibles: {len(custom_formats)}")
    
    reset_policy = IDConfiguration.get_sequence_reset_policy()
    print(f"   Politique de r√©initialisation:")
    for entity, policy in reset_policy.items():
        print(f"      {entity}: {policy}")
    
    # Test 6: G√©n√©ration de plusieurs IDs pour tester l'incr√©mentation
    print("\nüî¢ Test 6: Test d'incr√©mentation des s√©quences")
    print("-" * 50)
    
    print("   G√©n√©ration de 5 IDs de bailleurs cons√©cutifs:")
    for i in range(5):
        try:
            bailleur_id = IDGenerator.generate_id('bailleur')
            print(f"      {i+1}. {bailleur_id}")
        except Exception as e:
            print(f"      {i+1}. ‚ùå Erreur: {e}")
    
    print("\n   G√©n√©ration de 3 IDs de paiements cons√©cutifs (m√™me mois):")
    date_test = date(2025, 8, 20)
    for i in range(3):
        try:
            paiement_id = IDGenerator.generate_id('paiement', date_paiement=date_test)
            print(f"      {i+1}. {paiement_id}")
        except Exception as e:
            print(f"      {i+1}. ‚ùå Erreur: {e}")
    
    print("\n‚úÖ Tests termin√©s avec succ√®s!")
    return True


def test_integration_models():
    """Tester l'int√©gration avec les mod√®les Django"""
    
    print("\nüîó TEST D'INT√âGRATION AVEC LES MOD√àLES DJANGO")
    print("=" * 70)
    
    try:
        # Test avec le mod√®le Bailleur
        from proprietes.models import Bailleur
        
        print("\nüë§ Test avec le mod√®le Bailleur:")
        print("-" * 40)
        
        # V√©rifier si le champ existe
        if hasattr(Bailleur, 'numero_bailleur'):
            print("   ‚úÖ Champ numero_bailleur pr√©sent dans le mod√®le")
            
            # Compter les bailleurs avec et sans ID
            total_bailleurs = Bailleur.objects.count()
            bailleurs_avec_id = Bailleur.objects.filter(numero_bailleur__isnull=False).count()
            bailleurs_sans_id = Bailleur.objects.filter(numero_bailleur__isnull=True).count()
            
            print(f"   Total bailleurs: {total_bailleurs}")
            print(f"   Avec ID unique: {bailleurs_avec_id}")
            print(f"   Sans ID unique: {bailleurs_sans_id}")
            
            # Afficher quelques exemples
            if bailleurs_avec_id > 0:
                print("   Exemples d'IDs:")
                for bailleur in Bailleur.objects.filter(numero_bailleur__isnull=False)[:3]:
                    print(f"      {bailleur.nom} {bailleur.prenom}: {bailleur.numero_bailleur}")
        else:
            print("   ‚ùå Champ numero_bailleur manquant dans le mod√®le")
        
        # Test avec le mod√®le Locataire
        from proprietes.models import Locataire
        
        print("\nüë• Test avec le mod√®le Locataire:")
        print("-" * 40)
        
        if hasattr(Locataire, 'numero_locataire'):
            print("   ‚úÖ Champ numero_locataire pr√©sent dans le mod√®le")
            
            total_locataires = Locataire.objects.count()
            locataires_avec_id = Locataire.objects.filter(numero_locataire__isnull=False).count()
            locataires_sans_id = Locataire.objects.filter(numero_locataire__isnull=True).count()
            
            print(f"   Total locataires: {total_locataires}")
            print(f"   Avec ID unique: {locataires_avec_id}")
            print(f"   Sans ID unique: {locataires_sans_id}")
            
            if locataires_avec_id > 0:
                print("   Exemples d'IDs:")
                for locataire in Locataire.objects.filter(numero_locataire__isnull=False)[:3]:
                    print(f"      {locataire.nom} {locataire.prenom}: {locataire.numero_locataire}")
        else:
            print("   ‚ùå Champ numero_locataire manquant dans le mod√®le")
        
        # Test avec le mod√®le Propriete
        from proprietes.models import Propriete
        
        print("\nüè† Test avec le mod√®le Propriete:")
        print("-" * 40)
        
        if hasattr(Propriete, 'numero_propriete'):
            print("   ‚úÖ Champ numero_propriete pr√©sent dans le mod√®le")
            
            total_proprietes = Propriete.objects.count()
            proprietes_avec_id = Propriete.objects.filter(numero_propriete__isnull=False).count()
            proprietes_sans_id = Propriete.objects.filter(numero_propriete__isnull=True).count()
            
            print(f"   Total propri√©t√©s: {total_proprietes}")
            print(f"   Avec ID unique: {proprietes_avec_id}")
            print(f"   Sans ID unique: {proprietes_sans_id}")
            
            if proprietes_avec_id > 0:
                print("   Exemples d'IDs:")
                for propriete in Propriete.objects.filter(numero_propriete__isnull=False)[:3]:
                    print(f"      {propriete.adresse}: {propriete.numero_propriete}")
        else:
            print("   ‚ùå Champ numero_propriete manquant dans le mod√®le")
        
        print("\n‚úÖ Tests d'int√©gration termin√©s!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors des tests d'int√©gration: {e}")
        return False


def main():
    """Fonction principale de test"""
    
    print("üöÄ TESTS COMPLETS DU SYST√àME D'IDS UNIQUES PROFESSIONNELS")
    print("=" * 70)
    
    # Test 1: G√©n√©ration des IDs
    if not test_generation_ids():
        print("‚ùå √âchec des tests de g√©n√©ration")
        return False
    
    # Test 2: Int√©gration avec les mod√®les
    if not test_integration_models():
        print("‚ùå √âchec des tests d'int√©gration")
        return False
    
    print("\nüéâ TOUS LES TESTS SONT PASS√âS AVEC SUCC√àS!")
    print("=" * 70)
    print("‚úÖ Le syst√®me d'IDs uniques professionnels fonctionne parfaitement")
    print("‚úÖ Les formats sont structur√©s et personnalisables")
    print("‚úÖ L'int√©gration avec les mod√®les Django est op√©rationnelle")
    print("‚úÖ L'entreprise peut maintenant contr√¥ler ses r√©f√©rences")
    
    return True


if __name__ == "__main__":
    main()
