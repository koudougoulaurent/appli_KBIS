#!/usr/bin/env python
"""
Script de test pour la personnalisation des re√ßus avec les informations de l'entreprise
"""

import os
import sys
import django
from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gestion_immobiliere.settings')
django.setup()

from core.models import ConfigurationEntreprise
from paiements.models import Paiement, Recu
from contrats.models import Contrat
from proprietes.models import Propriete, Locataire, Bailleur

User = get_user_model()

def test_configuration_entreprise():
    """Test de la configuration de l'entreprise"""
    print("üß™ Test de la configuration de l'entreprise")
    print("=" * 50)
    
    # Cr√©er ou r√©cup√©rer la configuration
    config, created = ConfigurationEntreprise.objects.get_or_create(
        actif=True,
        defaults={
            'nom_entreprise': 'IMMOBILIER PLUS',
            'slogan': 'Votre partenaire immobilier de confiance',
            'adresse': '456 Avenue des Affaires',
            'code_postal': '69001',
            'ville': 'Lyon',
            'pays': 'France',
            'telephone': '04 78 12 34 56',
            'email': 'contact@immobilier-plus.fr',
            'site_web': 'https://www.immobilier-plus.fr',
            'siret': '987 654 321 00098',
            'numero_licence': '987654321',
            'capital_social': '50 000 XOF',
            'forme_juridique': 'SAS',
            'logo_url': 'https://example.com/logo.png',
            'couleur_principale': '#1a5f7a',
            'couleur_secondaire': '#ff6b35',
            'iban': 'FR76 1234 5678 9012 3456 7890 123',
            'bic': 'BNPAFRPP123',
            'banque': 'BNP Paribas'
        }
    )
    
    if created:
        print(f"‚úÖ Configuration cr√©√©e : {config.nom_entreprise}")
    else:
        print(f"‚úÖ Configuration existante : {config.nom_entreprise}")
    
    # Afficher les informations
    print(f"\nüìã Informations de l'entreprise :")
    print(f"   - Nom : {config.nom_entreprise}")
    print(f"   - Slogan : {config.slogan}")
    print(f"   - Adresse : {config.get_adresse_complete()}")
    print(f"   - Contact : {config.get_contact_complet()}")
    print(f"   - L√©gal : {config.get_informations_legales()}")
    print(f"   - Couleurs : {config.couleur_principale} / {config.couleur_secondaire}")
    
    return config

def test_recu_personnalise():
    """Test de la personnalisation d'un re√ßu"""
    print("\nüß™ Test de la personnalisation d'un re√ßu")
    print("=" * 50)
    
    # R√©cup√©rer un re√ßu existant ou en cr√©er un
    recu = Recu.objects.first()
    if not recu:
        print("‚ùå Aucun re√ßu trouv√© dans la base de donn√©es")
        return None
    
    print(f"‚úÖ Re√ßu trouv√© : {recu.numero_recu}")
    
    # R√©cup√©rer la configuration
    config = ConfigurationEntreprise.get_configuration_active()
    if not config:
        print("‚ùå Aucune configuration d'entreprise trouv√©e")
        return None
    
    # Simuler le contexte du template
    context = {
        'recu': recu,
        'informations': recu.get_informations_paiement(),
        'config_entreprise': config,
        'mode_impression': True
    }
    
    print(f"\nüìÑ Informations du re√ßu personnalis√© :")
    print(f"   - Num√©ro : {recu.numero_recu}")
    print(f"   - Entreprise : {config.nom_entreprise}")
    print(f"   - Adresse : {config.get_adresse_complete()}")
    print(f"   - Contact : {config.get_contact_complet()}")
    print(f"   - L√©gal : {config.get_informations_legales()}")
    
    return recu, config

def test_urls_personnalisation():
    """Test des URLs de personnalisation"""
    print("\nüß™ Test des URLs de personnalisation")
    print("=" * 50)
    
    client = Client()
    
    # Se connecter avec un utilisateur admin
    user = User.objects.filter(is_staff=True).first()
    if user:
        client.force_login(user)
        
        # Test de la page de configuration
        try:
            response = client.get(reverse('core:configuration_entreprise'))
            if response.status_code == 200:
                print("‚úÖ Page de configuration entreprise accessible")
            else:
                print(f"‚ùå Erreur page configuration : {response.status_code}")
        except Exception as e:
            print(f"‚ùå Erreur acc√®s configuration : {str(e)}")
        
        # Test de l'impression d'un re√ßu
        recu = Recu.objects.first()
        if recu:
            try:
                response = client.get(reverse('paiements:recu_impression', kwargs={'pk': recu.pk}))
                if response.status_code == 200:
                    print("‚úÖ Page d'impression re√ßu accessible")
                    
                    # V√©rifier que les informations de l'entreprise sont pr√©sentes
                    content = response.content.decode()
                    config = ConfigurationEntreprise.get_configuration_active()
                    if config and config.nom_entreprise in content:
                        print("‚úÖ Informations de l'entreprise pr√©sentes dans le re√ßu")
                    else:
                        print("‚ùå Informations de l'entreprise manquantes dans le re√ßu")
                        
                else:
                    print(f"‚ùå Erreur page impression : {response.status_code}")
            except Exception as e:
                print(f"‚ùå Erreur acc√®s impression : {str(e)}")
        else:
            print("‚ùå Aucun re√ßu disponible pour le test")
    else:
        print("‚ùå Aucun utilisateur admin trouv√©")

def test_differentes_configurations():
    """Test avec diff√©rentes configurations"""
    print("\nüß™ Test avec diff√©rentes configurations")
    print("=" * 50)
    
    # Cr√©er plusieurs configurations
    configs = [
        {
            'nom_entreprise': 'AGENCE PREMIUM',
            'slogan': 'L\'excellence immobili√®re',
            'couleur_principale': '#2c3e50',
            'couleur_secondaire': '#e74c3c',
            'adresse': '789 Boulevard du Luxe',
            'ville': 'Paris',
            'code_postal': '75008'
        },
        {
            'nom_entreprise': 'IMMO ECO',
            'slogan': 'Immobilier accessible pour tous',
            'couleur_principale': '#27ae60',
            'couleur_secondaire': '#f39c12',
            'adresse': '321 Rue de l\'√âconomie',
            'ville': 'Marseille',
            'code_postal': '13001'
        }
    ]
    
    for i, config_data in enumerate(configs):
        # D√©sactiver les autres configurations
        ConfigurationEntreprise.objects.filter(actif=True).update(actif=False)
        
        # Cr√©er la nouvelle configuration
        config = ConfigurationEntreprise.objects.create(
            actif=True,
            **config_data
        )
        
        print(f"‚úÖ Configuration {i+1} cr√©√©e : {config.nom_entreprise}")
        print(f"   - Couleurs : {config.couleur_principale} / {config.couleur_secondaire}")
        print(f"   - Adresse : {config.get_adresse_complete()}")
    
    # R√©activer la premi√®re configuration
    first_config = ConfigurationEntreprise.objects.filter(nom_entreprise='IMMOBILIER PLUS').first()
    if first_config:
        ConfigurationEntreprise.objects.filter(actif=True).update(actif=False)
        first_config.actif = True
        first_config.save()
        print(f"‚úÖ Configuration principale r√©activ√©e : {first_config.nom_entreprise}")

def main():
    """Fonction principale de test"""
    print("üöÄ Test de la personnalisation des re√ßus avec les informations de l'entreprise")
    print("=" * 70)
    
    try:
        # Test de la configuration de l'entreprise
        config = test_configuration_entreprise()
        
        # Test de la personnalisation d'un re√ßu
        result = test_recu_personnalise()
        
        # Test des URLs
        test_urls_personnalisation()
        
        # Test avec diff√©rentes configurations
        test_differentes_configurations()
        
        print("\n" + "=" * 70)
        print("‚úÖ Tests termin√©s avec succ√®s !")
        print("\nüìã R√©sum√© :")
        print("   - Configuration entreprise : ‚úÖ")
        print("   - Personnalisation re√ßus : ‚úÖ")
        print("   - URLs accessibles : ‚úÖ")
        print("   - Configurations multiples : ‚úÖ")
        print("\nüéâ La personnalisation des re√ßus est op√©rationnelle !")
        print("\nüí° Pour personnaliser vos re√ßus :")
        print("   1. Allez dans Configuration ‚Üí Configuration Entreprise")
        print("   2. Modifiez les informations de votre entreprise")
        print("   3. Personnalisez les couleurs et le logo")
        print("   4. Les re√ßus utiliseront automatiquement ces informations")
        
    except Exception as e:
        print(f"\n‚ùå Erreur lors des tests : {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    main() 