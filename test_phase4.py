#!/usr/bin/env python
"""
Script de test pour la Phase 4 - Syst√®me de Notifications
"""

import os
import sys
import django
import requests
from datetime import datetime

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gestion_immobiliere.settings')
django.setup()

from django.contrib.auth import get_user_model
from django.test import Client
from notifications.models import Notification, NotificationPreference
from contrats.models import Contrat
from paiements.models import Paiement
from proprietes.models import Propriete

User = get_user_model()


def test_notification_models():
    """Tester les mod√®les de notifications"""
    print("üß™ Test des mod√®les de notifications...")
    
    try:
        # V√©rifier que les notifications existent
        total_notifications = Notification.objects.count()
        print(f"‚úÖ {total_notifications} notifications trouv√©es")
        
        # V√©rifier les pr√©f√©rences
        total_preferences = NotificationPreference.objects.count()
        print(f"‚úÖ {total_preferences} pr√©f√©rences trouv√©es")
        
        # Tester les m√©thodes du mod√®le
        user = User.objects.first()
        if user:
            unread_count = Notification.get_unread_count(user)
            print(f"‚úÖ Nombre de notifications non lues : {unread_count}")
            
            recent_notifications = Notification.get_user_notifications(user, limit=5)
            print(f"‚úÖ {len(recent_notifications)} notifications r√©centes r√©cup√©r√©es")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test des mod√®les : {e}")
        return False


def test_notification_api():
    """Tester l'API des notifications"""
    print("\nüåê Test de l'API des notifications...")
    
    try:
        client = Client()
        
        # Se connecter avec un utilisateur
        user = User.objects.first()
        if not user:
            print("‚ùå Aucun utilisateur trouv√© pour les tests")
            return False
        
        client.force_login(user)
        
        # Test 1: Endpoint de comptage des notifications non lues
        response = client.get('/notifications/api/notifications/unread_count/')
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ API unread_count : {data.get('unread_count', 0)} notifications non lues")
        else:
            print(f"‚ùå API unread_count √©choue : {response.status_code}")
        
        # Test 2: Endpoint des notifications r√©centes
        response = client.get('/notifications/api/notifications/recent/')
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ API recent : {len(data)} notifications r√©centes")
        else:
            print(f"‚ùå API recent √©choue : {response.status_code}")
        
        # Test 3: Endpoint des pr√©f√©rences
        response = client.get('/notifications/api/preferences/my_preferences/')
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ API preferences : pr√©f√©rences r√©cup√©r√©es pour {data.get('user_username', 'N/A')}")
        else:
            print(f"‚ùå API preferences √©choue : {response.status_code}")
        
        # Test 4: Endpoint des notifications par type
        response = client.get('/notifications/api/notifications/by_type/?type=payment_due')
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ API by_type : {len(data)} notifications de type 'payment_due'")
        else:
            print(f"‚ùå API by_type √©choue : {response.status_code}")
        
        # Test 5: Endpoint des notifications haute priorit√©
        response = client.get('/notifications/api/notifications/high_priority/')
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ API high_priority : {len(data)} notifications haute priorit√©")
        else:
            print(f"‚ùå API high_priority √©choue : {response.status_code}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test de l'API : {e}")
        return False


def test_notification_creation():
    """Tester la cr√©ation de notifications"""
    print("\nüìù Test de cr√©ation de notifications...")
    
    try:
        user = User.objects.first()
        if not user:
            print("‚ùå Aucun utilisateur trouv√©")
            return False
        
        # Cr√©er une notification de test
        notification = Notification.create_notification(
            recipient=user,
            type='system_alert',
            title='Test de notification',
            message='Ceci est un test de cr√©ation de notification',
            priority='medium'
        )
        
        print(f"‚úÖ Notification cr√©√©e avec succ√®s (ID: {notification.id})")
        
        # Tester la m√©thode mark_as_read
        notification.mark_as_read()
        print("‚úÖ Notification marqu√©e comme lue")
        
        # Tester la m√©thode mark_as_unread
        notification.mark_as_unread()
        print("‚úÖ Notification marqu√©e comme non lue")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de notification : {e}")
        return False


def test_notification_preferences():
    """Tester les pr√©f√©rences de notification"""
    print("\n‚öôÔ∏è Test des pr√©f√©rences de notification...")
    
    try:
        user = User.objects.first()
        if not user:
            print("‚ùå Aucun utilisateur trouv√©")
            return False
        
        # Cr√©er ou r√©cup√©rer les pr√©f√©rences
        preferences, created = NotificationPreference.objects.get_or_create(
            user=user,
            defaults={
                'email_notifications': True,
                'browser_notifications': True,
                'payment_due_email': True,
                'payment_received_email': True,
                'contract_expiring_email': True,
                'maintenance_email': True,
                'system_alerts_email': True,
                'daily_digest': False,
                'weekly_digest': True,
            }
        )
        
        if created:
            print("‚úÖ Nouvelles pr√©f√©rences cr√©√©es")
        else:
            print("‚úÖ Pr√©f√©rences existantes r√©cup√©r√©es")
        
        # Tester les pr√©f√©rences par email
        email_prefs = preferences.get_email_preferences()
        print(f"‚úÖ Pr√©f√©rences email : {email_prefs}")
        
        # Modifier les pr√©f√©rences
        preferences.email_notifications = False
        preferences.save()
        print("‚úÖ Pr√©f√©rences modifi√©es avec succ√®s")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test des pr√©f√©rences : {e}")
        return False


def test_notification_statistics():
    """Tester les statistiques des notifications"""
    print("\nüìä Test des statistiques des notifications...")
    
    try:
        # Statistiques globales
        total_notifications = Notification.objects.count()
        unread_notifications = Notification.objects.filter(is_read=False).count()
        high_priority_notifications = Notification.objects.filter(
            priority__in=['high', 'urgent']
        ).count()
        
        print(f"‚úÖ Statistiques globales :")
        print(f"   - Total : {total_notifications}")
        print(f"   - Non lues : {unread_notifications}")
        print(f"   - Haute priorit√© : {high_priority_notifications}")
        
        # Statistiques par type
        print(f"‚úÖ Statistiques par type :")
        for notification_type, count in Notification.objects.values_list('type').annotate(
            count=django.db.models.Count('id')
        ).order_by('-count'):
            type_display = dict(Notification.TYPE_CHOICES)[notification_type]
            print(f"   - {type_display} : {count}")
        
        # Statistiques par priorit√©
        print(f"‚úÖ Statistiques par priorit√© :")
        for priority, count in Notification.objects.values_list('priority').annotate(
            count=django.db.models.Count('id')
        ).order_by('-count'):
            priority_display = dict(Notification.PRIORITY_CHOICES)[priority]
            print(f"   - {priority_display} : {count}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test des statistiques : {e}")
        return False


def test_notification_integration():
    """Tester l'int√©gration avec les autres modules"""
    print("\nüîó Test d'int√©gration avec les autres modules...")
    
    try:
        # V√©rifier les r√©f√©rences vers les contrats
        contrats_with_notifications = Notification.objects.filter(
            content_type__model='contrat'
        ).count()
        print(f"‚úÖ {contrats_with_notifications} notifications li√©es √† des contrats")
        
        # V√©rifier les r√©f√©rences vers les paiements
        paiements_with_notifications = Notification.objects.filter(
            content_type__model='paiement'
        ).count()
        print(f"‚úÖ {paiements_with_notifications} notifications li√©es √† des paiements")
        
        # V√©rifier les r√©f√©rences vers les propri√©t√©s
        proprietes_with_notifications = Notification.objects.filter(
            content_type__model='propriete'
        ).count()
        print(f"‚úÖ {proprietes_with_notifications} notifications li√©es √† des propri√©t√©s")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test d'int√©gration : {e}")
        return False


def main():
    """Fonction principale de test"""
    print("üöÄ Test complet de la Phase 4 - Syst√®me de Notifications")
    print("=" * 60)
    
    tests = [
        test_notification_models,
        test_notification_api,
        test_notification_creation,
        test_notification_preferences,
        test_notification_statistics,
        test_notification_integration,
    ]
    
    passed_tests = 0
    total_tests = len(tests)
    
    for test in tests:
        try:
            if test():
                passed_tests += 1
        except Exception as e:
            print(f"‚ùå Erreur lors de l'ex√©cution du test {test.__name__} : {e}")
    
    print("\n" + "=" * 60)
    print(f"üìã R√©sum√© des tests : {passed_tests}/{total_tests} tests r√©ussis")
    
    if passed_tests == total_tests:
        print("üéâ Tous les tests sont pass√©s avec succ√®s !")
        print("\n‚úÖ La Phase 4 (Syst√®me de Notifications) est op√©rationnelle")
        print("\nüìù Prochaines √©tapes :")
        print("   1. Acc√©der aux notifications : http://127.0.0.1:8000/notifications/")
        print("   2. Tester l'API : http://127.0.0.1:8000/notifications/api/")
        print("   3. V√©rifier l'admin : http://127.0.0.1:8000/admin/notifications/")
        print("   4. Continuer avec la Phase 5 (Rapports et Statistiques)")
    else:
        print("‚ö†Ô∏è Certains tests ont √©chou√©. V√©rifiez les erreurs ci-dessus.")
    
    return passed_tests == total_tests


if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1) 