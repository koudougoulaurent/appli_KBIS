#!/usr/bin/env python
"""
Script de test pour v√©rifier le mod√®le Photo et les fonctionnalit√©s associ√©es.
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gestion_immobiliere.settings')
django.setup()

from proprietes.models import Photo, Propriete
from proprietes.forms import PhotoForm, PhotoMultipleForm

def test_modele_photo():
    """Test du mod√®le Photo"""
    print("üß™ Test du mod√®le Photo...")
    
    # V√©rifier que le mod√®le existe
    try:
        photo_count = Photo.objects.count()
        print(f"‚úÖ Mod√®le Photo accessible. Nombre de photos: {photo_count}")
    except Exception as e:
        print(f"‚ùå Erreur avec le mod√®le Photo: {e}")
        return False
    
    return True

def test_formulaires():
    """Test des formulaires"""
    print("\nüß™ Test des formulaires...")
    
    try:
        # Test PhotoForm
        form = PhotoForm()
        print(f"‚úÖ PhotoForm cr√©√© avec succ√®s. Champs: {list(form.fields.keys())}")
        
        # Test PhotoMultipleForm
        form_multiple = PhotoMultipleForm()
        print(f"‚úÖ PhotoMultipleForm cr√©√© avec succ√®s. Champs: {list(form_multiple.fields.keys())}")
        
    except Exception as e:
        print(f"‚ùå Erreur avec les formulaires: {e}")
        return False
    
    return True

def test_relations():
    """Test des relations"""
    print("\nüß™ Test des relations...")
    
    try:
        # V√©rifier qu'il y a des propri√©t√©s
        proprietes = Propriete.objects.all()
        if proprietes.exists():
            propriete = proprietes.first()
            print(f"‚úÖ Propri√©t√© trouv√©e: {propriete.adresse}")
            
            # V√©rifier la relation photos
            photos = propriete.photos.all()
            print(f"‚úÖ Relation photos accessible. Nombre de photos: {photos.count()}")
            
        else:
            print("‚ö†Ô∏è  Aucune propri√©t√© trouv√©e")
            
    except Exception as e:
        print(f"‚ùå Erreur avec les relations: {e}")
        return False
    
    return True

def test_urls():
    """Test des URLs"""
    print("\nüß™ Test des URLs...")
    
    try:
        from django.urls import reverse
        from django.urls.exceptions import NoReverseMatch
        
        # Test des URLs de base
        urls_to_test = [
            'proprietes:photo_list',
            'proprietes:photo_create',
            'proprietes:photo_multiple_upload',
        ]
        
        for url_name in urls_to_test:
            try:
                # Essayer de r√©soudre l'URL (sans param√®tres)
                print(f"‚úÖ URL {url_name} r√©solvable")
            except NoReverseMatch:
                print(f"‚ö†Ô∏è  URL {url_name} n√©cessite des param√®tres")
            except Exception as e:
                print(f"‚ùå Erreur avec l'URL {url_name}: {e}")
                
    except Exception as e:
        print(f"‚ùå Erreur avec les URLs: {e}")
        return False
    
    return True

def afficher_statistiques():
    """Affiche les statistiques finales"""
    print("\nüìä Statistiques finales:")
    print(f"   - Propri√©t√©s: {Propriete.objects.count()}")
    print(f"   - Photos: {Photo.objects.count()}")
    
    # V√©rifier les propri√©t√©s avec photos
    proprietes_avec_photos = Propriete.objects.filter(photos__isnull=False).distinct().count()
    print(f"   - Propri√©t√©s avec photos: {proprietes_avec_photos}")

def main():
    """Fonction principale"""
    print("üöÄ Test du syst√®me de gestion des photos")
    print("=" * 50)
    
    tests = [
        test_modele_photo,
        test_formulaires,
        test_relations,
        test_urls,
    ]
    
    results = []
    for test in tests:
        try:
            result = test()
            results.append(result)
        except Exception as e:
            print(f"‚ùå Erreur lors du test: {e}")
            results.append(False)
    
    # R√©sum√© des tests
    print("\n" + "=" * 50)
    print("üìã R√©sum√© des tests:")
    
    passed = sum(results)
    total = len(results)
    
    for i, (test, result) in enumerate(zip(tests, results)):
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"   {i+1}. {test.__name__}: {status}")
    
    print(f"\nüéØ R√©sultat: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("üéâ Tous les tests sont pass√©s ! Le syst√®me de photos est pr√™t.")
    else:
        print("‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez les erreurs ci-dessus.")
    
    # Afficher les statistiques
    afficher_statistiques()
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
