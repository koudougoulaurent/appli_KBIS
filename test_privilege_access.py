#!/usr/bin/env python3
"""
SCRIPT DE V√âRIFICATION COMPL√àTE DE S√âCURIT√â
============================================

Ce script v√©rifie SYST√âMATIQUEMENT toute la plateforme pour identifier :
1. Les violations de groupe (ADMINISTRATION au lieu de PRIVILEGE uniquement)
2. Les violations de s√©paration des responsabilit√©s
3. Les acc√®s non autoris√©s aux donn√©es
4. Les modifications de donn√©es valid√©es sans autorisation

EX√âCUTION : python test_privilege_access.py
"""

import os
import re
import sys
from pathlib import Path

def scan_file_for_violations(file_path):
    """Scanne un fichier pour identifier les violations de s√©curit√©"""
    violations = []
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
            lines = content.split('\n')
            
        for line_num, line in enumerate(lines, 1):
            line = line.strip()
            
            # 1. V√âRIFICATION DES VIOLATIONS DE GROUPE
            if 'ADMINISTRATION' in line and 'PRIVILEGE' in line:
                # Recherche des patterns probl√©matiques
                patterns_violation = [
                    r'not in \[.*ADMINISTRATION.*PRIVILEGE.*\]',
                    r'in \[.*ADMINISTRATION.*PRIVILEGE.*\]',
                    r'ADMINISTRATION.*PRIVILEGE',
                    r'PRIVILEGE.*ADMINISTRATION'
                ]
                
                for pattern in patterns_violation:
                    if re.search(pattern, line):
                        violations.append({
                            'type': 'VIOLATION_GROUPE',
                            'severity': 'CRITIQUE',
                            'line': line_num,
                            'description': f'Acc√®s autoris√© √† ADMINISTRATION ET PRIVILEGE au lieu de PRIVILEGE uniquement',
                            'code': line
                        })
                        break
            
            # 2. V√âRIFICATION DES MODIFICATIONS DE DONN√âES VALID√âES
            if any(keyword in line for keyword in ['modifier_', 'valider_', 'invalider_']):
                if 'statut' in line and 'valide' in line:
                    if 'PRIVILEGE' not in line:
                        violations.append({
                            'type': 'VIOLATION_VALIDATION',
                            'severity': 'CRITIQUE',
                            'line': line_num,
                            'description': f'Modification de donn√©es valid√©es sans v√©rification PRIVILEGE',
                            'code': line
                        })
            
            # 3. V√âRIFICATION DES SUPPRESSIONS
            if any(keyword in line for keyword in ['supprimer_', 'delete']):
                if 'ADMINISTRATION' in line and 'PRIVILEGE' in line:
                    violations.append({
                        'type': 'VIOLATION_SUPPRESSION',
                        'severity': 'CRITIQUE',
                        'line': line_num,
                        'description': f'Suppression autoris√©e √† ADMINISTRATION ET PRIVILEGE au lieu de PRIVILEGE uniquement',
                        'code': line
                    })
            
            # 4. V√âRIFICATION DES ACC√àS AUX DONN√âES
            if any(keyword in line for keyword in ['corbeille_', 'orphelins_', 'audit_']):
                if 'ADMINISTRATION' in line and 'PRIVILEGE' in line:
                    violations.append({
                        'type': 'VIOLATION_ACCES_DONNEES',
                        'severity': 'CRITIQUE',
                        'line': line_num,
                        'description': f'Acc√®s aux donn√©es sensibles autoris√© √† ADMINISTRATION ET PRIVILEGE au lieu de PRIVILEGE uniquement',
                        'code': line
                    })
            
            # 5. V√âRIFICATION DES R√âSILIATIONS
            if 'resilier' in line.lower():
                if 'ADMINISTRATION' in line and 'PRIVILEGE' in line:
                    violations.append({
                        'type': 'VIOLATION_RESILIATION',
                        'severity': 'CRITIQUE',
                        'line': line_num,
                        'description': f'R√©siliation autoris√©e √† ADMINISTRATION ET PRIVILEGE au lieu de PRIVILEGE uniquement',
                        'code': line
                    })
    
    except Exception as e:
        violations.append({
            'type': 'ERREUR_LECTURE',
            'severity': 'ERREUR',
            'line': 0,
            'description': f'Erreur lors de la lecture du fichier : {str(e)}',
            'code': ''
        })
    
    return violations

def scan_directory_for_violations(directory_path):
    """Scanne un r√©pertoire pour identifier les violations de s√©curit√©"""
    all_violations = {}
    
    # Extensions de fichiers √† scanner
    extensions = ['.py', '.html', '.js', '.css']
    
    for root, dirs, files in os.walk(directory_path):
        # Ignorer les r√©pertoires syst√®me
        dirs[:] = [d for d in dirs if not d.startswith('.') and d not in ['__pycache__', 'migrations', 'venv', 'env']]
        
        for file in files:
            if any(file.endswith(ext) for ext in extensions):
                file_path = os.path.join(root, file)
                violations = scan_file_for_violations(file_path)
                
                if violations:
                    all_violations[file_path] = violations
    
    return all_violations

def generate_security_report(violations):
    """G√©n√®re un rapport de s√©curit√© d√©taill√©"""
    if not violations:
        print("‚úÖ AUCUNE VIOLATION DE S√âCURIT√â D√âTECT√âE !")
        return
    
    print("üö® RAPPORT DE S√âCURIT√â - VIOLATIONS D√âTECT√âES")
    print("=" * 80)
    
    # Compter par type et s√©v√©rit√©
    stats = {}
    for file_path, file_violations in violations.items():
        for violation in file_violations:
            violation_type = violation['type']
            severity = violation['severity']
            
            if violation_type not in stats:
                stats[violation_type] = {}
            if severity not in stats[violation_type]:
                stats[violation_type][severity] = 0
            
            stats[violation_type][severity] += 1
    
    # Afficher les statistiques
    print("\nüìä STATISTIQUES DES VIOLATIONS :")
    for violation_type, severities in stats.items():
        print(f"\n  {violation_type}:")
        for severity, count in severities.items():
            print(f"    {severity}: {count}")
    
    # Afficher les d√©tails par fichier
    print("\nüîç D√âTAILS DES VIOLATIONS PAR FICHIER :")
    for file_path, file_violations in violations.items():
        print(f"\nüìÅ {file_path}")
        print("-" * len(file_path))
        
        for violation in file_violations:
            print(f"  Ligne {violation['line']} - {violation['severity']}: {violation['description']}")
            if violation['code']:
                print(f"    Code: {violation['code']}")
    
    # Recommandations
    print("\nüí° RECOMMANDATIONS :")
    print("1. Corriger IMM√âDIATEMENT toutes les violations CRITIQUE")
    print("2. V√©rifier que seuls les utilisateurs PRIVILEGE peuvent :")
    print("   - Supprimer des √©l√©ments")
    print("   - Modifier des donn√©es valid√©es")
    print("   - Acc√©der aux corbeilles et donn√©es orphelines")
    print("   - R√©silier des contrats")
    print("3. Impl√©menter des tests automatis√©s de s√©curit√©")
    print("4. Former les d√©veloppeurs aux bonnes pratiques de s√©curit√©")

def main():
    """Fonction principale"""
    print("üîí V√âRIFICATION COMPL√àTE DE S√âCURIT√â DE LA PLATEFORME")
    print("=" * 60)
    
    # D√©terminer le r√©pertoire de travail
    if len(sys.argv) > 1:
        directory = sys.argv[1]
    else:
        directory = os.getcwd()
    
    print(f"üìÇ Scan du r√©pertoire : {directory}")
    print("‚è≥ Analyse en cours...")
    
    # Scanner le r√©pertoire
    violations = scan_directory_for_violations(directory)
    
    # G√©n√©rer le rapport
    generate_security_report(violations)
    
    # R√©sum√© final
    total_violations = sum(len(file_violations) for file_violations in violations.values())
    if total_violations > 0:
        print(f"\n‚ö†Ô∏è  TOTAL : {total_violations} violation(s) de s√©curit√© d√©tect√©e(s)")
        print("üö® ACTION IMM√âDIATE REQUISE !")
        return 1
    else:
        print("\n‚úÖ PLATEFORME S√âCURIS√âE - Aucune violation d√©tect√©e")
        return 0

if __name__ == "__main__":
    sys.exit(main()) 