#!/usr/bin/env python3
"""
Script de test pour v√©rifier le bon fonctionnement du syst√®me de privil√®ge.
Ce script teste l'importation des modules et la cr√©ation des vues.
"""

import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'projetImo.settings')
django.setup()

def test_imports():
    """Teste l'importation des modules de privil√®ge."""
    try:
        from utilisateurs.mixins import PrivilegeButtonsMixin, PrivilegeDeleteMixin, PrivilegeRequiredMixin
        print("‚úÖ Import des mixins r√©ussi")
        
        from utilisateurs.views import PrivilegeActionView, PrivilegeDeleteView, PrivilegeDisableView
        print("‚úÖ Import des vues de privil√®ge r√©ussi")
        
        from utilisateurs.views import UtilisateurListView
        print("‚úÖ Import de la vue UtilisateurListView r√©ussi")
        
        return True
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        return False

def test_mixin_inheritance():
    """Teste que les vues h√©ritent bien du mixin de privil√®ge."""
    try:
        from utilisateurs.views import UtilisateurListView
        from proprietes.views import ProprieteListView, BailleurListView, LocataireListView
        from paiements.views import PaiementListView, RecuListView
        from contrats.views import ContratListView, QuittanceListView
        from notifications.views import NotificationListView
        
        # V√©rifier que les vues h√©ritent du mixin
        views_to_check = [
            (UtilisateurListView, "UtilisateurListView"),
            (ProprieteListView, "ProprieteListView"),
            (BailleurListView, "BailleurListView"),
            (LocataireListView, "LocataireListView"),
            (PaiementListView, "PaiementListView"),
            (RecuListView, "RecuListView"),
            (ContratListView, "ContratListView"),
            (QuittanceListView, "QuittanceListView"),
            (NotificationListView, "NotificationListView"),
        ]
        
        for view_class, view_name in views_to_check:
            if hasattr(view_class, 'get_privilege_actions'):
                print(f"‚úÖ {view_name} h√©rite du PrivilegeButtonsMixin")
            else:
                print(f"‚ùå {view_name} n'h√©rite pas du PrivilegeButtonsMixin")
                return False
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors du test d'h√©ritage: {e}")
        return False

def test_urls():
    """Teste que les URLs de privil√®ge sont bien configur√©es."""
    try:
        from django.urls import reverse, NoReverseMatch
        
        # URLs √† tester
        urls_to_test = [
            'utilisateurs:privilege_delete_element_generic',
            'utilisateurs:privilege_disable_element_generic',
            'utilisateurs:privilege_delete_bailleur',
            'utilisateurs:privilege_delete_locataire',
            'utilisateurs:privilege_delete_propriete',
            'utilisateurs:privilege_bulk_actions',
        ]
        
        for url_name in urls_to_test:
            try:
                # Essayer de construire l'URL avec des param√®tres factices
                if 'delete' in url_name or 'disable' in url_name:
                    if 'generic' in url_name:
                        url = reverse(url_name, kwargs={'model_name': 'test', 'element_id': 1})
                    else:
                        url = reverse(url_name, kwargs={'element_id': 1})
                else:
                    url = reverse(url_name)
                print(f"‚úÖ URL {url_name} configur√©e correctement: {url}")
            except NoReverseMatch as e:
                print(f"‚ùå URL {url_name} non configur√©e: {e}")
                return False
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors du test des URLs: {e}")
        return False

def test_template_inclusion():
    """Teste que le template de base inclut bien les boutons de privil√®ge."""
    try:
        from django.template.loader import get_template
        
        # V√©rifier que le template de base existe
        template = get_template('base_liste_intelligente.html')
        template_content = template.template.source
        
        # V√©rifier la pr√©sence des √©l√©ments cl√©s
        required_elements = [
            'privilege_buttons.html',
            'Actions PRIVILEGE',
            'privilege-actions-column'
        ]
        
        for element in required_elements:
            if element in template_content:
                print(f"‚úÖ √âl√©ment '{element}' trouv√© dans le template")
            else:
                print(f"‚ùå √âl√©ment '{element}' manquant dans le template")
                return False
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors du test du template: {e}")
        return False

def main():
    """Fonction principale de test."""
    print("üß™ Test du syst√®me de privil√®ge")
    print("=" * 50)
    
    tests = [
        ("Import des modules", test_imports),
        ("H√©ritage des mixins", test_mixin_inheritance),
        ("Configuration des URLs", test_urls),
        ("Inclusion des templates", test_template_inclusion),
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\nüîç Test: {test_name}")
        print("-" * 30)
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erreur lors du test: {e}")
            results.append((test_name, False))
    
    # R√©sum√© des tests
    print("\n" + "=" * 50)
    print("üìä R√âSUM√â DES TESTS")
    print("=" * 50)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS√â" if result else "‚ùå √âCHOU√â"
        print(f"{status} - {test_name}")
    
    print(f"\nüéØ R√©sultat: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("üéâ Tous les tests sont pass√©s ! Le syst√®me de privil√®ge est correctement configur√©.")
        return 0
    else:
        print("‚ö†Ô∏è  Certains tests ont √©chou√©. V√©rifiez la configuration.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
