#!/usr/bin/env python
"""
Script de test pour v√©rifier la s√©curit√© des formulaires et la sauvegarde des donn√©es
"""

import os
import sys
import django
from datetime import datetime, timedelta

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gestion_immobiliere.settings')
django.setup()

from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.core.exceptions import ValidationError
from django.db import transaction
from proprietes.models import Bailleur, Locataire, Propriete, TypeBien
from proprietes.forms import BailleurForm, LocataireForm, ProprieteForm
from core.save_handlers import DataSaveHandler
from core.validators import SecurityValidator, DataSanitizer, SecurityChecks

Utilisateur = get_user_model()


class SecurityTestSuite:
    """Suite de tests de s√©curit√© pour les formulaires"""
    
    def __init__(self):
        self.client = Client()
        self.test_user = None
        self.results = {
            'passed': 0,
            'failed': 0,
            'errors': []
        }
    
    def run_all_tests(self):
        """Ex√©cuter tous les tests de s√©curit√©"""
        
        print("üîí TESTS DE S√âCURIT√â DES FORMULAIRES")
        print("=" * 60)
        
        # Cr√©er un utilisateur de test
        self._create_test_user()
        
        # Tests de validation des donn√©es
        self._test_data_validation()
        
        # Tests de s√©curit√© des formulaires
        self._test_form_security()
        
        # Tests de sauvegarde des donn√©es
        self._test_data_save()
        
        # Tests de nettoyage des donn√©es
        self._test_data_sanitization()
        
        # Tests de protection contre les attaques
        self._test_attack_protection()
        
        # Afficher les r√©sultats
        self._print_results()
    
    def _create_test_user(self):
        """Cr√©er un utilisateur de test"""
        try:
            self.test_user, created = Utilisateur.objects.get_or_create(
                username='test_security',
                defaults={
                    'email': 'test@security.com',
                    'first_name': 'Test',
                    'last_name': 'Security',
                    'is_staff': True,
                    'is_superuser': True
                }
            )
            if created:
                self.test_user.set_password('testpass123')
                self.test_user.save()
                print("‚úÖ Utilisateur de test cr√©√©")
            else:
                print("‚úÖ Utilisateur de test existant")
        except Exception as e:
            print(f"‚ùå Erreur cr√©ation utilisateur: {e}")
    
    def _test_data_validation(self):
        """Tester la validation des donn√©es"""
        
        print("\nüìã Tests de validation des donn√©es")
        print("-" * 40)
        
        # Test validation t√©l√©phone
        self._test_phone_validation()
        
        # Test validation email
        self._test_email_validation()
        
        # Test validation code postal
        self._test_postal_code_validation()
        
        # Test validation IBAN
        self._test_iban_validation()
        
        # Test validation montants
        self._test_amount_validation()
    
    def _test_phone_validation(self):
        """Tester la validation des t√©l√©phones"""
        
        test_cases = [
            ("01 23 45 67 89", True, "T√©l√©phone fran√ßais valide"),
            ("+33 1 23 45 67 89", True, "T√©l√©phone fran√ßais avec indicatif"),
            ("0123456789", True, "T√©l√©phone sans espaces"),
            ("123", False, "T√©l√©phone trop court"),
            ("abc", False, "T√©l√©phone avec lettres"),
            ("01 23 45 67 89 00 00", False, "T√©l√©phone trop long"),
        ]
        
        for phone, expected, description in test_cases:
            try:
                result = SecurityValidator.validate_phone_number(phone)
                if expected:
                    print(f"‚úÖ {description}")
                    self.results['passed'] += 1
                else:
                    print(f"‚ùå {description} - Devrait √©chouer")
                    self.results['failed'] += 1
            except ValidationError:
                if not expected:
                    print(f"‚úÖ {description} - √âchec attendu")
                    self.results['passed'] += 1
                else:
                    print(f"‚ùå {description} - √âchec inattendu")
                    self.results['failed'] += 1
    
    def _test_email_validation(self):
        """Tester la validation des emails"""
        
        test_cases = [
            ("test@example.com", True, "Email valide"),
            ("test.email@domain.co.uk", True, "Email avec sous-domaine"),
            ("test+tag@example.com", True, "Email avec tag"),
            ("invalid-email", False, "Email invalide"),
            ("test@", False, "Email incomplet"),
            ("@example.com", False, "Email sans nom"),
        ]
        
        for email, expected, description in test_cases:
            try:
                result = DataSanitizer.sanitize_email(email)
                if expected:
                    print(f"‚úÖ {description}")
                    self.results['passed'] += 1
                else:
                    print(f"‚ùå {description} - Devrait √©chouer")
                    self.results['failed'] += 1
            except Exception:
                if not expected:
                    print(f"‚úÖ {description} - √âchec attendu")
                    self.results['passed'] += 1
                else:
                    print(f"‚ùå {description} - √âchec inattendu")
                    self.results['failed'] += 1
    
    def _test_postal_code_validation(self):
        """Tester la validation des codes postaux"""
        
        test_cases = [
            ("75001", True, "Code postal valide"),
            ("12345", True, "Code postal valide"),
            ("1234", False, "Code postal trop court"),
            ("123456", False, "Code postal trop long"),
            ("abc12", False, "Code postal avec lettres"),
            ("12 345", True, "Code postal avec espace"),
        ]
        
        for postal, expected, description in test_cases:
            try:
                result = SecurityValidator.validate_postal_code(postal)
                if expected:
                    print(f"‚úÖ {description}")
                    self.results['passed'] += 1
                else:
                    print(f"‚ùå {description} - Devrait √©chouer")
                    self.results['failed'] += 1
            except ValidationError:
                if not expected:
                    print(f"‚úÖ {description} - √âchec attendu")
                    self.results['passed'] += 1
                else:
                    print(f"‚ùå {description} - √âchec inattendu")
                    self.results['failed'] += 1
    
    def _test_iban_validation(self):
        """Tester la validation des IBAN"""
        
        test_cases = [
            ("FR7630006000011234567890189", True, "IBAN fran√ßais valide"),
            ("DE89370400440532013000", True, "IBAN allemand valide"),
            ("123", False, "IBAN trop court"),
            ("FR7630006000011234567890189XX", False, "IBAN fran√ßais invalide"),
        ]
        
        for iban, expected, description in test_cases:
            try:
                result = SecurityValidator.validate_iban(iban)
                if expected:
                    print(f"‚úÖ {description}")
                    self.results['passed'] += 1
                else:
                    print(f"‚ùå {description} - Devrait √©chouer")
                    self.results['failed'] += 1
            except ValidationError:
                if not expected:
                    print(f"‚úÖ {description} - √âchec attendu")
                    self.results['passed'] += 1
                else:
                    print(f"‚ùå {description} - √âchec inattendu")
                    self.results['failed'] += 1
    
    def _test_amount_validation(self):
        """Tester la validation des montants"""
        
        test_cases = [
            (100.50, True, "Montant positif"),
            (0, True, "Montant nul"),
            (-10, False, "Montant n√©gatif"),
            (999999999.99, True, "Montant maximum"),
            (1000000000, False, "Montant trop √©lev√©"),
        ]
        
        for amount, expected, description in test_cases:
            try:
                result = SecurityValidator.validate_amount(amount)
                if expected:
                    print(f"‚úÖ {description}")
                    self.results['passed'] += 1
                else:
                    print(f"‚ùå {description} - Devrait √©chouer")
                    self.results['failed'] += 1
            except ValidationError:
                if not expected:
                    print(f"‚úÖ {description} - √âchec attendu")
                    self.results['passed'] += 1
                else:
                    print(f"‚ùå {description} - √âchec inattendu")
                    self.results['failed'] += 1
    
    def _test_form_security(self):
        """Tester la s√©curit√© des formulaires"""
        
        print("\nüõ°Ô∏è Tests de s√©curit√© des formulaires")
        print("-" * 40)
        
        # Test formulaire bailleur
        self._test_bailleur_form_security()
        
        # Test formulaire locataire
        self._test_locataire_form_security()
        
        # Test formulaire propri√©t√©
        self._test_propriete_form_security()
    
    def _test_bailleur_form_security(self):
        """Tester la s√©curit√© du formulaire bailleur"""
        
        # Donn√©es valides
        valid_data = {
            'nom': 'Dupont',
            'prenom': 'Jean',
            'email': 'jean.dupont@example.com',
            'telephone': '01 23 45 67 89',
            'adresse': '123 Rue de la Paix, 75001 Paris',
        }
        
        form = BailleurForm(data=valid_data)
        if form.is_valid():
            print("‚úÖ Formulaire bailleur - donn√©es valides")
            self.results['passed'] += 1
        else:
            print(f"‚ùå Formulaire bailleur - donn√©es valides: {form.errors}")
            self.results['failed'] += 1
        
        # Donn√©es invalides (injection SQL)
        invalid_data = valid_data.copy()
        invalid_data['nom'] = "'; DROP TABLE proprietes_bailleur; --"
        
        form = BailleurForm(data=invalid_data)
        if not form.is_valid():
            print("‚úÖ Formulaire bailleur - injection SQL d√©tect√©e")
            self.results['passed'] += 1
        else:
            print("‚ùå Formulaire bailleur - injection SQL non d√©tect√©e")
            self.results['failed'] += 1
    
    def _test_locataire_form_security(self):
        """Tester la s√©curit√© du formulaire locataire"""
        
        # Donn√©es valides
        valid_data = {
            'nom': 'Martin',
            'prenom': 'Marie',
            'email': 'marie.martin@example.com',
            'telephone': '01 98 76 54 32',
            'adresse_actuelle': '456 Avenue des Champs, 75008 Paris',
        }
        
        form = LocataireForm(data=valid_data)
        if form.is_valid():
            print("‚úÖ Formulaire locataire - donn√©es valides")
            self.results['passed'] += 1
        else:
            print(f"‚ùå Formulaire locataire - donn√©es valides: {form.errors}")
            self.results['failed'] += 1
    
    def _test_propriete_form_security(self):
        """Tester la s√©curit√© du formulaire propri√©t√©"""
        
        # Cr√©er un type de bien pour le test
        type_bien, created = TypeBien.objects.get_or_create(
            nom='Appartement',
            defaults={'description': 'Appartement standard'}
        )
        
        # Cr√©er un bailleur pour le test
        bailleur, created = Bailleur.objects.get_or_create(
            nom='Test',
            prenom='Bailleur',
            email='test.bailleur@example.com',
            defaults={
                'telephone': '01 11 11 11 11',
                'adresse': 'Test',
            }
        )
        
        # Donn√©es valides
        valid_data = {
            'titre': 'Appartement Test',
            'adresse': '789 Boulevard Test',
            'ville': 'Paris',
            'code_postal': '75016',
            'pays': 'France',
            'surface': 75.5,
            'nombre_pieces': 4,
            'nombre_chambres': 2,
            'nombre_salles_bain': 1,
            'loyer_actuel': 1200.00,
            'charges': 150.00,
            'etat': 'bon',
            'bailleur': bailleur.id,
            'type_bien': type_bien.id,
        }
        
        form = ProprieteForm(data=valid_data)
        if form.is_valid():
            print("‚úÖ Formulaire propri√©t√© - donn√©es valides")
            self.results['passed'] += 1
        else:
            print(f"‚ùå Formulaire propri√©t√© - donn√©es valides: {form.errors}")
            self.results['failed'] += 1
    
    def _test_data_save(self):
        """Tester la sauvegarde des donn√©es"""
        
        print("\nüíæ Tests de sauvegarde des donn√©es")
        print("-" * 40)
        
        # Test sauvegarde bailleur
        self._test_bailleur_save()
        
        # Test sauvegarde locataire
        self._test_locataire_save()
        
        # Test sauvegarde propri√©t√©
        self._test_propriete_save()
    
    def _test_bailleur_save(self):
        """Tester la sauvegarde d'un bailleur"""
        
        bailleur_data = {
            'nom': 'Test',
            'prenom': 'Sauvegarde',
            'email': 'test.sauvegarde@example.com',
            'telephone': '01 22 33 44 55',
            'adresse': 'Test Adresse',
        }
        
        try:
            bailleur, success, message = DataSaveHandler.save_bailleur(bailleur_data, self.test_user)
            if success and bailleur:
                print("‚úÖ Sauvegarde bailleur r√©ussie")
                self.results['passed'] += 1
                
                # V√©rifier que les donn√©es sont bien sauvegard√©es
                saved_bailleur = Bailleur.objects.get(pk=bailleur.pk)
                if (saved_bailleur.nom == bailleur_data['nom'] and 
                    saved_bailleur.prenom == bailleur_data['prenom']):
                    print("‚úÖ Donn√©es bailleur correctement sauvegard√©es")
                    self.results['passed'] += 1
                else:
                    print("‚ùå Donn√©es bailleur mal sauvegard√©es")
                    self.results['failed'] += 1
            else:
                print(f"‚ùå Sauvegarde bailleur √©chou√©e: {message}")
                self.results['failed'] += 1
        except Exception as e:
            print(f"‚ùå Erreur sauvegarde bailleur: {e}")
            self.results['failed'] += 1
    
    def _test_locataire_save(self):
        """Tester la sauvegarde d'un locataire"""
        
        locataire_data = {
            'nom': 'Test',
            'prenom': 'Locataire',
            'email': 'test.locataire@example.com',
            'telephone': '01 33 44 55 66',
            'adresse_actuelle': 'Test Adresse Locataire',
        }
        
        try:
            locataire, success, message = DataSaveHandler.save_locataire(locataire_data, self.test_user)
            if success and locataire:
                print("‚úÖ Sauvegarde locataire r√©ussie")
                self.results['passed'] += 1
            else:
                print(f"‚ùå Sauvegarde locataire √©chou√©e: {message}")
                self.results['failed'] += 1
        except Exception as e:
            print(f"‚ùå Erreur sauvegarde locataire: {e}")
            self.results['failed'] += 1
    
    def _test_propriete_save(self):
        """Tester la sauvegarde d'une propri√©t√©"""
        
        # Cr√©er un type de bien et un bailleur pour le test
        type_bien, created = TypeBien.objects.get_or_create(
            nom='Test Bien',
            defaults={'description': 'Bien de test'}
        )
        
        bailleur, created = Bailleur.objects.get_or_create(
            nom='Test',
            prenom='Propri√©taire',
            email='test.proprietaire@example.com',
            defaults={
                'telephone': '01 44 55 66 77',
                'adresse': 'Test',
            }
        )
        
        propriete_data = {
            'titre': 'Propri√©t√© Test',
            'adresse': 'Test Adresse Propri√©t√©',
            'ville': 'Paris',
            'code_postal': '75003',
            'pays': 'France',
            'surface': 80.0,
            'nombre_pieces': 3,
            'nombre_chambres': 2,
            'nombre_salles_bain': 1,
            'loyer_actuel': 1500.00,
            'charges': 200.00,
            'etat': 'bon',
            'bailleur': bailleur,
            'type_bien': type_bien,
        }
        
        try:
            propriete, success, message = DataSaveHandler.save_propriete(propriete_data, self.test_user)
            if success and propriete:
                print("‚úÖ Sauvegarde propri√©t√© r√©ussie")
                self.results['passed'] += 1
            else:
                print(f"‚ùå Sauvegarde propri√©t√© √©chou√©e: {message}")
                self.results['failed'] += 1
        except Exception as e:
            print(f"‚ùå Erreur sauvegarde propri√©t√©: {e}")
            self.results['failed'] += 1
    
    def _test_data_sanitization(self):
        """Tester le nettoyage des donn√©es"""
        
        print("\nüßπ Tests de nettoyage des donn√©es")
        print("-" * 40)
        
        # Test nettoyage texte
        dirty_text = "  Test   avec   espaces   multiples  "
        clean_text = DataSanitizer.sanitize_text(dirty_text)
        if clean_text == "Test avec espaces multiples":
            print("‚úÖ Nettoyage texte r√©ussi")
            self.results['passed'] += 1
        else:
            print("‚ùå Nettoyage texte √©chou√©")
            self.results['failed'] += 1
        
        # Test nettoyage email
        dirty_email = "  TEST@EXAMPLE.COM  "
        clean_email = DataSanitizer.sanitize_email(dirty_email)
        if clean_email == "test@example.com":
            print("‚úÖ Nettoyage email r√©ussi")
            self.results['passed'] += 1
        else:
            print("‚ùå Nettoyage email √©chou√©")
            self.results['failed'] += 1
        
        # Test nettoyage t√©l√©phone
        dirty_phone = "  01  23  45  67  89  "
        clean_phone = DataSanitizer.sanitize_phone(dirty_phone)
        if clean_phone == "01 23 45 67 89":
            print("‚úÖ Nettoyage t√©l√©phone r√©ussi")
            self.results['passed'] += 1
        else:
            print("‚ùå Nettoyage t√©l√©phone √©chou√©")
            self.results['failed'] += 1
    
    def _test_attack_protection(self):
        """Tester la protection contre les attaques"""
        
        print("\nüõ°Ô∏è Tests de protection contre les attaques")
        print("-" * 40)
        
        # Test protection injection SQL
        sql_attack = "'; DROP TABLE proprietes_bailleur; --"
        if not SecurityChecks.check_sql_injection(sql_attack):
            print("‚úÖ Protection injection SQL active")
            self.results['passed'] += 1
        else:
            print("‚ùå Protection injection SQL inactive")
            self.results['failed'] += 1
        
        # Test protection XSS
        xss_attack = "<script>alert('XSS')</script>"
        if not SecurityChecks.check_xss_attack(xss_attack):
            print("‚úÖ Protection XSS active")
            self.results['passed'] += 1
        else:
            print("‚ùå Protection XSS inactive")
            self.results['failed'] += 1
        
        # Test protection injection commande
        cmd_attack = "ls; rm -rf /"
        if not SecurityChecks.check_command_injection(cmd_attack):
            print("‚úÖ Protection injection commande active")
            self.results['passed'] += 1
        else:
            print("‚ùå Protection injection commande inactive")
            self.results['failed'] += 1
    
    def _print_results(self):
        """Afficher les r√©sultats des tests"""
        
        print("\n" + "=" * 60)
        print("üìä R√âSULTATS DES TESTS DE S√âCURIT√â")
        print("=" * 60)
        print(f"‚úÖ Tests r√©ussis: {self.results['passed']}")
        print(f"‚ùå Tests √©chou√©s: {self.results['failed']}")
        
        total = self.results['passed'] + self.results['failed']
        if total > 0:
            success_rate = (self.results['passed'] / total) * 100
            print(f"üìà Taux de r√©ussite: {success_rate:.1f}%")
        
        if self.results['failed'] == 0:
            print("\nüéâ Tous les tests de s√©curit√© sont pass√©s !")
        else:
            print(f"\n‚ö†Ô∏è {self.results['failed']} test(s) ont √©chou√©.")
        
        print("\n" + "=" * 60)


def main():
    """Fonction principale"""
    
    print("üöÄ D√©marrage des tests de s√©curit√© des formulaires")
    print("=" * 60)
    
    # Cr√©er et ex√©cuter la suite de tests
    test_suite = SecurityTestSuite()
    test_suite.run_all_tests()


if __name__ == '__main__':
    main() 