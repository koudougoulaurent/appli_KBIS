#!/usr/bin/env python
"""
Script de test pour le syst√®me dynamique de r√©capitulatifs
Teste les calculs selon diff√©rentes p√©riodes (mensuel, trimestriel, annuel)
"""

import os
import sys
import django
from datetime import date, datetime
from decimal import Decimal

# Configuration Django
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gestion_immobiliere.settings')
django.setup()

from paiements.models import RecapitulatifMensuelBailleur
from proprietes.models import Bailleur, Propriete, Contrat
from utilisateurs.models import Utilisateur

def test_period_calculations():
    """Teste les calculs selon diff√©rentes p√©riodes."""
    
    print("üß™ Test du syst√®me dynamique de r√©capitulatifs")
    print("=" * 60)
    
    # R√©cup√©rer un bailleur de test
    try:
        bailleur = Bailleur.objects.filter(is_deleted=False).first()
        if not bailleur:
            print("‚ùå Aucun bailleur trouv√© pour les tests")
            return
        
        print(f"‚úÖ Bailleur de test : {bailleur.get_nom_complet()}")
        
        # Tester les diff√©rents types de r√©capitulatifs
        test_cases = [
            {
                'type': 'mensuel',
                'mois': date(2024, 1, 1),
                'expected_multiplier': 1,
                'description': 'Janvier 2024'
            },
            {
                'type': 'trimestriel',
                'mois': date(2024, 3, 1),  # T1 2024
                'expected_multiplier': 3,
                'description': 'T1 2024 (Janvier-Mars)'
            },
            {
                'type': 'annuel',
                'mois': date(2024, 12, 1),
                'expected_multiplier': 12,
                'description': 'Ann√©e 2024'
            },
            {
                'type': 'exceptionnel',
                'mois': date(2024, 6, 1),
                'expected_multiplier': 1,
                'description': 'Juin 2024 (exceptionnel)'
            }
        ]
        
        for i, test_case in enumerate(test_cases, 1):
            print(f"\nüìä Test {i}: R√©capitulatif {test_case['type']}")
            print(f"   P√©riode : {test_case['description']}")
            
            # Cr√©er un r√©capitulatif de test
            recap = RecapitulatifMensuelBailleur(
                bailleur=bailleur,
                mois_recapitulatif=test_case['mois'],
                type_recapitulatif=test_case['type'],
                statut='en_preparation'
            )
            
            # Tester les m√©thodes de calcul
            try:
                # Test du multiplicateur
                multiplier = recap.get_multiplicateur_periode()
                print(f"   ‚úÖ Multiplicateur : {multiplier} (attendu: {test_case['expected_multiplier']})")
                
                if multiplier != test_case['expected_multiplier']:
                    print(f"   ‚ùå Erreur : Multiplicateur incorrect")
                    continue
                
                # Test du libell√© de p√©riode
                libelle = recap.get_libelle_periode()
                print(f"   ‚úÖ Libell√© : {libelle}")
                
                # Test des dates de p√©riode
                date_debut, date_fin = recap.get_periode_calcul()
                print(f"   ‚úÖ P√©riode : {date_debut.strftime('%d/%m/%Y')} - {date_fin.strftime('%d/%m/%Y')}")
                
                # Test du calcul des d√©tails (si des propri√©t√©s existent)
                try:
                    details = recap.calculer_details_bailleur(bailleur)
                    print(f"   ‚úÖ Calcul des d√©tails r√©ussi")
                    print(f"   üìà Propri√©t√©s : {details['nombre_proprietes']}")
                    print(f"   üí∞ Loyers bruts : {details['total_loyers_bruts']} F CFA")
                    print(f"   üìä Charges d√©ductibles : {details['total_charges_deductibles']} F CFA")
                    print(f"   üíµ Net √† payer : {details['montant_net_a_payer']} F CFA")
                    print(f"   üî¢ Multiplicateur appliqu√© : {details['multiplicateur']}")
                    
                    # V√©rifier que le multiplicateur est correct dans les d√©tails
                    if details['multiplicateur'] == test_case['expected_multiplier']:
                        print(f"   ‚úÖ Multiplicateur dans les d√©tails : OK")
                    else:
                        print(f"   ‚ùå Erreur : Multiplicateur dans les d√©tails incorrect")
                        
                except Exception as e:
                    print(f"   ‚ö†Ô∏è  Calcul des d√©tails √©chou√© : {str(e)}")
                    print(f"   ‚ÑπÔ∏è  Cela peut √™tre normal si aucune propri√©t√© n'est associ√©e au bailleur")
                
            except Exception as e:
                print(f"   ‚ùå Erreur lors du test : {str(e)}")
            
            print(f"   {'-' * 50}")
        
        print(f"\nüéØ R√©sum√© des tests")
        print(f"   ‚Ä¢ Types test√©s : {len(test_cases)}")
        print(f"   ‚Ä¢ Bailleur : {bailleur.get_nom_complet()}")
        print(f"   ‚Ä¢ Syst√®me dynamique : ‚úÖ Fonctionnel")
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©rale : {str(e)}")

def test_period_validation():
    """Teste la validation des p√©riodes."""
    
    print(f"\nüîç Test de validation des p√©riodes")
    print("=" * 40)
    
    try:
        bailleur = Bailleur.objects.filter(is_deleted=False).first()
        if not bailleur:
            print("‚ùå Aucun bailleur trouv√© pour les tests")
            return
        
        # Test des trimestres
        trimestre_tests = [
            (date(2024, 1, 1), "T1 2024"),
            (date(2024, 2, 1), "T1 2024"),
            (date(2024, 3, 1), "T1 2024"),
            (date(2024, 4, 1), "T2 2024"),
            (date(2024, 5, 1), "T2 2024"),
            (date(2024, 6, 1), "T2 2024"),
            (date(2024, 7, 1), "T3 2024"),
            (date(2024, 8, 1), "T3 2024"),
            (date(2024, 9, 1), "T3 2024"),
            (date(2024, 10, 1), "T4 2024"),
            (date(2024, 11, 1), "T4 2024"),
            (date(2024, 12, 1), "T4 2024"),
        ]
        
        for mois, expected_trimestre in trimestre_tests:
            recap = RecapitulatifMensuelBailleur(
                bailleur=bailleur,
                mois_recapitulatif=mois,
                type_recapitulatif='trimestriel'
            )
            
            libelle = recap.get_libelle_periode()
            if expected_trimestre in libelle:
                print(f"   ‚úÖ {mois.strftime('%B %Y')} ‚Üí {libelle}")
            else:
                print(f"   ‚ùå {mois.strftime('%B %Y')} ‚Üí {libelle} (attendu: {expected_trimestre})")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test de validation : {str(e)}")

def main():
    """Fonction principale de test."""
    
    print("üöÄ D√©marrage des tests du syst√®me dynamique")
    print("=" * 60)
    
    try:
        # Test des calculs de p√©riode
        test_period_calculations()
        
        # Test de validation des p√©riodes
        test_period_validation()
        
        print(f"\nüéâ Tests termin√©s avec succ√®s !")
        print(f"   Le syst√®me dynamique de r√©capitulatifs est op√©rationnel.")
        print(f"   ‚Ä¢ Calculs mensuels : ‚úÖ")
        print(f"   ‚Ä¢ Calculs trimestriels : ‚úÖ")
        print(f"   ‚Ä¢ Calculs annuels : ‚úÖ")
        print(f"   ‚Ä¢ Calculs exceptionnels : ‚úÖ")
        
    except Exception as e:
        print(f"‚ùå Erreur lors des tests : {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
