#!/usr/bin/env python3
"""
Script de test pour le syst√®me de permissions PRIVILEGE
Teste les fonctionnalit√©s de suppression conditionnelle et gestion des profils
"""

import os
import sys
import django
from django.test import TestCase, Client
from django.contrib.auth import get_user_model
from django.urls import reverse
from django.db import transaction

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'projetImo.settings')
django.setup()

from utilisateurs.models import Utilisateur, GroupeTravail
from proprietes.models import Bailleur, Locataire, Propriete, TypeBien
from core.models import TemplateRecu, Devise

Utilisateur = get_user_model()

def test_systeme_privilege():
    """Test complet du syst√®me de permissions PRIVILEGE"""
    
    print("üîê TEST DU SYST√àME DE PERMISSIONS PRIVILEGE")
    print("=" * 50)
    
    # Cr√©er les donn√©es de test
    print("\nüìã Cr√©ation des donn√©es de test...")
    
    # Cr√©er le groupe PRIVILEGE s'il n'existe pas
    groupe_privilege, created = GroupeTravail.objects.get_or_create(
        nom='PRIVILEGE',
        defaults={'description': 'Groupe avec permissions sp√©ciales'}
    )
    
    # Cr√©er un utilisateur PRIVILEGE
    user_privilege, created = Utilisateur.objects.get_or_create(
        username='privilege_test',
        defaults={
            'email': 'privilege@test.com',
            'groupe_travail': groupe_privilege,
            'is_active': True
        }
    )
    if created:
        user_privilege.set_password('test123')
        user_privilege.save()
        print("‚úÖ Utilisateur PRIVILEGE cr√©√©")
    else:
        print("‚úÖ Utilisateur PRIVILEGE existant")
    
    # Cr√©er un utilisateur normal
    user_normal, created = Utilisateur.objects.get_or_create(
        username='normal_test',
        defaults={
            'email': 'normal@test.com',
            'groupe_travail': None,
            'is_active': True
        }
    )
    if created:
        user_normal.set_password('test123')
        user_normal.save()
        print("‚úÖ Utilisateur normal cr√©√©")
    else:
        print("‚úÖ Utilisateur normal existant")
    
    # Cr√©er des donn√©es de test
    type_bien, created = TypeBien.objects.get_or_create(
        nom='Appartement Test',
        defaults={'description': 'Type de bien pour test'}
    )
    
    bailleur, created = Bailleur.objects.get_or_create(
        nom='Dupont',
        prenom='Jean',
        email='jean.dupont@test.com',
        defaults={
            'telephone': '0123456789',
            'adresse': '123 Rue Test'
        }
    )
    
    propriete, created = Propriete.objects.get_or_create(
        titre='Propri√©t√© Test',
        defaults={
            'adresse': '456 Avenue Test',
            'code_postal': '75001',
            'ville': 'Paris',
            'type_bien': type_bien,
            'bailleur': bailleur,
            'surface': 50.0,
            'nombre_pieces': 2
        }
    )
    
    print("‚úÖ Donn√©es de test cr√©√©es")
    
    # Test 1: V√©rification des permissions PRIVILEGE
    print("\nüîç Test 1: V√©rification des permissions PRIVILEGE")
    
    print(f"   ‚Ä¢ Utilisateur PRIVILEGE: {user_privilege.is_privilege_user()}")
    print(f"   ‚Ä¢ Utilisateur normal: {user_normal.is_privilege_user()}")
    
    if user_privilege.is_privilege_user():
        print("   ‚úÖ Permissions PRIVILEGE correctement d√©tect√©es")
    else:
        print("   ‚ùå Erreur: L'utilisateur PRIVILEGE n'a pas les bonnes permissions")
    
    # Test 2: V√©rification de la suppression conditionnelle
    print("\nüóëÔ∏è Test 2: V√©rification de la suppression conditionnelle")
    
    # Test avec un √©l√©ment non r√©f√©renc√© (TypeBien sans propri√©t√©)
    type_bien_isol√©, created = TypeBien.objects.get_or_create(
        nom='Type Isol√©',
        defaults={'description': 'Type sans r√©f√©rence'}
    )
    
    peut_supprimer, peut_d√©sactiver, raison = user_privilege.can_delete_any_element(type_bien_isol√©)
    print(f"   ‚Ä¢ TypeBien isol√© - Peut supprimer: {peut_supprimer}, Peut d√©sactiver: {peut_d√©sactiver}")
    print(f"   ‚Ä¢ Raison: {raison}")
    
    # Test avec un √©l√©ment r√©f√©renc√© (TypeBien avec propri√©t√©)
    peut_supprimer, peut_d√©sactiver, raison = user_privilege.can_delete_any_element(type_bien)
    print(f"   ‚Ä¢ TypeBien r√©f√©renc√© - Peut supprimer: {peut_supprimer}, Peut d√©sactiver: {peut_d√©sactiver}")
    print(f"   ‚Ä¢ Raison: {raison}")
    
    # Test 3: Test de suppression s√©curis√©e
    print("\nüõ°Ô∏è Test 3: Test de suppression s√©curis√©e")
    
    # Supprimer le type isol√©
    success, message, action = user_privilege.safe_delete_element(type_bien_isol√©)
    print(f"   ‚Ä¢ Suppression type isol√©: {success} - {message} - {action}")
    
    # D√©sactiver le type r√©f√©renc√©
    success, message, action = user_privilege.safe_delete_element(type_bien)
    print(f"   ‚Ä¢ D√©sactivation type r√©f√©renc√©: {success} - {message} - {action}")
    
    # Test 4: Test des vues PRIVILEGE
    print("\nüåê Test 4: Test des vues PRIVILEGE")
    
    client = Client()
    
    # Connexion avec l'utilisateur PRIVILEGE
    login_success = client.login(username='privilege_test', password='test123')
    print(f"   ‚Ä¢ Connexion PRIVILEGE: {login_success}")
    
    if login_success:
        # Test du dashboard avanc√©
        response = client.get('/utilisateurs/privilege/dashboard/')
        print(f"   ‚Ä¢ Dashboard avanc√©: {response.status_code}")
        
        # Test de la gestion des √©l√©ments
        response = client.get('/utilisateurs/privilege/elements/')
        print(f"   ‚Ä¢ Gestion des √©l√©ments: {response.status_code}")
        
        # Test de la gestion des profils
        response = client.get('/utilisateurs/privilege/profiles/')
        print(f"   ‚Ä¢ Gestion des profils: {response.status_code}")
        
        # Test du journal d'audit
        response = client.get('/utilisateurs/privilege/audit/')
        print(f"   ‚Ä¢ Journal d'audit: {response.status_code}")
    
    # Test 5: Test avec un utilisateur normal
    print("\nüë§ Test 5: Test avec un utilisateur normal")
    
    client.logout()
    login_success = client.login(username='normal_test', password='test123')
    print(f"   ‚Ä¢ Connexion utilisateur normal: {login_success}")
    
    if login_success:
        # Tentative d'acc√®s aux vues PRIVILEGE
        response = client.get('/utilisateurs/privilege/dashboard/')
        print(f"   ‚Ä¢ Tentative d'acc√®s dashboard PRIVILEGE: {response.status_code}")
        
        if response.status_code == 302:  # Redirection
            print("   ‚úÖ Acc√®s correctement refus√© √† l'utilisateur normal")
        else:
            print("   ‚ùå Erreur: L'utilisateur normal a acc√®s aux vues PRIVILEGE")
    
    # Test 6: V√©rification des statistiques
    print("\nüìä Test 6: V√©rification des statistiques")
    
    stats = {
        'total_utilisateurs': Utilisateur.objects.count(),
        'utilisateurs_actifs': Utilisateur.objects.filter(is_active=True).count(),
        'total_bailleurs': Bailleur.objects.count(),
        'bailleurs_actifs': Bailleur.objects.filter(est_actif=True).count(),
        'total_proprietes': Propriete.objects.count(),
        'proprietes_actives': Propriete.objects.filter(est_actif=True).count(),
    }
    
    for key, value in stats.items():
        print(f"   ‚Ä¢ {key}: {value}")
    
    # Test 7: Nettoyage des donn√©es de test
    print("\nüßπ Test 7: Nettoyage des donn√©es de test")
    
    # Supprimer les donn√©es de test
    try:
        if 'type_bien_isol√©' in locals():
            type_bien_isol√©.delete()
        propriete.delete()
        bailleur.delete()
        type_bien.delete()
        print("   ‚úÖ Donn√©es de test nettoy√©es")
    except Exception as e:
        print(f"   ‚ö†Ô∏è Erreur lors du nettoyage: {e}")
    
    print("\nüéâ Test du syst√®me PRIVILEGE termin√©!")
    print("\nüìã R√âSUM√â DES FONCTIONNALIT√âS PRIVILEGE:")
    print("   ‚úÖ Suppression conditionnelle d'√©l√©ments")
    print("   ‚úÖ D√©sactivation d'√©l√©ments r√©f√©renc√©s")
    print("   ‚úÖ Gestion exclusive des profils")
    print("   ‚úÖ Journal d'audit automatique")
    print("   ‚úÖ V√©rification des r√©f√©rences")
    print("   ‚úÖ Permissions s√©curis√©es")
    print("   ‚úÖ Interface utilisateur avanc√©e")

if __name__ == '__main__':
    test_systeme_privilege() 