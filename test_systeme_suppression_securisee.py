#!/usr/bin/env python
"""
Script de test pour le syst√®me de suppression s√©curis√©e
"""
import os
import sys
import django
from django.test import RequestFactory
from django.contrib.auth import get_user_model
from django.contrib.contenttypes.models import ContentType

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gestion_immobiliere.settings')
django.setup()

from core.models import HardDeleteLog
from core.services import SecureDeletionService, DeletionPolicyManager
from utilisateurs.models import GroupeTravail

def test_systeme_suppression_securisee():
    """Test complet du syst√®me de suppression s√©curis√©e"""
    print("üß™ TEST DU SYST√àME DE SUPPRESSION S√âCURIS√âE")
    print("=" * 60)
    
    # 1. Test du mod√®le HardDeleteLog
    print("\n1Ô∏è‚É£ Test du mod√®le HardDeleteLog...")
    try:
        # Cr√©er un ContentType de test
        content_type = ContentType.objects.get_for_model(HardDeleteLog)
        
        # Cr√©er un log de test
        log = HardDeleteLog.objects.create(
            content_type=content_type,
            object_id=999,
            object_repr="Objet de test",
            object_data_before_deletion={'test': 'data'},
            deletion_type='manual',
            reason='Test du syst√®me',
            justification='Test de validation',
            ip_address='127.0.0.1',
            user_agent='Test User Agent',
            session_id='test_session_123'
        )
        
        print(f"‚úÖ Log cr√©√© avec succ√®s - ID: {log.id}")
        print(f"   Hash g√©n√©r√©: {log.deletion_hash}")
        print(f"   Statut: {log.get_validation_status()}")
        
        # Test des m√©thodes
        print(f"   Peut √™tre restaur√©: {log.can_be_restored()}")
        print(f"   Est valid√©: {log.is_validated()}")
        
        # Nettoyer
        log.delete()
        print("‚úÖ Test du mod√®le r√©ussi")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test du mod√®le: {e}")
        return False
    
    # 2. Test du service SecureDeletionService
    print("\n2Ô∏è‚É£ Test du service SecureDeletionService...")
    try:
        # Cr√©er une requ√™te de test
        factory = RequestFactory()
        request = factory.get('/test/')
        
        # Simuler un utilisateur PRIVILEGE
        User = get_user_model()
        
        # V√©rifier si le groupe PRIVILEGE existe
        groupe_privilege, created = GroupeTravail.objects.get_or_create(
            nom='PRIVILEGE',
            defaults={
                'description': 'Groupe avec privil√®ges √©lev√©s',
                'couleur': '#dc3545'
            }
        )
        
        if created:
            print(f"   Groupe PRIVILEGE cr√©√©: {groupe_privilege.nom}")
        
        # Cr√©er un utilisateur de test
        test_user, created = User.objects.get_or_create(
            username='test_privilege',
            defaults={
                'email': 'test@example.com',
                'first_name': 'Test',
                'last_name': 'Privilege',
                'is_staff': True,
                'is_superuser': False
            }
        )
        
        if created:
            test_user.groupe_travail = groupe_privilege
            test_user.save()
            print(f"   Utilisateur de test cr√©√©: {test_user.username}")
        
        # Simuler la connexion
        request.user = test_user
        
        # Test du service
        service = SecureDeletionService(request)
        
        # Test de v√©rification des permissions
        can_delete, message = service.can_perform_hard_delete(HardDeleteLog, None)
        print(f"   Peut effectuer une suppression: {can_delete} - {message}")
        
        # Test d'analyse d'impact
        impact = service.analyze_deletion_impact(log)
        print(f"   Analyse d'impact: {impact['risk_level']}")
        
        print("‚úÖ Test du service r√©ussi")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test du service: {e}")
        return False
    
    # 3. Test du gestionnaire de politiques
    print("\n3Ô∏è‚É£ Test du gestionnaire de politiques...")
    try:
        # Test des politiques par mod√®le
        from core.models import TemplateRecu
        
        policy = DeletionPolicyManager.get_deletion_policy(TemplateRecu)
        print(f"   Politique pour TemplateRecu: {policy}")
        
        print("‚úÖ Test des politiques r√©ussi")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test des politiques: {e}")
        return False
    
    # 4. Test des URLs
    print("\n4Ô∏è‚É£ Test des URLs...")
    try:
        from django.urls import reverse
        
        # Test des URLs principales
        urls_to_test = [
            'core:secure_deletion_dashboard',
            'core:hard_delete_log_list',
        ]
        
        for url_name in urls_to_test:
            try:
                url = reverse(url_name)
                print(f"   ‚úÖ URL {url_name}: {url}")
            except Exception as e:
                print(f"   ‚ùå URL {url_name}: {e}")
        
        print("‚úÖ Test des URLs r√©ussi")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test des URLs: {e}")
        return False
    
    # 5. Test de cr√©ation de sauvegarde
    print("\n5Ô∏è‚É£ Test de cr√©ation de sauvegarde...")
    try:
        # Cr√©er un objet de test
        test_obj = HardDeleteLog.objects.create(
            content_type=content_type,
            object_id=888,
            object_repr="Objet de test pour sauvegarde",
            object_data_before_deletion={'test': 'backup'},
            deletion_type='test',
            reason='Test de sauvegarde',
            justification='Test de sauvegarde',
            ip_address='127.0.0.1',
            user_agent='Test User Agent',
            session_id='test_session_456'
        )
        
        # Test de sauvegarde
        backup_data = service.create_deletion_backup(test_obj)
        print(f"   Sauvegarde cr√©√©e: {len(backup_data)} champs")
        
        # Nettoyer
        test_obj.delete()
        print("‚úÖ Test de sauvegarde r√©ussi")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test de sauvegarde: {e}")
        return False
    
    print("\n" + "=" * 60)
    print("üéâ TOUS LES TESTS SONT PASS√âS AVEC SUCC√àS !")
    print("‚úÖ Le syst√®me de suppression s√©curis√©e est op√©rationnel")
    
    return True

def test_interface_utilisateur():
    """Test de l'interface utilisateur"""
    print("\nüñ•Ô∏è TEST DE L'INTERFACE UTILISATEUR")
    print("=" * 40)
    
    try:
        # V√©rifier que les templates existent
        template_files = [
            'templates/core/secure_deletion_dashboard.html',
            'templates/core/hard_delete_log_list.html',
            'templates/core/hard_delete_log_detail.html',
        ]
        
        for template_file in template_files:
            if os.path.exists(template_file):
                print(f"   ‚úÖ Template {template_file} existe")
            else:
                print(f"   ‚ùå Template {template_file} manquant")
        
        # V√©rifier le fichier JavaScript
        js_file = 'static/js/secure_deletion.js'
        if os.path.exists(js_file):
            print(f"   ‚úÖ JavaScript {js_file} existe")
        else:
            print(f"   ‚ùå JavaScript {js_file} manquant")
        
        print("‚úÖ Test de l'interface utilisateur r√©ussi")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test de l'interface: {e}")
        return False

def main():
    """Fonction principale"""
    print("üöÄ D√âMARRAGE DES TESTS DU SYST√àME DE SUPPRESSION S√âCURIS√âE")
    print("=" * 70)
    
    # Test principal
    success = test_systeme_suppression_securisee()
    
    if success:
        # Test de l'interface
        test_interface_utilisateur()
        
        print("\n" + "=" * 70)
        print("üéØ R√âSUM√â DES TESTS")
        print("‚úÖ Syst√®me de suppression s√©curis√©e: OP√âRATIONNEL")
        print("‚úÖ Mod√®le HardDeleteLog: CR√â√â ET TEST√â")
        print("‚úÖ Service SecureDeletionService: FONCTIONNEL")
        print("‚úÖ Gestionnaire de politiques: OP√âRATIONNEL")
        print("‚úÖ URLs et vues: CONFIGUR√âES")
        print("‚úÖ Interface utilisateur: PR√äTE")
        print("\nüöÄ Le syst√®me est pr√™t √† √™tre utilis√© !")
        
        print("\nüìã PROCHAINES √âTAPES:")
        print("1. Connectez-vous avec un utilisateur PRIVILEGE")
        print("2. Acc√©dez √† /suppressions-securisees/")
        print("3. Testez les fonctionnalit√©s de suppression")
        print("4. V√©rifiez les logs d'audit")
        
    else:
        print("\n‚ùå Certains tests ont √©chou√©. V√©rifiez les erreurs ci-dessus.")

if __name__ == '__main__':
    main()






