#!/usr/bin/env python3
"""
Script de Test du Syst√®me de V√©rification de V√©racit√© des Documents
==================================================================

Ce script d√©montre le fonctionnement du syst√®me de v√©rification automatique
des documents avant qu'ils passent dans les formulaires.

Auteur: Assistant IA
Date: 2025
"""

import os
import sys
import tempfile
from pathlib import Path

# Ajouter le r√©pertoire parent au path pour les imports
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_verification_service():
    """Test du service de v√©rification des documents."""
    print("üîç TEST DU SYST√àME DE V√âRIFICATION DE V√âRACIT√â DES DOCUMENTS")
    print("=" * 70)
    
    try:
        # Import du service de v√©rification
        from core.services.verification_documents import DocumentVerificationService
        
        # Cr√©er une instance du service
        service = DocumentVerificationService()
        
        print("‚úÖ Service de v√©rification cr√©√© avec succ√®s")
        
        # Test 1: V√©rification d'une pi√®ce d'identit√© simul√©e
        print("\nüìã TEST 1: V√©rification d'une pi√®ce d'identit√©")
        print("-" * 50)
        
        # Cr√©er un fichier temporaire simul√©
        with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False) as temp_file:
            temp_file.write("R√âPUBLIQUE FRAN√áAISE\nCARTE NATIONALE D'IDENTIT√â\nNOM: DUPONT\nPR√âNOM: JEAN")
            temp_file_path = temp_file.name
        
        try:
            # V√©rifier le document
            result = service.verify_document(temp_file_path, 'piece_identite')
            
            print(f"   üìÑ Document: {os.path.basename(temp_file_path)}")
            print(f"   ‚úÖ Valide: {result.is_valid}")
            print(f"   üéØ Score de confiance: {result.confidence_score:.2f}")
            print(f"   ‚ö†Ô∏è  Avertissements: {len(result.warnings)}")
            print(f"   ‚ùå Erreurs: {len(result.errors)}")
            print(f"   üö® Indicateurs de fraude: {len(result.fraud_indicators)}")
            
            if result.warnings:
                print("   üìù Avertissements:")
                for warning in result.warnings:
                    print(f"      - {warning}")
            
            if result.recommendations:
                print("   üí° Recommandations:")
                for rec in result.recommendations:
                    print(f"      - {rec}")
                    
        finally:
            # Nettoyer le fichier temporaire
            os.unlink(temp_file_path)
        
        # Test 2: V√©rification d'un justificatif de domicile
        print("\nüè† TEST 2: V√©rification d'un justificatif de domicile")
        print("-" * 50)
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False) as temp_file:
            temp_file.write("EDF √âLECTRICIT√â DE FRANCE\nFACTURE\nADRESSE: 123 RUE DE LA PAIX\nMONTANT: 45.67‚Ç¨")
            temp_file_path = temp_file.name
        
        try:
            result = service.verify_document(temp_file_path, 'justificatif_domicile')
            
            print(f"   üìÑ Document: {os.path.basename(temp_file_path)}")
            print(f"   ‚úÖ Valide: {result.is_valid}")
            print(f"   üéØ Score de confiance: {result.confidence_score:.2f}")
            print(f"   ‚ö†Ô∏è  Avertissements: {len(result.warnings)}")
            print(f"   ‚ùå Erreurs: {len(result.errors)}")
            print(f"   üö® Indicateurs de fraude: {len(result.fraud_indicators)}")
            
        finally:
            os.unlink(temp_file_path)
        
        # Test 3: V√©rification d'un document suspect
        print("\nüö® TEST 3: V√©rification d'un document suspect")
        print("-" * 50)
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False) as temp_file:
            temp_file.write("DOCUMENT SUSPECT\n‚ñà‚ñì‚ñí‚ñë‚ñÑ‚ñå‚ñê‚ñÄ\nTEXTE R√âP√âTITIF TEXTE R√âP√âTITIF TEXTE R√âP√âTITIF")
            temp_file_path = temp_file.name
        
        try:
            result = service.verify_document(temp_file_path, 'piece_identite')
            
            print(f"   üìÑ Document: {os.path.basename(temp_file_path)}")
            print(f"   ‚úÖ Valide: {result.is_valid}")
            print(f"   üéØ Score de confiance: {result.confidence_score:.2f}")
            print(f"   ‚ö†Ô∏è  Avertissements: {len(result.warnings)}")
            print(f"   ‚ùå Erreurs: {len(result.errors)}")
            print(f"   üö® Indicateurs de fraude: {len(result.fraud_indicators)}")
            
            if result.fraud_indicators:
                print("   üö® Indicateurs de fraude d√©tect√©s:")
                for indicator in result.fraud_indicators:
                    print(f"      - {indicator}")
            
        finally:
            os.unlink(temp_file_path)
        
        # Test 4: Statistiques de v√©rification
        print("\nüìä TEST 4: Statistiques de v√©rification")
        print("-" * 50)
        
        stats = service.get_statistics()
        if stats:
            print(f"   üìà Total des v√©rifications: {stats.get('total_verifications', 0)}")
            print(f"   ‚úÖ Documents valid√©s: {stats.get('valid_documents', 0)}")
            print(f"   ‚ùå Documents rejet√©s: {stats.get('invalid_documents', 0)}")
            print(f"   üéØ Taux de succ√®s: {stats.get('success_rate', 0):.1f}%")
            print(f"   üéØ Score de confiance moyen: {stats.get('average_confidence', 0):.2f}")
            
            # D√©tails par type de document
            doc_types = stats.get('document_types', {})
            if doc_types:
                print("   üìã R√©partition par type:")
                for doc_type, counts in doc_types.items():
                    print(f"      - {doc_type}: {counts['valid']}/{counts['total']} valid√©s")
        else:
            print("   ‚ÑπÔ∏è  Aucune statistique disponible")
        
        print("\n‚úÖ Tous les tests de v√©rification ont √©t√© ex√©cut√©s avec succ√®s !")
        
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        print("   Assurez-vous que Django est configur√© et que le service est accessible")
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        import traceback
        traceback.print_exc()


def test_form_integration():
    """Test de l'int√©gration avec les formulaires Django."""
    print("\nüîß TEST DE L'INT√âGRATION AVEC LES FORMULAIRES")
    print("=" * 70)
    
    try:
        # Simuler l'int√©gration avec un formulaire
        print("üìù Simulation de l'int√©gration avec un formulaire de locataire")
        
        # Cr√©er un fichier temporaire pour la simulation
        with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False) as temp_file:
            temp_file.write("R√âPUBLIQUE FRAN√áAISE\nCARTE NATIONALE D'IDENTIT√â\nNOM: MARTIN\nPR√âNOM: MARIE")
            temp_file_path = temp_file.name
        
        try:
            # Simuler la v√©rification avant validation du formulaire
            from core.services.verification_documents import document_verification_service
            
            print("   üîç V√©rification automatique en cours...")
            result = document_verification_service.verify_document(temp_file_path, 'piece_identite')
            
            if result.is_valid:
                print("   ‚úÖ Document valid√© - Le formulaire peut √™tre soumis")
                print(f"   üéØ Score de confiance: {result.confidence_score:.2f}")
            else:
                print("   ‚ùå Document rejet√© - Le formulaire sera bloqu√©")
                print("   üö® Raisons du rejet:")
                for error in result.errors:
                    print(f"      - {error}")
                for indicator in result.fraud_indicators:
                    print(f"      - {indicator}")
            
            print("   üí° Recommandations:")
            for rec in result.recommendations:
                print(f"      - {rec}")
                
        finally:
            os.unlink(temp_file_path)
        
        print("\n‚úÖ Test d'int√©gration r√©ussi !")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du test d'int√©gration: {e}")


def test_middleware_simulation():
    """Simulation du fonctionnement du middleware."""
    print("\nüîÑ SIMULATION DU MIDDLEWARE DE V√âRIFICATION")
    print("=" * 70)
    
    try:
        print("üì§ Simulation d'un upload de fichier...")
        
        # Cr√©er plusieurs fichiers temporaires pour la simulation
        files_to_upload = {
            'piece_identite': "R√âPUBLIQUE FRAN√áAISE\nCARTE NATIONALE D'IDENTIT√â",
            'justificatif_domicile': "EDF √âLECTRICIT√â DE FRANCE\nFACTURE",
            'attestation_bancaire': "BANQUE POPULAIRE\nRIB\nIBAN: FR123456789"
        }
        
        temp_files = {}
        
        try:
            # Cr√©er les fichiers temporaires
            for field_name, content in files_to_upload.items():
                temp_file = tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False)
                temp_file.write(content)
                temp_file.close()
                temp_files[field_name] = temp_file.name
            
            print("   üìÅ Fichiers cr√©√©s:")
            for field_name, file_path in temp_files.items():
                print(f"      - {field_name}: {os.path.basename(file_path)}")
            
            # Simuler la v√©rification par le middleware
            print("\n   üîç V√©rification automatique par le middleware...")
            
            from core.services.verification_documents import document_verification_service
            
            verification_results = {}
            files_to_reject = []
            
            for field_name, file_path in temp_files.items():
                # D√©terminer le type de document
                document_type = field_name
                
                # V√©rifier le document
                result = document_verification_service.verify_document(file_path, document_type)
                verification_results[field_name] = result
                
                # Marquer pour rejet si invalide
                if not result.is_valid:
                    files_to_reject.append(field_name)
            
            # Afficher les r√©sultats
            print("\n   üìä R√©sultats de la v√©rification:")
            for field_name, result in verification_results.items():
                status = "‚úÖ VALID√â" if result.is_valid else "‚ùå REJET√â"
                print(f"      - {field_name}: {status} (Score: {result.confidence_score:.2f})")
            
            if files_to_reject:
                print(f"\n   üö® Fichiers rejet√©s: {', '.join(files_to_reject)}")
                print("   ‚ö†Ô∏è  Le formulaire sera bloqu√© jusqu'√† correction")
            else:
                print("\n   ‚úÖ Tous les documents sont valides")
                print("   üöÄ Le formulaire peut √™tre soumis")
            
            # Statistiques finales
            valid_count = sum(1 for result in verification_results.values() if result.is_valid)
            total_count = len(verification_results)
            
            print(f"\n   üìà R√©sum√©: {valid_count}/{total_count} documents valid√©s")
            
        finally:
            # Nettoyer les fichiers temporaires
            for file_path in temp_files.values():
                try:
                    os.unlink(file_path)
                except OSError:
                    pass
        
        print("\n‚úÖ Simulation du middleware r√©ussie !")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la simulation du middleware: {e}")


def main():
    """Fonction principale."""
    print("üöÄ D√âMONSTRATION DU SYST√àME DE V√âRIFICATION DE V√âRACIT√â")
    print("=" * 70)
    print("Ce script d√©montre comment le syst√®me v√©rifie automatiquement")
    print("la v√©racit√© des documents avant qu'ils passent dans les formulaires.")
    print()
    
    # Ex√©cuter les tests
    test_verification_service()
    test_form_integration()
    test_middleware_simulation()
    
    print("\n" + "=" * 70)
    print("üéâ D√âMONSTRATION TERMIN√âE AVEC SUCC√àS !")
    print()
    print("üìã R√âSUM√â DES FONCTIONNALIT√âS:")
    print("   ‚úÖ V√©rification automatique des documents")
    print("   ‚úÖ D√©tection de fraude et anomalies")
    print("   ‚úÖ Int√©gration transparente avec les formulaires")
    print("   ‚úÖ Blocage des documents suspects")
    print("   ‚úÖ Feedback imm√©diat √† l'utilisateur")
    print("   ‚úÖ Historique et statistiques de v√©rification")
    print()
    print("üîß POUR INT√âGRER DANS VOTRE APPLICATION:")
    print("   1. Ajouter le middleware dans settings.py")
    print("   2. Utiliser DocumentVerificationFormMixin dans vos formulaires")
    print("   3. Les v√©rifications se feront automatiquement")
    print()
    print("üí° AVANTAGES:")
    print("   - S√©curit√© renforc√©e")
    print("   - Conformit√© documentaire")
    print("   - D√©tection automatique des fraudes")
    print("   - Tra√ßabilit√© compl√®te")
    print("   - Interface utilisateur transparente")


if __name__ == "__main__":
    main()
