#!/usr/bin/env python
"""
Script simple pour mettre √† jour la documentation BD
Sans utiliser Django pour √©viter l'erreur 'packages'
"""

import os
from datetime import datetime

def update_bd_documentation():
    """Met √† jour la documentation BD avec les changements r√©cents"""
    
    print("üîÑ Mise √† jour de la documentation BD...")
    
    # Lire le fichier README.md existant
    readme_path = "BD/README.md"
    if os.path.exists(readme_path):
        with open(readme_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Remplacer "KBIS INTERNATIONAL" par "KBIS IMMOBILIER"
        updated_content = content.replace("KBIS INTERNATIONAL", "KBIS IMMOBILIER")
        
        # Ajouter une note de mise √† jour
        update_note = f"""
## üìù Mise √† jour - {datetime.now().strftime('%d/%m/%Y %H:%M')}

### Changements r√©cents :
- ‚úÖ Suppression de "INTERNATIONAL" du nom de l'entreprise
- ‚úÖ Remplacement par "KBIS IMMOBILIER" dans toute l'application
- ‚úÖ Ajout du processeur de contexte entreprise_config
- ‚úÖ Mise √† jour des templates pour utiliser la configuration dynamique

"""
        
        # Ins√©rer la note de mise √† jour apr√®s le titre
        lines = updated_content.split('\n')
        if len(lines) > 1:
            lines.insert(2, update_note)
            updated_content = '\n'.join(lines)
        
        # √âcrire le fichier mis √† jour
        with open(readme_path, 'w', encoding='utf-8') as f:
            f.write(updated_content)
        
        print(f"‚úÖ {readme_path} mis √† jour")
    
    # Mettre √† jour les autres fichiers de documentation
    files_to_update = [
        "BD/SUMMARY.md",
        "BD/documentation_complete.md",
        "BD/guide_migration.md",
        "BD/diagramme_classes_simple.md",
        "BD/diagramme_cas_utilisation.md"
    ]
    
    for file_path in files_to_update:
        if os.path.exists(file_path):
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Remplacer "KBIS INTERNATIONAL" par "KBIS IMMOBILIER"
            updated_content = content.replace("KBIS INTERNATIONAL", "KBIS IMMOBILIER")
            
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(updated_content)
            
            print(f"‚úÖ {file_path} mis √† jour")
    
    # Cr√©er un fichier de changelog
    changelog_path = "BD/CHANGELOG.md"
    changelog_entry = f"""
# üìù Changelog - Documentation BD

## {datetime.now().strftime('%d/%m/%Y')} - Suppression de "INTERNATIONAL"

### Modifications apport√©es :
- ‚úÖ Remplacement de "KBIS INTERNATIONAL" par "KBIS IMMOBILIER" dans toute la documentation
- ‚úÖ Mise √† jour des templates pour utiliser la configuration dynamique de l'entreprise
- ‚úÖ Ajout du processeur de contexte entreprise_config
- ‚úÖ Modification de la base de donn√©es : nom_entreprise = 'KBIS IMMOBILIER'

### Fichiers modifi√©s :
- `core/context_processors.py` - Ajout du processeur entreprise_config
- `templates/utilisateurs/connexion_groupes.html` - Utilisation de la variable dynamique
- `gestion_immobiliere/settings.py` - Configuration du context processor
- Base de donn√©es : `core_configurationentreprise.nom_entreprise`

### Impact :
- L'interface utilisateur affiche maintenant "KBIS IMMOBILIER" au lieu de "KBIS INTERNATIONAL"
- Le nom de l'entreprise est r√©cup√©r√© dynamiquement depuis la configuration
- Plus de coh√©rence dans l'identit√© visuelle de l'application

---
*Changelog g√©n√©r√© automatiquement le {datetime.now().strftime('%d/%m/%Y √† %H:%M')}*
"""
    
    with open(changelog_path, 'w', encoding='utf-8') as f:
        f.write(changelog_entry)
    
    print(f"‚úÖ {changelog_path} cr√©√©")
    print("üéâ Mise √† jour de la documentation BD termin√©e !")

if __name__ == "__main__":
    update_bd_documentation()
