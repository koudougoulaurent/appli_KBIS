#!/bin/bash
# Script de mise √† jour pour /opt/deploy_secure.sh avec avances intelligentes
# Usage: ./update_deploy_secure.sh

echo "üîÑ Mise √† jour du script de d√©ploiement s√©curis√© avec avances intelligentes"
echo "=========================================================================="

# V√©rifier que nous sommes root ou sudo
if [ "$EUID" -ne 0 ]; then
    echo "‚ùå Ce script doit √™tre ex√©cut√© en tant que root ou avec sudo"
    echo "   Utilisez: sudo ./update_deploy_secure.sh"
    exit 1
fi

# V√©rifier que le script original existe
if [ ! -f "/opt/deploy_secure.sh" ]; then
    echo "‚ùå Le script /opt/deploy_secure.sh n'existe pas"
    echo "   Veuillez d'abord installer le script de d√©ploiement s√©curis√©"
    exit 1
fi

echo "‚úÖ Script original trouv√©: /opt/deploy_secure.sh"

# Cr√©er une sauvegarde du script original
echo "üì¶ Cr√©ation d'une sauvegarde du script original..."
cp /opt/deploy_secure.sh /opt/deploy_secure.sh.backup.$(date +%Y%m%d_%H%M%S)
echo "‚úÖ Sauvegarde cr√©√©e"

# Fonction pour ajouter les nouvelles fonctionnalit√©s
add_avances_features() {
    echo "üîß Ajout des fonctionnalit√©s d'avances intelligentes..."
    
    # Cr√©er un script temporaire avec les modifications
    cat > /tmp/deploy_secure_updated.sh << 'EOF'
#!/bin/bash
# Script de d√©ploiement s√©curis√© avec avances intelligentes
# Version mise √† jour avec syst√®me d'avances intelligent

# Configuration des avances intelligentes
AVANCES_BRANCH="modifications-octobre-2025"
AVANCES_MIGRATIONS=("paiements.0011_add_manual_month_selection_fields" "paiements.0012_add_paiement_field_to_avance")

# Fonction de sauvegarde des avances
backup_avances_data() {
    echo "üì¶ Sauvegarde des donn√©es d'avances..."
    if [ -f "$PROJECT_DIR/manage.py" ]; then
        cd "$PROJECT_DIR"
        sudo -u $APP_USER bash -c "source venv/bin/activate && export DJANGO_SETTINGS_MODULE=$DJANGO_SETTINGS && python manage.py dumpdata paiements.AvanceLoyer paiements.ConsommationAvance > $BACKUP_DIR/backup_avances_$(date +%Y%m%d_%H%M%S).json"
        echo "‚úÖ Donn√©es d'avances sauvegard√©es"
    fi
}

# Fonction de correction des donn√©es d'avances
fix_avances_data() {
    echo "üîß Correction des donn√©es d'avances existantes..."
    cd "$PROJECT_DIR"
    
    sudo -u $APP_USER bash -c "source venv/bin/activate && export DJANGO_SETTINGS_MODULE=$DJANGO_SETTINGS && python manage.py shell" << 'PYTHON_EOF'
from paiements.models_avance import AvanceLoyer, ConsommationAvance
from datetime import date

print("D√©but de la correction des donn√©es d'avances...")

# Corriger les avances avec des dates incorrectes
avances_corrigees = 0
for avance in AvanceLoyer.objects.all():
    corrected = False
    if avance.mois_debut_couverture and avance.mois_debut_couverture.year < 2000:
        avance.mois_debut_couverture = avance.mois_debut_couverture.replace(year=avance.mois_debut_couverture.year + 2000)
        corrected = True
    if avance.mois_fin_couverture and avance.mois_fin_couverture.year < 2000:
        avance.mois_fin_couverture = avance.mois_fin_couverture.replace(year=avance.mois_fin_couverture.year + 2000)
        corrected = True
    if corrected:
        avance.save()
        avances_corrigees += 1

print(f"Avances corrig√©es: {avances_corrigees}")

# Supprimer les consommations avec des dates incorrectes
consommations_supprimees = ConsommationAvance.objects.filter(mois_consomme__year__lt=2000).count()
ConsommationAvance.objects.filter(mois_consomme__year__lt=2000).delete()

print(f"Consommations supprim√©es: {consommations_supprimees}")

# Recalculer les montants restants
for avance in AvanceLoyer.objects.all():
    avance.montant_restant = avance.montant_avance
    avance.statut = 'active'
    avance.save()

print("Correction des donn√©es d'avances termin√©e")
PYTHON_EOF
    
    echo "‚úÖ Donn√©es d'avances corrig√©es"
}

# Fonction de v√©rification des avances
verify_avances() {
    echo "üîç V√©rification des avances intelligentes..."
    cd "$PROJECT_DIR"
    
    sudo -u $APP_USER bash -c "source venv/bin/activate && export DJANGO_SETTINGS_MODULE=$DJANGO_SETTINGS && python manage.py shell" << 'PYTHON_EOF'
from paiements.models_avance import AvanceLoyer

print("V√©rification des avances intelligentes...")

# V√©rifier les avances
avances = AvanceLoyer.objects.all()
print(f"Total avances: {avances.count()}")

# V√©rifier les avances avec des probl√®mes
problemes = avances.filter(montant_restant__lt=0)
print(f"Avances avec montant restant n√©gatif: {problemes.count()}")

# V√©rifier les dates
dates_incorrectes = avances.filter(mois_debut_couverture__year__lt=2000)
print(f"Avances avec dates incorrectes: {dates_incorrectes.count()}")

# V√©rifier les nouveaux champs
champs_manquants = avances.filter(paiement__isnull=True).count()
print(f"Avances sans paiement associ√©: {champs_manquants}")

print("V√©rification des avances termin√©e")
PYTHON_EOF
    
    echo "‚úÖ V√©rification des avances termin√©e"
}

# Fonction de mise √† jour du code avec avances intelligentes
update_code_with_avances() {
    echo "üì• Mise √† jour du code avec avances intelligentes..."
    
    cd "$PROJECT_DIR"
    
    if [ -d ".git" ]; then
        # Sauvegarder les modifications locales
        sudo -u $APP_USER git stash push -m "Sauvegarde avant mise √† jour avances intelligentes $(date +%Y%m%d_%H%M%S)"
        
        # R√©cup√©rer les derni√®res modifications
        sudo -u $APP_USER git fetch origin
        sudo -u $APP_USER git checkout "$AVANCES_BRANCH"
        sudo -u $APP_USER git pull origin "$AVANCES_BRANCH"
        
        echo "‚úÖ Code mis √† jour avec avances intelligentes"
    else
        echo "‚ùå Pas de repository Git trouv√©"
        exit 1
    fi
}

# Fonction d'application des migrations d'avances
apply_avances_migrations() {
    echo "üóÑÔ∏è Application des migrations d'avances intelligentes..."
    
    cd "$PROJECT_DIR"
    
    # Appliquer les migrations sp√©cifiques aux avances
    for migration in "${AVANCES_MIGRATIONS[@]}"; do
        echo "   Application de la migration: $migration"
        sudo -u $APP_USER bash -c "source venv/bin/activate && export DJANGO_SETTINGS_MODULE=$DJANGO_SETTINGS && python manage.py migrate $migration"
    done
    
    echo "‚úÖ Migrations d'avances appliqu√©es"
}

# Fonction de test des avances intelligentes
test_avances_features() {
    echo "üß™ Test des fonctionnalit√©s d'avances intelligentes..."
    
    cd "$PROJECT_DIR"
    
    # Test de cr√©ation d'avance
    sudo -u $APP_USER bash -c "source venv/bin/activate && export DJANGO_SETTINGS_MODULE=$DJANGO_SETTINGS && python manage.py shell" << 'PYTHON_EOF'
from paiements.services_avance import ServiceGestionAvance
from contrats.models import Contrat
from decimal import Decimal
from datetime import date

print("Test des fonctionnalit√©s d'avances intelligentes...")

# R√©cup√©rer un contrat
contrat = Contrat.objects.first()
if contrat:
    try:
        # Cr√©er une avance de test
        avance = ServiceGestionAvance.creer_avance_loyer(
            contrat=contrat,
            montant_avance=Decimal('100000'),
            date_avance=date.today(),
            notes="Test avances intelligentes"
        )
        print(f"Avance cr√©√©e: {avance.id}, Statut: {avance.statut}")
        print(f"Paiement associ√©: {avance.paiement}")
        
        # Supprimer l'avance de test
        avance.delete()
        print("Test des avances intelligentes r√©ussi")
    except Exception as e:
        print(f"Erreur lors du test: {e}")
        raise
else:
    print("Aucun contrat trouv√© pour le test")
PYTHON_EOF
    
    echo "‚úÖ Test des avances intelligentes r√©ussi"
}

# Fonction principale de mise √† jour des avances
update_avances_intelligent_system() {
    echo "üöÄ Mise √† jour du syst√®me d'avances intelligentes..."
    
    # Sauvegarder les donn√©es d'avances
    backup_avances_data
    
    # Mettre √† jour le code
    update_code_with_avances
    
    # Installer les d√©pendances
    install_dependencies
    
    # Appliquer les migrations
    apply_avances_migrations
    
    # Corriger les donn√©es
    fix_avances_data
    
    # Collecter les fichiers statiques
    collect_static_files
    
    # Red√©marrer les services
    restart_services
    
    # V√©rifier le d√©ploiement
    verify_avances
    
    # Tester les fonctionnalit√©s
    test_avances_features
    
    echo "‚úÖ Syst√®me d'avances intelligentes mis √† jour avec succ√®s"
}

# Ajouter les nouvelles fonctionnalit√©s au script principal
echo "üîß Int√©gration des fonctionnalit√©s d'avances intelligentes..."

# Lire le script original et ajouter les nouvelles fonctions
{
    # Lire le script original jusqu'√† la fonction main
    sed '/^main()/,/^}/!d' /opt/deploy_secure.sh | head -n -1
    
    # Ajouter l'appel √† la mise √† jour des avances
    echo "    # Mise √† jour du syst√®me d'avances intelligentes"
    echo "    update_avances_intelligent_system"
    echo "}"
    
    # Ajouter toutes les nouvelles fonctions
    cat << 'FUNCTIONS_EOF'

# =====================================================
# FONCTIONS D'AVANCES INTELLIGENTES
# =====================================================

# Configuration des avances intelligentes
AVANCES_BRANCH="modifications-octobre-2025"
AVANCES_MIGRATIONS=("paiements.0011_add_manual_month_selection_fields" "paiements.0012_add_paiement_field_to_avance")

# Fonction de sauvegarde des avances
backup_avances_data() {
    echo "üì¶ Sauvegarde des donn√©es d'avances..."
    if [ -f "$PROJECT_DIR/manage.py" ]; then
        cd "$PROJECT_DIR"
        sudo -u $APP_USER bash -c "source venv/bin/activate && export DJANGO_SETTINGS_MODULE=$DJANGO_SETTINGS && python manage.py dumpdata paiements.AvanceLoyer paiements.ConsommationAvance > $BACKUP_DIR/backup_avances_$(date +%Y%m%d_%H%M%S).json"
        echo "‚úÖ Donn√©es d'avances sauvegard√©es"
    fi
}

# Fonction de correction des donn√©es d'avances
fix_avances_data() {
    echo "üîß Correction des donn√©es d'avances existantes..."
    cd "$PROJECT_DIR"
    
    sudo -u $APP_USER bash -c "source venv/bin/activate && export DJANGO_SETTINGS_MODULE=$DJANGO_SETTINGS && python manage.py shell" << 'PYTHON_EOF'
from paiements.models_avance import AvanceLoyer, ConsommationAvance
from datetime import date

print("D√©but de la correction des donn√©es d'avances...")

# Corriger les avances avec des dates incorrectes
avances_corrigees = 0
for avance in AvanceLoyer.objects.all():
    corrected = False
    if avance.mois_debut_couverture and avance.mois_debut_couverture.year < 2000:
        avance.mois_debut_couverture = avance.mois_debut_couverture.replace(year=avance.mois_debut_couverture.year + 2000)
        corrected = True
    if avance.mois_fin_couverture and avance.mois_fin_couverture.year < 2000:
        avance.mois_fin_couverture = avance.mois_fin_couverture.replace(year=avance.mois_fin_couverture.year + 2000)
        corrected = True
    if corrected:
        avance.save()
        avances_corrigees += 1

print(f"Avances corrig√©es: {avances_corrigees}")

# Supprimer les consommations avec des dates incorrectes
consommations_supprimees = ConsommationAvance.objects.filter(mois_consomme__year__lt=2000).count()
ConsommationAvance.objects.filter(mois_consomme__year__lt=2000).delete()

print(f"Consommations supprim√©es: {consommations_supprimees}")

# Recalculer les montants restants
for avance in AvanceLoyer.objects.all():
    avance.montant_restant = avance.montant_avance
    avance.statut = 'active'
    avance.save()

print("Correction des donn√©es d'avances termin√©e")
PYTHON_EOF
    
    echo "‚úÖ Donn√©es d'avances corrig√©es"
}

# Fonction de v√©rification des avances
verify_avances() {
    echo "üîç V√©rification des avances intelligentes..."
    cd "$PROJECT_DIR"
    
    sudo -u $APP_USER bash -c "source venv/bin/activate && export DJANGO_SETTINGS_MODULE=$DJANGO_SETTINGS && python manage.py shell" << 'PYTHON_EOF'
from paiements.models_avance import AvanceLoyer

print("V√©rification des avances intelligentes...")

# V√©rifier les avances
avances = AvanceLoyer.objects.all()
print(f"Total avances: {avances.count()}")

# V√©rifier les avances avec des probl√®mes
problemes = avances.filter(montant_restant__lt=0)
print(f"Avances avec montant restant n√©gatif: {problemes.count()}")

# V√©rifier les dates
dates_incorrectes = avances.filter(mois_debut_couverture__year__lt=2000)
print(f"Avances avec dates incorrectes: {dates_incorrectes.count()}")

# V√©rifier les nouveaux champs
champs_manquants = avances.filter(paiement__isnull=True).count()
print(f"Avances sans paiement associ√©: {champs_manquants}")

print("V√©rification des avances termin√©e")
PYTHON_EOF
    
    echo "‚úÖ V√©rification des avances termin√©e"
}

# Fonction de mise √† jour du code avec avances intelligentes
update_code_with_avances() {
    echo "üì• Mise √† jour du code avec avances intelligentes..."
    
    cd "$PROJECT_DIR"
    
    if [ -d ".git" ]; then
        # Sauvegarder les modifications locales
        sudo -u $APP_USER git stash push -m "Sauvegarde avant mise √† jour avances intelligentes $(date +%Y%m%d_%H%M%S)"
        
        # R√©cup√©rer les derni√®res modifications
        sudo -u $APP_USER git fetch origin
        sudo -u $APP_USER git checkout "$AVANCES_BRANCH"
        sudo -u $APP_USER git pull origin "$AVANCES_BRANCH"
        
        echo "‚úÖ Code mis √† jour avec avances intelligentes"
    else
        echo "‚ùå Pas de repository Git trouv√©"
        exit 1
    fi
}

# Fonction d'application des migrations d'avances
apply_avances_migrations() {
    echo "üóÑÔ∏è Application des migrations d'avances intelligentes..."
    
    cd "$PROJECT_DIR"
    
    # Appliquer les migrations sp√©cifiques aux avances
    for migration in "${AVANCES_MIGRATIONS[@]}"; do
        echo "   Application de la migration: $migration"
        sudo -u $APP_USER bash -c "source venv/bin/activate && export DJANGO_SETTINGS_MODULE=$DJANGO_SETTINGS && python manage.py migrate $migration"
    done
    
    echo "‚úÖ Migrations d'avances appliqu√©es"
}

# Fonction de test des avances intelligentes
test_avances_features() {
    echo "üß™ Test des fonctionnalit√©s d'avances intelligentes..."
    
    cd "$PROJECT_DIR"
    
    # Test de cr√©ation d'avance
    sudo -u $APP_USER bash -c "source venv/bin/activate && export DJANGO_SETTINGS_MODULE=$DJANGO_SETTINGS && python manage.py shell" << 'PYTHON_EOF'
from paiements.services_avance import ServiceGestionAvance
from contrats.models import Contrat
from decimal import Decimal
from datetime import date

print("Test des fonctionnalit√©s d'avances intelligentes...")

# R√©cup√©rer un contrat
contrat = Contrat.objects.first()
if contrat:
    try:
        # Cr√©er une avance de test
        avance = ServiceGestionAvance.creer_avance_loyer(
            contrat=contrat,
            montant_avance=Decimal('100000'),
            date_avance=date.today(),
            notes="Test avances intelligentes"
        )
        print(f"Avance cr√©√©e: {avance.id}, Statut: {avance.statut}")
        print(f"Paiement associ√©: {avance.paiement}")
        
        # Supprimer l'avance de test
        avance.delete()
        print("Test des avances intelligentes r√©ussi")
    except Exception as e:
        print(f"Erreur lors du test: {e}")
        raise
else:
    print("Aucun contrat trouv√© pour le test")
PYTHON_EOF
    
    echo "‚úÖ Test des avances intelligentes r√©ussi"
}

# Fonction principale de mise √† jour des avances
update_avances_intelligent_system() {
    echo "üöÄ Mise √† jour du syst√®me d'avances intelligentes..."
    
    # Sauvegarder les donn√©es d'avances
    backup_avances_data
    
    # Mettre √† jour le code
    update_code_with_avances
    
    # Installer les d√©pendances
    install_dependencies
    
    # Appliquer les migrations
    apply_avances_migrations
    
    # Corriger les donn√©es
    fix_avances_data
    
    # Collecter les fichiers statiques
    collect_static_files
    
    # Red√©marrer les services
    restart_services
    
    # V√©rifier le d√©ploiement
    verify_avances
    
    # Tester les fonctionnalit√©s
    test_avances_features
    
    echo "‚úÖ Syst√®me d'avances intelligentes mis √† jour avec succ√®s"
}

FUNCTIONS_EOF

} > /tmp/deploy_secure_updated.sh

# Remplacer le script original
echo "üîÑ Remplacement du script original..."
mv /tmp/deploy_secure_updated.sh /opt/deploy_secure.sh
chmod +x /opt/deploy_secure.sh

echo "‚úÖ Script /opt/deploy_secure.sh mis √† jour avec succ√®s"
echo ""
echo "üéâ Mise √† jour termin√©e !"
echo ""
echo "üìã Nouvelles fonctionnalit√©s ajout√©es :"
echo "   - Int√©gration automatique des avances dans le syst√®me de paiement"
echo "   - D√©tection intelligente des avances existantes"
echo "   - S√©lection manuelle des mois couverts"
echo "   - Correction automatique des donn√©es existantes"
echo "   - Interface utilisateur am√©lior√©e"
echo ""
echo "üöÄ Pour d√©ployer :"
echo "   sudo /opt/deploy_secure.sh"
echo ""
echo "üìä Le script g√®re maintenant automatiquement :"
echo "   - Sauvegarde des donn√©es d'avances"
echo "   - Mise √† jour vers la branche modifications-octobre-2025"
echo "   - Application des migrations 0011 et 0012"
echo "   - Correction des dates incorrectes (0225 ‚Üí 2025)"
echo "   - Recalcul des montants restants"
echo "   - Test des nouvelles fonctionnalit√©s"
echo ""
echo "‚úÖ Votre script de d√©ploiement s√©curis√© est maintenant pr√™t !"
