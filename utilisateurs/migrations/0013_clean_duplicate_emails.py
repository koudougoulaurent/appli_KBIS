# Generated by Django 4.2.24 on 2025-10-19 07:56

from django.db import migrations


def clean_duplicate_emails(apps, schema_editor):
    """
    Nettoie les emails en double en ajoutant un suffixe numérique
    """
    Utilisateur = apps.get_model('utilisateurs', 'Utilisateur')
    
    # Trouver tous les emails en double
    from django.db.models import Count
    duplicate_emails = Utilisateur.objects.values('email').annotate(
        count=Count('email')
    ).filter(count__gt=1)
    
    for email_data in duplicate_emails:
        email = email_data['email']
        if email:  # Ignorer les emails vides ou None
            # Récupérer tous les utilisateurs avec cet email
            users_with_same_email = Utilisateur.objects.filter(email=email).order_by('id')
            
            # Garder le premier utilisateur, modifier les autres
            for i, user in enumerate(users_with_same_email[1:], 1):
                # Ajouter un suffixe numérique à l'email
                new_email = f"{email.split('@')[0]}+{i}@{email.split('@')[1]}"
                user.email = new_email
                user.save()


def reverse_clean_duplicate_emails(apps, schema_editor):
    """
    Fonction de rollback - ne fait rien car on ne peut pas deviner les emails originaux
    """
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('utilisateurs', '0012_add_email_uniqueness'),
    ]

    operations = [
        migrations.RunPython(clean_duplicate_emails, reverse_clean_duplicate_emails),
    ]
