#!/usr/bin/env python3
"""
Script de v√©rification automatique des donn√©es essentielles
S'ex√©cute au d√©marrage sur Render pour s'assurer que les donn√©es de base existent
"""

import os
import sys
import django

# Configuration de Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gestion_immobiliere.settings')
django.setup()

from django.contrib.auth.hashers import make_password
from utilisateurs.models import GroupeTravail, Utilisateur
from proprietes.models import TypeBien
import logging

logger = logging.getLogger(__name__)

def verifier_et_creer_donnees():
    """V√©rifie et cr√©e les donn√©es essentielles si elles n'existent pas"""
    try:
        print("üîç V√©rification des donn√©es essentielles...")
        
        # 1. Cr√©er les groupes de travail
        groupes_data = [
            {'nom': 'CAISSE', 'description': 'Gestion des paiements et retraits'},
            {'nom': 'CONTROLES', 'description': 'Contr√¥le et audit'},
            {'nom': 'ADMINISTRATION', 'description': 'Gestion administrative'},
            {'nom': 'PRIVILEGE', 'description': 'Acc√®s complet'},
        ]
        
        for groupe_data in groupes_data:
            groupe, created = GroupeTravail.objects.update_or_create(
                nom=groupe_data['nom'],
                defaults={
                    'description': groupe_data['description'],
                    'actif': True,
                    'permissions': {}
                }
            )
            if created:
                print(f"‚úÖ Groupe cr√©√©: {groupe.nom}")
            else:
                print(f"‚ÑπÔ∏è  Groupe existant: {groupe.nom}")
        
        # 2. Cr√©er les types de biens
        types_data = [
            {'nom': 'Appartement', 'description': 'Appartement en immeuble'},
            {'nom': 'Maison', 'description': 'Maison individuelle'},
            {'nom': 'Studio', 'description': 'Studio meubl√©'},
            {'nom': 'Loft', 'description': 'Loft industriel'},
            {'nom': 'Villa', 'description': 'Villa avec jardin'},
            {'nom': 'Duplex', 'description': 'Duplex sur deux niveaux'},
            {'nom': 'Penthouse', 'description': 'Penthouse de luxe'},
            {'nom': 'Ch√¢teau', 'description': 'Ch√¢teau ou manoir'},
            {'nom': 'Ferme', 'description': 'Ferme ou propri√©t√© rurale'},
            {'nom': 'Bureau', 'description': 'Local commercial ou bureau'},
            {'nom': 'Commerce', 'description': 'Local commercial'},
            {'nom': 'Entrep√¥t', 'description': 'Entrep√¥t ou local industriel'},
            {'nom': 'Garage', 'description': 'Garage ou parking'},
            {'nom': 'Terrain', 'description': 'Terrain constructible'},
            {'nom': 'Autre', 'description': 'Autre type de bien'},
        ]
        
        for type_data in types_data:
            type_bien, created = TypeBien.objects.update_or_create(
                nom=type_data['nom'],
                defaults=type_data
            )
            if created:
                print(f"‚úÖ Type cr√©√©: {type_bien.nom}")
            else:
                print(f"‚ÑπÔ∏è  Type existant: {type_bien.nom}")
        
        # 3. Cr√©er l'utilisateur admin s'il n'existe pas
        if not Utilisateur.objects.filter(username='admin').exists():
            groupe_privilege = GroupeTravail.objects.get(nom='PRIVILEGE')
            Utilisateur.objects.create(
                username='admin',
                email='admin@gestimmob.com',
                first_name='Super',
                last_name='Administrateur',
                groupe_travail=groupe_privilege,
                is_staff=True,
                is_superuser=True,
                actif=True,
                password=make_password('password123')
            )
            print("‚úÖ Utilisateur admin cr√©√©")
        else:
            print("‚ÑπÔ∏è  Utilisateur admin existant")
        
        print("üéâ V√©rification des donn√©es termin√©e avec succ√®s !")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification des donn√©es: {e}")
        import traceback
        print(traceback.format_exc())
        sys.exit(1)

if __name__ == "__main__":
    verifier_et_creer_donnees()