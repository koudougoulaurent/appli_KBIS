#!/usr/bin/env python
"""
Script de v√©rification du syst√®me d'unit√©s locatives
"""
import os
import django
import sys

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'gestion_immobiliere.settings')
django.setup()

from proprietes.models import Propriete, UniteLocative, ReservationUnite
from contrats.models import Contrat
from django.urls import reverse
from django.test import Client
from django.contrib.auth import get_user_model

User = get_user_model()

def verifier_modeles():
    """V√©rifier que les mod√®les sont bien cr√©√©s et fonctionnels."""
    print("üîç V√©rification des mod√®les...")
    
    # V√©rifier les unit√©s locatives
    total_unites = UniteLocative.objects.count()
    print(f"‚úÖ {total_unites} unit√©s locatives trouv√©es")
    
    if total_unites > 0:
        unite = UniteLocative.objects.first()
        print(f"   ‚Ä¢ Exemple: {unite.numero_unite} - {unite.nom}")
        print(f"   ‚Ä¢ M√©thodes: est_disponible() = {unite.est_disponible()}")
        print(f"   ‚Ä¢ Loyer total: {unite.get_loyer_total()} F CFA")
        
        # V√©rifier la propri√©t√© associ√©e
        propriete = unite.propriete
        print(f"   ‚Ä¢ Propri√©t√©: {propriete.titre}")
        print(f"   ‚Ä¢ Est grande propri√©t√©: {propriete.est_grande_propriete()}")
        print(f"   ‚Ä¢ Nombre d'unit√©s: {propriete.get_nombre_unites_locatives()}")
        print(f"   ‚Ä¢ Taux d'occupation: {propriete.get_taux_occupation_global()}%")
    
    # V√©rifier les r√©servations
    total_reservations = ReservationUnite.objects.count()
    print(f"‚úÖ {total_reservations} r√©servations trouv√©es")
    
    if total_reservations > 0:
        reservation = ReservationUnite.objects.first()
        print(f"   ‚Ä¢ Exemple: {reservation.unite_locative.numero_unite} pour {reservation.locataire_potentiel.get_nom_complet()}")
        print(f"   ‚Ä¢ Statut: {reservation.get_statut_display()}")
        print(f"   ‚Ä¢ Active: {reservation.est_active()}")

def verifier_urls():
    """V√©rifier que les URLs sont bien configur√©es."""
    print("\nüîó V√©rification des URLs...")
    
    urls_to_check = [
        ('proprietes:unites_liste', 'Liste des unit√©s'),
        ('proprietes:unite_create', 'Cr√©ation d\'unit√©'),
        ('proprietes:api_unites_disponibles', 'API unit√©s disponibles'),
    ]
    
    for url_name, description in urls_to_check:
        try:
            url = reverse(url_name)
            print(f"‚úÖ {description}: {url}")
        except Exception as e:
            print(f"‚ùå {description}: Erreur - {e}")
    
    # V√©rifier les URLs avec param√®tres
    if UniteLocative.objects.exists():
        unite = UniteLocative.objects.first()
        propriete = unite.propriete
        
        try:
            url = reverse('proprietes:unite_detail', kwargs={'pk': unite.pk})
            print(f"‚úÖ D√©tail unit√©: {url}")
        except Exception as e:
            print(f"‚ùå D√©tail unit√©: Erreur - {e}")
        
        try:
            url = reverse('proprietes:dashboard_propriete', kwargs={'propriete_id': propriete.pk})
            print(f"‚úÖ Dashboard propri√©t√©: {url}")
        except Exception as e:
            print(f"‚ùå Dashboard propri√©t√©: Erreur - {e}")

def verifier_admin():
    """V√©rifier l'interface d'administration."""
    print("\nüõ†Ô∏è  V√©rification de l'interface admin...")
    
    from django.contrib import admin
    from proprietes.models import UniteLocative, ReservationUnite
    
    # V√©rifier que les mod√®les sont enregistr√©s
    if UniteLocative in admin.site._registry:
        print("‚úÖ UniteLocative enregistr√© dans l'admin")
    else:
        print("‚ùå UniteLocative non enregistr√© dans l'admin")
    
    if ReservationUnite in admin.site._registry:
        print("‚úÖ ReservationUnite enregistr√© dans l'admin")
    else:
        print("‚ùå ReservationUnite non enregistr√© dans l'admin")

def verifier_templates():
    """V√©rifier que les templates existent."""
    print("\nüìÑ V√©rification des templates...")
    
    templates_to_check = [
        'templates/proprietes/unites/liste.html',
        'templates/proprietes/dashboard_propriete.html',
        'templates/core/dashboard.html',
    ]
    
    for template_path in templates_to_check:
        full_path = os.path.join(os.path.dirname(__file__), template_path)
        if os.path.exists(full_path):
            print(f"‚úÖ Template trouv√©: {template_path}")
        else:
            print(f"‚ùå Template manquant: {template_path}")

def verifier_migrations():
    """V√©rifier que les migrations sont appliqu√©es."""
    print("\nüóÑÔ∏è  V√©rification des migrations...")
    
    from django.db import connection
    
    # V√©rifier que les tables existent
    with connection.cursor() as cursor:
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = [row[0] for row in cursor.fetchall()]
        
        tables_to_check = [
            'proprietes_unitelocative',
            'proprietes_reservationunite',
        ]
        
        for table in tables_to_check:
            if table in tables:
                print(f"‚úÖ Table {table} existe")
            else:
                print(f"‚ùå Table {table} manquante")

def verifier_statistiques():
    """V√©rifier les statistiques du syst√®me."""
    print("\nüìä Statistiques du syst√®me...")
    
    # Statistiques g√©n√©rales
    total_proprietes = Propriete.objects.filter(is_deleted=False).count()
    grandes_proprietes = sum(1 for p in Propriete.objects.filter(is_deleted=False) if p.est_grande_propriete())
    
    print(f"   ‚Ä¢ Total propri√©t√©s: {total_proprietes}")
    print(f"   ‚Ä¢ Grandes propri√©t√©s: {grandes_proprietes}")
    
    # Statistiques des unit√©s
    unites_stats = {
        'total': UniteLocative.objects.filter(is_deleted=False).count(),
        'disponibles': UniteLocative.objects.filter(is_deleted=False, statut='disponible').count(),
        'occupees': UniteLocative.objects.filter(is_deleted=False, statut='occupee').count(),
        'reservees': UniteLocative.objects.filter(is_deleted=False, statut='reservee').count(),
    }
    
    print(f"   ‚Ä¢ Unit√©s locatives:")
    for statut, count in unites_stats.items():
        print(f"     - {statut.capitalize()}: {count}")
    
    # Statistiques des r√©servations
    reservations_stats = {
        'total': ReservationUnite.objects.filter(is_deleted=False).count(),
        'actives': sum(1 for r in ReservationUnite.objects.filter(is_deleted=False) if r.est_active()),
        'expirees': sum(1 for r in ReservationUnite.objects.filter(is_deleted=False) if r.est_expiree()),
    }
    
    print(f"   ‚Ä¢ R√©servations:")
    for statut, count in reservations_stats.items():
        print(f"     - {statut.capitalize()}: {count}")

def verifier_integration_contrats():
    """V√©rifier l'int√©gration avec les contrats."""
    print("\nü§ù V√©rification de l'int√©gration avec les contrats...")
    
    # V√©rifier que le mod√®le Contrat a bien le champ unite_locative
    from contrats.models import Contrat
    
    try:
        # Essayer d'acc√©der au champ
        contrat = Contrat.objects.first()
        if contrat:
            unite = contrat.unite_locative
            print(f"‚úÖ Champ unite_locative accessible dans Contrat")
            if unite:
                print(f"   ‚Ä¢ Contrat li√© √† l'unit√©: {unite.numero_unite}")
            else:
                print(f"   ‚Ä¢ Contrat sans unit√© locative (normal pour anciens contrats)")
        else:
            print(f"‚ÑπÔ∏è  Aucun contrat existant pour tester l'int√©gration")
    except AttributeError as e:
        print(f"‚ùå Erreur d'int√©gration avec les contrats: {e}")

def main():
    """Fonction principale de v√©rification."""
    print("üöÄ V√âRIFICATION DU SYST√àME D'UNIT√âS LOCATIVES")
    print("=" * 60)
    
    try:
        verifier_modeles()
        verifier_urls()
        verifier_admin()
        verifier_templates()
        verifier_migrations()
        verifier_statistiques()
        verifier_integration_contrats()
        
        print("\n" + "=" * 60)
        print("‚úÖ V√âRIFICATION TERMIN√âE AVEC SUCC√àS!")
        print("\nüéØ PROCHAINES √âTAPES:")
        print("   1. Lancez le serveur: python manage.py runserver")
        print("   2. Acc√©dez au dashboard: http://localhost:8000/")
        print("   3. Testez les unit√©s locatives: http://localhost:8000/proprietes/unites/")
        print("   4. Explorez l'admin: http://localhost:8000/admin/")
        
    except Exception as e:
        print(f"\n‚ùå ERREUR LORS DE LA V√âRIFICATION: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()
